
Projet_Instrum.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006a00  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000bc  08006ba0  08006ba0  00016ba0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006c5c  08006c5c  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08006c5c  08006c5c  00016c5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006c64  08006c64  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006c64  08006c64  00016c64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006c68  08006c68  00016c68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08006c6c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004afc  20000010  08006c7c  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004b0c  08006c7c  00024b0c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a402  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000034e5  00000000  00000000  0003a442  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001560  00000000  00000000  0003d928  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001438  00000000  00000000  0003ee88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000033bc  00000000  00000000  000402c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000160d3  00000000  00000000  0004367c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a32ad  00000000  00000000  0005974f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000fc9fc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005b10  00000000  00000000  000fca50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000010 	.word	0x20000010
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006b88 	.word	0x08006b88

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000014 	.word	0x20000014
 80001dc:	08006b88 	.word	0x08006b88

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b96e 	b.w	80004d4 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	468c      	mov	ip, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	f040 8083 	bne.w	8000326 <__udivmoddi4+0x116>
 8000220:	428a      	cmp	r2, r1
 8000222:	4617      	mov	r7, r2
 8000224:	d947      	bls.n	80002b6 <__udivmoddi4+0xa6>
 8000226:	fab2 f282 	clz	r2, r2
 800022a:	b142      	cbz	r2, 800023e <__udivmoddi4+0x2e>
 800022c:	f1c2 0020 	rsb	r0, r2, #32
 8000230:	fa24 f000 	lsr.w	r0, r4, r0
 8000234:	4091      	lsls	r1, r2
 8000236:	4097      	lsls	r7, r2
 8000238:	ea40 0c01 	orr.w	ip, r0, r1
 800023c:	4094      	lsls	r4, r2
 800023e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000242:	0c23      	lsrs	r3, r4, #16
 8000244:	fbbc f6f8 	udiv	r6, ip, r8
 8000248:	fa1f fe87 	uxth.w	lr, r7
 800024c:	fb08 c116 	mls	r1, r8, r6, ip
 8000250:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000254:	fb06 f10e 	mul.w	r1, r6, lr
 8000258:	4299      	cmp	r1, r3
 800025a:	d909      	bls.n	8000270 <__udivmoddi4+0x60>
 800025c:	18fb      	adds	r3, r7, r3
 800025e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000262:	f080 8119 	bcs.w	8000498 <__udivmoddi4+0x288>
 8000266:	4299      	cmp	r1, r3
 8000268:	f240 8116 	bls.w	8000498 <__udivmoddi4+0x288>
 800026c:	3e02      	subs	r6, #2
 800026e:	443b      	add	r3, r7
 8000270:	1a5b      	subs	r3, r3, r1
 8000272:	b2a4      	uxth	r4, r4
 8000274:	fbb3 f0f8 	udiv	r0, r3, r8
 8000278:	fb08 3310 	mls	r3, r8, r0, r3
 800027c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000280:	fb00 fe0e 	mul.w	lr, r0, lr
 8000284:	45a6      	cmp	lr, r4
 8000286:	d909      	bls.n	800029c <__udivmoddi4+0x8c>
 8000288:	193c      	adds	r4, r7, r4
 800028a:	f100 33ff 	add.w	r3, r0, #4294967295
 800028e:	f080 8105 	bcs.w	800049c <__udivmoddi4+0x28c>
 8000292:	45a6      	cmp	lr, r4
 8000294:	f240 8102 	bls.w	800049c <__udivmoddi4+0x28c>
 8000298:	3802      	subs	r0, #2
 800029a:	443c      	add	r4, r7
 800029c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002a0:	eba4 040e 	sub.w	r4, r4, lr
 80002a4:	2600      	movs	r6, #0
 80002a6:	b11d      	cbz	r5, 80002b0 <__udivmoddi4+0xa0>
 80002a8:	40d4      	lsrs	r4, r2
 80002aa:	2300      	movs	r3, #0
 80002ac:	e9c5 4300 	strd	r4, r3, [r5]
 80002b0:	4631      	mov	r1, r6
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	b902      	cbnz	r2, 80002ba <__udivmoddi4+0xaa>
 80002b8:	deff      	udf	#255	; 0xff
 80002ba:	fab2 f282 	clz	r2, r2
 80002be:	2a00      	cmp	r2, #0
 80002c0:	d150      	bne.n	8000364 <__udivmoddi4+0x154>
 80002c2:	1bcb      	subs	r3, r1, r7
 80002c4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002c8:	fa1f f887 	uxth.w	r8, r7
 80002cc:	2601      	movs	r6, #1
 80002ce:	fbb3 fcfe 	udiv	ip, r3, lr
 80002d2:	0c21      	lsrs	r1, r4, #16
 80002d4:	fb0e 331c 	mls	r3, lr, ip, r3
 80002d8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002dc:	fb08 f30c 	mul.w	r3, r8, ip
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d907      	bls.n	80002f4 <__udivmoddi4+0xe4>
 80002e4:	1879      	adds	r1, r7, r1
 80002e6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002ea:	d202      	bcs.n	80002f2 <__udivmoddi4+0xe2>
 80002ec:	428b      	cmp	r3, r1
 80002ee:	f200 80e9 	bhi.w	80004c4 <__udivmoddi4+0x2b4>
 80002f2:	4684      	mov	ip, r0
 80002f4:	1ac9      	subs	r1, r1, r3
 80002f6:	b2a3      	uxth	r3, r4
 80002f8:	fbb1 f0fe 	udiv	r0, r1, lr
 80002fc:	fb0e 1110 	mls	r1, lr, r0, r1
 8000300:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000304:	fb08 f800 	mul.w	r8, r8, r0
 8000308:	45a0      	cmp	r8, r4
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x10c>
 800030c:	193c      	adds	r4, r7, r4
 800030e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x10a>
 8000314:	45a0      	cmp	r8, r4
 8000316:	f200 80d9 	bhi.w	80004cc <__udivmoddi4+0x2bc>
 800031a:	4618      	mov	r0, r3
 800031c:	eba4 0408 	sub.w	r4, r4, r8
 8000320:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000324:	e7bf      	b.n	80002a6 <__udivmoddi4+0x96>
 8000326:	428b      	cmp	r3, r1
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x12e>
 800032a:	2d00      	cmp	r5, #0
 800032c:	f000 80b1 	beq.w	8000492 <__udivmoddi4+0x282>
 8000330:	2600      	movs	r6, #0
 8000332:	e9c5 0100 	strd	r0, r1, [r5]
 8000336:	4630      	mov	r0, r6
 8000338:	4631      	mov	r1, r6
 800033a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800033e:	fab3 f683 	clz	r6, r3
 8000342:	2e00      	cmp	r6, #0
 8000344:	d14a      	bne.n	80003dc <__udivmoddi4+0x1cc>
 8000346:	428b      	cmp	r3, r1
 8000348:	d302      	bcc.n	8000350 <__udivmoddi4+0x140>
 800034a:	4282      	cmp	r2, r0
 800034c:	f200 80b8 	bhi.w	80004c0 <__udivmoddi4+0x2b0>
 8000350:	1a84      	subs	r4, r0, r2
 8000352:	eb61 0103 	sbc.w	r1, r1, r3
 8000356:	2001      	movs	r0, #1
 8000358:	468c      	mov	ip, r1
 800035a:	2d00      	cmp	r5, #0
 800035c:	d0a8      	beq.n	80002b0 <__udivmoddi4+0xa0>
 800035e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000362:	e7a5      	b.n	80002b0 <__udivmoddi4+0xa0>
 8000364:	f1c2 0320 	rsb	r3, r2, #32
 8000368:	fa20 f603 	lsr.w	r6, r0, r3
 800036c:	4097      	lsls	r7, r2
 800036e:	fa01 f002 	lsl.w	r0, r1, r2
 8000372:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000376:	40d9      	lsrs	r1, r3
 8000378:	4330      	orrs	r0, r6
 800037a:	0c03      	lsrs	r3, r0, #16
 800037c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000380:	fa1f f887 	uxth.w	r8, r7
 8000384:	fb0e 1116 	mls	r1, lr, r6, r1
 8000388:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800038c:	fb06 f108 	mul.w	r1, r6, r8
 8000390:	4299      	cmp	r1, r3
 8000392:	fa04 f402 	lsl.w	r4, r4, r2
 8000396:	d909      	bls.n	80003ac <__udivmoddi4+0x19c>
 8000398:	18fb      	adds	r3, r7, r3
 800039a:	f106 3cff 	add.w	ip, r6, #4294967295
 800039e:	f080 808d 	bcs.w	80004bc <__udivmoddi4+0x2ac>
 80003a2:	4299      	cmp	r1, r3
 80003a4:	f240 808a 	bls.w	80004bc <__udivmoddi4+0x2ac>
 80003a8:	3e02      	subs	r6, #2
 80003aa:	443b      	add	r3, r7
 80003ac:	1a5b      	subs	r3, r3, r1
 80003ae:	b281      	uxth	r1, r0
 80003b0:	fbb3 f0fe 	udiv	r0, r3, lr
 80003b4:	fb0e 3310 	mls	r3, lr, r0, r3
 80003b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003bc:	fb00 f308 	mul.w	r3, r0, r8
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x1c4>
 80003c4:	1879      	adds	r1, r7, r1
 80003c6:	f100 3cff 	add.w	ip, r0, #4294967295
 80003ca:	d273      	bcs.n	80004b4 <__udivmoddi4+0x2a4>
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d971      	bls.n	80004b4 <__udivmoddi4+0x2a4>
 80003d0:	3802      	subs	r0, #2
 80003d2:	4439      	add	r1, r7
 80003d4:	1acb      	subs	r3, r1, r3
 80003d6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003da:	e778      	b.n	80002ce <__udivmoddi4+0xbe>
 80003dc:	f1c6 0c20 	rsb	ip, r6, #32
 80003e0:	fa03 f406 	lsl.w	r4, r3, r6
 80003e4:	fa22 f30c 	lsr.w	r3, r2, ip
 80003e8:	431c      	orrs	r4, r3
 80003ea:	fa20 f70c 	lsr.w	r7, r0, ip
 80003ee:	fa01 f306 	lsl.w	r3, r1, r6
 80003f2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003f6:	fa21 f10c 	lsr.w	r1, r1, ip
 80003fa:	431f      	orrs	r7, r3
 80003fc:	0c3b      	lsrs	r3, r7, #16
 80003fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000402:	fa1f f884 	uxth.w	r8, r4
 8000406:	fb0e 1119 	mls	r1, lr, r9, r1
 800040a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800040e:	fb09 fa08 	mul.w	sl, r9, r8
 8000412:	458a      	cmp	sl, r1
 8000414:	fa02 f206 	lsl.w	r2, r2, r6
 8000418:	fa00 f306 	lsl.w	r3, r0, r6
 800041c:	d908      	bls.n	8000430 <__udivmoddi4+0x220>
 800041e:	1861      	adds	r1, r4, r1
 8000420:	f109 30ff 	add.w	r0, r9, #4294967295
 8000424:	d248      	bcs.n	80004b8 <__udivmoddi4+0x2a8>
 8000426:	458a      	cmp	sl, r1
 8000428:	d946      	bls.n	80004b8 <__udivmoddi4+0x2a8>
 800042a:	f1a9 0902 	sub.w	r9, r9, #2
 800042e:	4421      	add	r1, r4
 8000430:	eba1 010a 	sub.w	r1, r1, sl
 8000434:	b2bf      	uxth	r7, r7
 8000436:	fbb1 f0fe 	udiv	r0, r1, lr
 800043a:	fb0e 1110 	mls	r1, lr, r0, r1
 800043e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000442:	fb00 f808 	mul.w	r8, r0, r8
 8000446:	45b8      	cmp	r8, r7
 8000448:	d907      	bls.n	800045a <__udivmoddi4+0x24a>
 800044a:	19e7      	adds	r7, r4, r7
 800044c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000450:	d22e      	bcs.n	80004b0 <__udivmoddi4+0x2a0>
 8000452:	45b8      	cmp	r8, r7
 8000454:	d92c      	bls.n	80004b0 <__udivmoddi4+0x2a0>
 8000456:	3802      	subs	r0, #2
 8000458:	4427      	add	r7, r4
 800045a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800045e:	eba7 0708 	sub.w	r7, r7, r8
 8000462:	fba0 8902 	umull	r8, r9, r0, r2
 8000466:	454f      	cmp	r7, r9
 8000468:	46c6      	mov	lr, r8
 800046a:	4649      	mov	r1, r9
 800046c:	d31a      	bcc.n	80004a4 <__udivmoddi4+0x294>
 800046e:	d017      	beq.n	80004a0 <__udivmoddi4+0x290>
 8000470:	b15d      	cbz	r5, 800048a <__udivmoddi4+0x27a>
 8000472:	ebb3 020e 	subs.w	r2, r3, lr
 8000476:	eb67 0701 	sbc.w	r7, r7, r1
 800047a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800047e:	40f2      	lsrs	r2, r6
 8000480:	ea4c 0202 	orr.w	r2, ip, r2
 8000484:	40f7      	lsrs	r7, r6
 8000486:	e9c5 2700 	strd	r2, r7, [r5]
 800048a:	2600      	movs	r6, #0
 800048c:	4631      	mov	r1, r6
 800048e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000492:	462e      	mov	r6, r5
 8000494:	4628      	mov	r0, r5
 8000496:	e70b      	b.n	80002b0 <__udivmoddi4+0xa0>
 8000498:	4606      	mov	r6, r0
 800049a:	e6e9      	b.n	8000270 <__udivmoddi4+0x60>
 800049c:	4618      	mov	r0, r3
 800049e:	e6fd      	b.n	800029c <__udivmoddi4+0x8c>
 80004a0:	4543      	cmp	r3, r8
 80004a2:	d2e5      	bcs.n	8000470 <__udivmoddi4+0x260>
 80004a4:	ebb8 0e02 	subs.w	lr, r8, r2
 80004a8:	eb69 0104 	sbc.w	r1, r9, r4
 80004ac:	3801      	subs	r0, #1
 80004ae:	e7df      	b.n	8000470 <__udivmoddi4+0x260>
 80004b0:	4608      	mov	r0, r1
 80004b2:	e7d2      	b.n	800045a <__udivmoddi4+0x24a>
 80004b4:	4660      	mov	r0, ip
 80004b6:	e78d      	b.n	80003d4 <__udivmoddi4+0x1c4>
 80004b8:	4681      	mov	r9, r0
 80004ba:	e7b9      	b.n	8000430 <__udivmoddi4+0x220>
 80004bc:	4666      	mov	r6, ip
 80004be:	e775      	b.n	80003ac <__udivmoddi4+0x19c>
 80004c0:	4630      	mov	r0, r6
 80004c2:	e74a      	b.n	800035a <__udivmoddi4+0x14a>
 80004c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c8:	4439      	add	r1, r7
 80004ca:	e713      	b.n	80002f4 <__udivmoddi4+0xe4>
 80004cc:	3802      	subs	r0, #2
 80004ce:	443c      	add	r4, r7
 80004d0:	e724      	b.n	800031c <__udivmoddi4+0x10c>
 80004d2:	bf00      	nop

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004dc:	f000 fd26 	bl	8000f2c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004e0:	f000 f83c 	bl	800055c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e4:	f000 f9cc 	bl	8000880 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004e8:	f000 f9a0 	bl	800082c <MX_USART2_UART_Init>
  MX_TIM2_Init();
 80004ec:	f000 f8f2 	bl	80006d4 <MX_TIM2_Init>
  MX_TIM3_Init();
 80004f0:	f000 f944 	bl	800077c <MX_TIM3_Init>
  MX_ADC1_Init();
 80004f4:	f000 f89c 	bl	8000630 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80004f8:	2104      	movs	r1, #4
 80004fa:	480f      	ldr	r0, [pc, #60]	; (8000538 <main+0x60>)
 80004fc:	f002 f88e 	bl	800261c <HAL_TIM_PWM_Start>
  HAL_UART_Init(&huart2);
 8000500:	480e      	ldr	r0, [pc, #56]	; (800053c <main+0x64>)
 8000502:	f002 ff11 	bl	8003328 <HAL_UART_Init>
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8000506:	213c      	movs	r1, #60	; 0x3c
 8000508:	480d      	ldr	r0, [pc, #52]	; (8000540 <main+0x68>)
 800050a:	f002 f9dd 	bl	80028c8 <HAL_TIM_Encoder_Start>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800050e:	f003 fd57 	bl	8003fc0 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of MotorControl */
  MotorControlHandle = osThreadNew(MotorControlMeth, NULL, &MotorControl_attributes);
 8000512:	4a0c      	ldr	r2, [pc, #48]	; (8000544 <main+0x6c>)
 8000514:	2100      	movs	r1, #0
 8000516:	480c      	ldr	r0, [pc, #48]	; (8000548 <main+0x70>)
 8000518:	f003 fd9c 	bl	8004054 <osThreadNew>
 800051c:	4603      	mov	r3, r0
 800051e:	4a0b      	ldr	r2, [pc, #44]	; (800054c <main+0x74>)
 8000520:	6013      	str	r3, [r2, #0]

  /* creation of DataToIhm */
  DataToIhmHandle = osThreadNew(DataToIhmMeth, NULL, &DataToIhm_attributes);
 8000522:	4a0b      	ldr	r2, [pc, #44]	; (8000550 <main+0x78>)
 8000524:	2100      	movs	r1, #0
 8000526:	480b      	ldr	r0, [pc, #44]	; (8000554 <main+0x7c>)
 8000528:	f003 fd94 	bl	8004054 <osThreadNew>
 800052c:	4603      	mov	r3, r0
 800052e:	4a0a      	ldr	r2, [pc, #40]	; (8000558 <main+0x80>)
 8000530:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000532:	f003 fd69 	bl	8004008 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000536:	e7fe      	b.n	8000536 <main+0x5e>
 8000538:	20004940 	.word	0x20004940
 800053c:	20004a38 	.word	0x20004a38
 8000540:	200049f0 	.word	0x200049f0
 8000544:	08006bd4 	.word	0x08006bd4
 8000548:	08000989 	.word	0x08000989
 800054c:	2000493c 	.word	0x2000493c
 8000550:	08006bf8 	.word	0x08006bf8
 8000554:	080009c5 	.word	0x080009c5
 8000558:	20004a7c 	.word	0x20004a7c

0800055c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b094      	sub	sp, #80	; 0x50
 8000560:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000562:	f107 0320 	add.w	r3, r7, #32
 8000566:	2230      	movs	r2, #48	; 0x30
 8000568:	2100      	movs	r1, #0
 800056a:	4618      	mov	r0, r3
 800056c:	f006 fac2 	bl	8006af4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000570:	f107 030c 	add.w	r3, r7, #12
 8000574:	2200      	movs	r2, #0
 8000576:	601a      	str	r2, [r3, #0]
 8000578:	605a      	str	r2, [r3, #4]
 800057a:	609a      	str	r2, [r3, #8]
 800057c:	60da      	str	r2, [r3, #12]
 800057e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000580:	2300      	movs	r3, #0
 8000582:	60bb      	str	r3, [r7, #8]
 8000584:	4b28      	ldr	r3, [pc, #160]	; (8000628 <SystemClock_Config+0xcc>)
 8000586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000588:	4a27      	ldr	r2, [pc, #156]	; (8000628 <SystemClock_Config+0xcc>)
 800058a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800058e:	6413      	str	r3, [r2, #64]	; 0x40
 8000590:	4b25      	ldr	r3, [pc, #148]	; (8000628 <SystemClock_Config+0xcc>)
 8000592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000594:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000598:	60bb      	str	r3, [r7, #8]
 800059a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800059c:	2300      	movs	r3, #0
 800059e:	607b      	str	r3, [r7, #4]
 80005a0:	4b22      	ldr	r3, [pc, #136]	; (800062c <SystemClock_Config+0xd0>)
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	4a21      	ldr	r2, [pc, #132]	; (800062c <SystemClock_Config+0xd0>)
 80005a6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80005aa:	6013      	str	r3, [r2, #0]
 80005ac:	4b1f      	ldr	r3, [pc, #124]	; (800062c <SystemClock_Config+0xd0>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005b4:	607b      	str	r3, [r7, #4]
 80005b6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005b8:	2302      	movs	r3, #2
 80005ba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005bc:	2301      	movs	r3, #1
 80005be:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005c0:	2310      	movs	r3, #16
 80005c2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005c4:	2302      	movs	r3, #2
 80005c6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005c8:	2300      	movs	r3, #0
 80005ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80005cc:	2310      	movs	r3, #16
 80005ce:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80005d0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80005d4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80005d6:	2304      	movs	r3, #4
 80005d8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80005da:	2304      	movs	r3, #4
 80005dc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005de:	f107 0320 	add.w	r3, r7, #32
 80005e2:	4618      	mov	r0, r3
 80005e4:	f001 fa68 	bl	8001ab8 <HAL_RCC_OscConfig>
 80005e8:	4603      	mov	r3, r0
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d001      	beq.n	80005f2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80005ee:	f000 fa57 	bl	8000aa0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005f2:	230f      	movs	r3, #15
 80005f4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005f6:	2302      	movs	r3, #2
 80005f8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005fa:	2300      	movs	r3, #0
 80005fc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000602:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000604:	2300      	movs	r3, #0
 8000606:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000608:	f107 030c 	add.w	r3, r7, #12
 800060c:	2102      	movs	r1, #2
 800060e:	4618      	mov	r0, r3
 8000610:	f001 fcca 	bl	8001fa8 <HAL_RCC_ClockConfig>
 8000614:	4603      	mov	r3, r0
 8000616:	2b00      	cmp	r3, #0
 8000618:	d001      	beq.n	800061e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800061a:	f000 fa41 	bl	8000aa0 <Error_Handler>
  }
}
 800061e:	bf00      	nop
 8000620:	3750      	adds	r7, #80	; 0x50
 8000622:	46bd      	mov	sp, r7
 8000624:	bd80      	pop	{r7, pc}
 8000626:	bf00      	nop
 8000628:	40023800 	.word	0x40023800
 800062c:	40007000 	.word	0x40007000

08000630 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b084      	sub	sp, #16
 8000634:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000636:	463b      	mov	r3, r7
 8000638:	2200      	movs	r2, #0
 800063a:	601a      	str	r2, [r3, #0]
 800063c:	605a      	str	r2, [r3, #4]
 800063e:	609a      	str	r2, [r3, #8]
 8000640:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000642:	4b21      	ldr	r3, [pc, #132]	; (80006c8 <MX_ADC1_Init+0x98>)
 8000644:	4a21      	ldr	r2, [pc, #132]	; (80006cc <MX_ADC1_Init+0x9c>)
 8000646:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000648:	4b1f      	ldr	r3, [pc, #124]	; (80006c8 <MX_ADC1_Init+0x98>)
 800064a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800064e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000650:	4b1d      	ldr	r3, [pc, #116]	; (80006c8 <MX_ADC1_Init+0x98>)
 8000652:	2200      	movs	r2, #0
 8000654:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000656:	4b1c      	ldr	r3, [pc, #112]	; (80006c8 <MX_ADC1_Init+0x98>)
 8000658:	2200      	movs	r2, #0
 800065a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800065c:	4b1a      	ldr	r3, [pc, #104]	; (80006c8 <MX_ADC1_Init+0x98>)
 800065e:	2200      	movs	r2, #0
 8000660:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000662:	4b19      	ldr	r3, [pc, #100]	; (80006c8 <MX_ADC1_Init+0x98>)
 8000664:	2200      	movs	r2, #0
 8000666:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800066a:	4b17      	ldr	r3, [pc, #92]	; (80006c8 <MX_ADC1_Init+0x98>)
 800066c:	2200      	movs	r2, #0
 800066e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000670:	4b15      	ldr	r3, [pc, #84]	; (80006c8 <MX_ADC1_Init+0x98>)
 8000672:	4a17      	ldr	r2, [pc, #92]	; (80006d0 <MX_ADC1_Init+0xa0>)
 8000674:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000676:	4b14      	ldr	r3, [pc, #80]	; (80006c8 <MX_ADC1_Init+0x98>)
 8000678:	2200      	movs	r2, #0
 800067a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800067c:	4b12      	ldr	r3, [pc, #72]	; (80006c8 <MX_ADC1_Init+0x98>)
 800067e:	2201      	movs	r2, #1
 8000680:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000682:	4b11      	ldr	r3, [pc, #68]	; (80006c8 <MX_ADC1_Init+0x98>)
 8000684:	2200      	movs	r2, #0
 8000686:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800068a:	4b0f      	ldr	r3, [pc, #60]	; (80006c8 <MX_ADC1_Init+0x98>)
 800068c:	2201      	movs	r2, #1
 800068e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000690:	480d      	ldr	r0, [pc, #52]	; (80006c8 <MX_ADC1_Init+0x98>)
 8000692:	f000 fc8d 	bl	8000fb0 <HAL_ADC_Init>
 8000696:	4603      	mov	r3, r0
 8000698:	2b00      	cmp	r3, #0
 800069a:	d001      	beq.n	80006a0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800069c:	f000 fa00 	bl	8000aa0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80006a0:	2301      	movs	r3, #1
 80006a2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80006a4:	2301      	movs	r3, #1
 80006a6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80006a8:	2300      	movs	r3, #0
 80006aa:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006ac:	463b      	mov	r3, r7
 80006ae:	4619      	mov	r1, r3
 80006b0:	4805      	ldr	r0, [pc, #20]	; (80006c8 <MX_ADC1_Init+0x98>)
 80006b2:	f000 fcc1 	bl	8001038 <HAL_ADC_ConfigChannel>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d001      	beq.n	80006c0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80006bc:	f000 f9f0 	bl	8000aa0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006c0:	bf00      	nop
 80006c2:	3710      	adds	r7, #16
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bd80      	pop	{r7, pc}
 80006c8:	20004988 	.word	0x20004988
 80006cc:	40012000 	.word	0x40012000
 80006d0:	0f000001 	.word	0x0f000001

080006d4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b08c      	sub	sp, #48	; 0x30
 80006d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80006da:	f107 030c 	add.w	r3, r7, #12
 80006de:	2224      	movs	r2, #36	; 0x24
 80006e0:	2100      	movs	r1, #0
 80006e2:	4618      	mov	r0, r3
 80006e4:	f006 fa06 	bl	8006af4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006e8:	1d3b      	adds	r3, r7, #4
 80006ea:	2200      	movs	r2, #0
 80006ec:	601a      	str	r2, [r3, #0]
 80006ee:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80006f0:	4b21      	ldr	r3, [pc, #132]	; (8000778 <MX_TIM2_Init+0xa4>)
 80006f2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80006f6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80006f8:	4b1f      	ldr	r3, [pc, #124]	; (8000778 <MX_TIM2_Init+0xa4>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006fe:	4b1e      	ldr	r3, [pc, #120]	; (8000778 <MX_TIM2_Init+0xa4>)
 8000700:	2200      	movs	r2, #0
 8000702:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000704:	4b1c      	ldr	r3, [pc, #112]	; (8000778 <MX_TIM2_Init+0xa4>)
 8000706:	f04f 32ff 	mov.w	r2, #4294967295
 800070a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800070c:	4b1a      	ldr	r3, [pc, #104]	; (8000778 <MX_TIM2_Init+0xa4>)
 800070e:	2200      	movs	r2, #0
 8000710:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000712:	4b19      	ldr	r3, [pc, #100]	; (8000778 <MX_TIM2_Init+0xa4>)
 8000714:	2200      	movs	r2, #0
 8000716:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000718:	2301      	movs	r3, #1
 800071a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800071c:	2300      	movs	r3, #0
 800071e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000720:	2301      	movs	r3, #1
 8000722:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000724:	2300      	movs	r3, #0
 8000726:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000728:	2300      	movs	r3, #0
 800072a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800072c:	2300      	movs	r3, #0
 800072e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000730:	2301      	movs	r3, #1
 8000732:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000734:	2300      	movs	r3, #0
 8000736:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000738:	2300      	movs	r3, #0
 800073a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 800073c:	f107 030c 	add.w	r3, r7, #12
 8000740:	4619      	mov	r1, r3
 8000742:	480d      	ldr	r0, [pc, #52]	; (8000778 <MX_TIM2_Init+0xa4>)
 8000744:	f002 f81a 	bl	800277c <HAL_TIM_Encoder_Init>
 8000748:	4603      	mov	r3, r0
 800074a:	2b00      	cmp	r3, #0
 800074c:	d001      	beq.n	8000752 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 800074e:	f000 f9a7 	bl	8000aa0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000752:	2300      	movs	r3, #0
 8000754:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000756:	2300      	movs	r3, #0
 8000758:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800075a:	1d3b      	adds	r3, r7, #4
 800075c:	4619      	mov	r1, r3
 800075e:	4806      	ldr	r0, [pc, #24]	; (8000778 <MX_TIM2_Init+0xa4>)
 8000760:	f002 fd60 	bl	8003224 <HAL_TIMEx_MasterConfigSynchronization>
 8000764:	4603      	mov	r3, r0
 8000766:	2b00      	cmp	r3, #0
 8000768:	d001      	beq.n	800076e <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 800076a:	f000 f999 	bl	8000aa0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800076e:	bf00      	nop
 8000770:	3730      	adds	r7, #48	; 0x30
 8000772:	46bd      	mov	sp, r7
 8000774:	bd80      	pop	{r7, pc}
 8000776:	bf00      	nop
 8000778:	200049f0 	.word	0x200049f0

0800077c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b08a      	sub	sp, #40	; 0x28
 8000780:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000782:	f107 0320 	add.w	r3, r7, #32
 8000786:	2200      	movs	r2, #0
 8000788:	601a      	str	r2, [r3, #0]
 800078a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800078c:	1d3b      	adds	r3, r7, #4
 800078e:	2200      	movs	r2, #0
 8000790:	601a      	str	r2, [r3, #0]
 8000792:	605a      	str	r2, [r3, #4]
 8000794:	609a      	str	r2, [r3, #8]
 8000796:	60da      	str	r2, [r3, #12]
 8000798:	611a      	str	r2, [r3, #16]
 800079a:	615a      	str	r2, [r3, #20]
 800079c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800079e:	4b21      	ldr	r3, [pc, #132]	; (8000824 <MX_TIM3_Init+0xa8>)
 80007a0:	4a21      	ldr	r2, [pc, #132]	; (8000828 <MX_TIM3_Init+0xac>)
 80007a2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 80;
 80007a4:	4b1f      	ldr	r3, [pc, #124]	; (8000824 <MX_TIM3_Init+0xa8>)
 80007a6:	2250      	movs	r2, #80	; 0x50
 80007a8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007aa:	4b1e      	ldr	r3, [pc, #120]	; (8000824 <MX_TIM3_Init+0xa8>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 200;
 80007b0:	4b1c      	ldr	r3, [pc, #112]	; (8000824 <MX_TIM3_Init+0xa8>)
 80007b2:	22c8      	movs	r2, #200	; 0xc8
 80007b4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007b6:	4b1b      	ldr	r3, [pc, #108]	; (8000824 <MX_TIM3_Init+0xa8>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007bc:	4b19      	ldr	r3, [pc, #100]	; (8000824 <MX_TIM3_Init+0xa8>)
 80007be:	2200      	movs	r2, #0
 80007c0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80007c2:	4818      	ldr	r0, [pc, #96]	; (8000824 <MX_TIM3_Init+0xa8>)
 80007c4:	f001 feda 	bl	800257c <HAL_TIM_PWM_Init>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d001      	beq.n	80007d2 <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 80007ce:	f000 f967 	bl	8000aa0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007d2:	2300      	movs	r3, #0
 80007d4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007d6:	2300      	movs	r3, #0
 80007d8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80007da:	f107 0320 	add.w	r3, r7, #32
 80007de:	4619      	mov	r1, r3
 80007e0:	4810      	ldr	r0, [pc, #64]	; (8000824 <MX_TIM3_Init+0xa8>)
 80007e2:	f002 fd1f 	bl	8003224 <HAL_TIMEx_MasterConfigSynchronization>
 80007e6:	4603      	mov	r3, r0
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d001      	beq.n	80007f0 <MX_TIM3_Init+0x74>
  {
    Error_Handler();
 80007ec:	f000 f958 	bl	8000aa0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80007f0:	2360      	movs	r3, #96	; 0x60
 80007f2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 200;
 80007f4:	23c8      	movs	r3, #200	; 0xc8
 80007f6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80007f8:	2300      	movs	r3, #0
 80007fa:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80007fc:	2300      	movs	r3, #0
 80007fe:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000800:	1d3b      	adds	r3, r7, #4
 8000802:	2204      	movs	r2, #4
 8000804:	4619      	mov	r1, r3
 8000806:	4807      	ldr	r0, [pc, #28]	; (8000824 <MX_TIM3_Init+0xa8>)
 8000808:	f002 f9f4 	bl	8002bf4 <HAL_TIM_PWM_ConfigChannel>
 800080c:	4603      	mov	r3, r0
 800080e:	2b00      	cmp	r3, #0
 8000810:	d001      	beq.n	8000816 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8000812:	f000 f945 	bl	8000aa0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000816:	4803      	ldr	r0, [pc, #12]	; (8000824 <MX_TIM3_Init+0xa8>)
 8000818:	f000 fa40 	bl	8000c9c <HAL_TIM_MspPostInit>

}
 800081c:	bf00      	nop
 800081e:	3728      	adds	r7, #40	; 0x28
 8000820:	46bd      	mov	sp, r7
 8000822:	bd80      	pop	{r7, pc}
 8000824:	20004940 	.word	0x20004940
 8000828:	40000400 	.word	0x40000400

0800082c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000830:	4b11      	ldr	r3, [pc, #68]	; (8000878 <MX_USART2_UART_Init+0x4c>)
 8000832:	4a12      	ldr	r2, [pc, #72]	; (800087c <MX_USART2_UART_Init+0x50>)
 8000834:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000836:	4b10      	ldr	r3, [pc, #64]	; (8000878 <MX_USART2_UART_Init+0x4c>)
 8000838:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800083c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800083e:	4b0e      	ldr	r3, [pc, #56]	; (8000878 <MX_USART2_UART_Init+0x4c>)
 8000840:	2200      	movs	r2, #0
 8000842:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000844:	4b0c      	ldr	r3, [pc, #48]	; (8000878 <MX_USART2_UART_Init+0x4c>)
 8000846:	2200      	movs	r2, #0
 8000848:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800084a:	4b0b      	ldr	r3, [pc, #44]	; (8000878 <MX_USART2_UART_Init+0x4c>)
 800084c:	2200      	movs	r2, #0
 800084e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000850:	4b09      	ldr	r3, [pc, #36]	; (8000878 <MX_USART2_UART_Init+0x4c>)
 8000852:	220c      	movs	r2, #12
 8000854:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000856:	4b08      	ldr	r3, [pc, #32]	; (8000878 <MX_USART2_UART_Init+0x4c>)
 8000858:	2200      	movs	r2, #0
 800085a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800085c:	4b06      	ldr	r3, [pc, #24]	; (8000878 <MX_USART2_UART_Init+0x4c>)
 800085e:	2200      	movs	r2, #0
 8000860:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000862:	4805      	ldr	r0, [pc, #20]	; (8000878 <MX_USART2_UART_Init+0x4c>)
 8000864:	f002 fd60 	bl	8003328 <HAL_UART_Init>
 8000868:	4603      	mov	r3, r0
 800086a:	2b00      	cmp	r3, #0
 800086c:	d001      	beq.n	8000872 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800086e:	f000 f917 	bl	8000aa0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000872:	bf00      	nop
 8000874:	bd80      	pop	{r7, pc}
 8000876:	bf00      	nop
 8000878:	20004a38 	.word	0x20004a38
 800087c:	40004400 	.word	0x40004400

08000880 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b08a      	sub	sp, #40	; 0x28
 8000884:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000886:	f107 0314 	add.w	r3, r7, #20
 800088a:	2200      	movs	r2, #0
 800088c:	601a      	str	r2, [r3, #0]
 800088e:	605a      	str	r2, [r3, #4]
 8000890:	609a      	str	r2, [r3, #8]
 8000892:	60da      	str	r2, [r3, #12]
 8000894:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000896:	2300      	movs	r3, #0
 8000898:	613b      	str	r3, [r7, #16]
 800089a:	4b37      	ldr	r3, [pc, #220]	; (8000978 <MX_GPIO_Init+0xf8>)
 800089c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089e:	4a36      	ldr	r2, [pc, #216]	; (8000978 <MX_GPIO_Init+0xf8>)
 80008a0:	f043 0304 	orr.w	r3, r3, #4
 80008a4:	6313      	str	r3, [r2, #48]	; 0x30
 80008a6:	4b34      	ldr	r3, [pc, #208]	; (8000978 <MX_GPIO_Init+0xf8>)
 80008a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008aa:	f003 0304 	and.w	r3, r3, #4
 80008ae:	613b      	str	r3, [r7, #16]
 80008b0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008b2:	2300      	movs	r3, #0
 80008b4:	60fb      	str	r3, [r7, #12]
 80008b6:	4b30      	ldr	r3, [pc, #192]	; (8000978 <MX_GPIO_Init+0xf8>)
 80008b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ba:	4a2f      	ldr	r2, [pc, #188]	; (8000978 <MX_GPIO_Init+0xf8>)
 80008bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008c0:	6313      	str	r3, [r2, #48]	; 0x30
 80008c2:	4b2d      	ldr	r3, [pc, #180]	; (8000978 <MX_GPIO_Init+0xf8>)
 80008c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008ca:	60fb      	str	r3, [r7, #12]
 80008cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ce:	2300      	movs	r3, #0
 80008d0:	60bb      	str	r3, [r7, #8]
 80008d2:	4b29      	ldr	r3, [pc, #164]	; (8000978 <MX_GPIO_Init+0xf8>)
 80008d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d6:	4a28      	ldr	r2, [pc, #160]	; (8000978 <MX_GPIO_Init+0xf8>)
 80008d8:	f043 0301 	orr.w	r3, r3, #1
 80008dc:	6313      	str	r3, [r2, #48]	; 0x30
 80008de:	4b26      	ldr	r3, [pc, #152]	; (8000978 <MX_GPIO_Init+0xf8>)
 80008e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e2:	f003 0301 	and.w	r3, r3, #1
 80008e6:	60bb      	str	r3, [r7, #8]
 80008e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008ea:	2300      	movs	r3, #0
 80008ec:	607b      	str	r3, [r7, #4]
 80008ee:	4b22      	ldr	r3, [pc, #136]	; (8000978 <MX_GPIO_Init+0xf8>)
 80008f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f2:	4a21      	ldr	r2, [pc, #132]	; (8000978 <MX_GPIO_Init+0xf8>)
 80008f4:	f043 0302 	orr.w	r3, r3, #2
 80008f8:	6313      	str	r3, [r2, #48]	; 0x30
 80008fa:	4b1f      	ldr	r3, [pc, #124]	; (8000978 <MX_GPIO_Init+0xf8>)
 80008fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fe:	f003 0302 	and.w	r3, r3, #2
 8000902:	607b      	str	r3, [r7, #4]
 8000904:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Led2_Pin|Brk_Pin|Dir_Pin, GPIO_PIN_RESET);
 8000906:	2200      	movs	r2, #0
 8000908:	f44f 7160 	mov.w	r1, #896	; 0x380
 800090c:	481b      	ldr	r0, [pc, #108]	; (800097c <MX_GPIO_Init+0xfc>)
 800090e:	f001 f8b9 	bl	8001a84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Led1_GPIO_Port, Led1_Pin, GPIO_PIN_RESET);
 8000912:	2200      	movs	r2, #0
 8000914:	2140      	movs	r1, #64	; 0x40
 8000916:	481a      	ldr	r0, [pc, #104]	; (8000980 <MX_GPIO_Init+0x100>)
 8000918:	f001 f8b4 	bl	8001a84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800091c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000920:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000922:	4b18      	ldr	r3, [pc, #96]	; (8000984 <MX_GPIO_Init+0x104>)
 8000924:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000926:	2300      	movs	r3, #0
 8000928:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800092a:	f107 0314 	add.w	r3, r7, #20
 800092e:	4619      	mov	r1, r3
 8000930:	4813      	ldr	r0, [pc, #76]	; (8000980 <MX_GPIO_Init+0x100>)
 8000932:	f000 ff23 	bl	800177c <HAL_GPIO_Init>

  /*Configure GPIO pins : Led2_Pin Brk_Pin Dir_Pin */
  GPIO_InitStruct.Pin = Led2_Pin|Brk_Pin|Dir_Pin;
 8000936:	f44f 7360 	mov.w	r3, #896	; 0x380
 800093a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800093c:	2301      	movs	r3, #1
 800093e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000940:	2300      	movs	r3, #0
 8000942:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000944:	2300      	movs	r3, #0
 8000946:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000948:	f107 0314 	add.w	r3, r7, #20
 800094c:	4619      	mov	r1, r3
 800094e:	480b      	ldr	r0, [pc, #44]	; (800097c <MX_GPIO_Init+0xfc>)
 8000950:	f000 ff14 	bl	800177c <HAL_GPIO_Init>

  /*Configure GPIO pin : Led1_Pin */
  GPIO_InitStruct.Pin = Led1_Pin;
 8000954:	2340      	movs	r3, #64	; 0x40
 8000956:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000958:	2301      	movs	r3, #1
 800095a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095c:	2300      	movs	r3, #0
 800095e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000960:	2300      	movs	r3, #0
 8000962:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Led1_GPIO_Port, &GPIO_InitStruct);
 8000964:	f107 0314 	add.w	r3, r7, #20
 8000968:	4619      	mov	r1, r3
 800096a:	4805      	ldr	r0, [pc, #20]	; (8000980 <MX_GPIO_Init+0x100>)
 800096c:	f000 ff06 	bl	800177c <HAL_GPIO_Init>

}
 8000970:	bf00      	nop
 8000972:	3728      	adds	r7, #40	; 0x28
 8000974:	46bd      	mov	sp, r7
 8000976:	bd80      	pop	{r7, pc}
 8000978:	40023800 	.word	0x40023800
 800097c:	40020000 	.word	0x40020000
 8000980:	40020800 	.word	0x40020800
 8000984:	10210000 	.word	0x10210000

08000988 <MotorControlMeth>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_MotorControlMeth */
void MotorControlMeth(void *argument)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b084      	sub	sp, #16
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
		err = 1000 - speed; //1000 : vitesse qu'on veut => via IHM
		up = Kp*err;
		ui = ui + Kp*Ki;
	}
	*/
	int i = 1;
 8000990:	2301      	movs	r3, #1
 8000992:	60fb      	str	r3, [r7, #12]
		/* Infinite loop */
		for(;;)
		{
			if (i==20){
 8000994:	68fb      	ldr	r3, [r7, #12]
 8000996:	2b14      	cmp	r3, #20
 8000998:	d101      	bne.n	800099e <MotorControlMeth+0x16>
				i=0;
 800099a:	2300      	movs	r3, #0
 800099c:	60fb      	str	r3, [r7, #12]
			}
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, i*10);
 800099e:	68fa      	ldr	r2, [r7, #12]
 80009a0:	4613      	mov	r3, r2
 80009a2:	009b      	lsls	r3, r3, #2
 80009a4:	4413      	add	r3, r2
 80009a6:	005b      	lsls	r3, r3, #1
 80009a8:	461a      	mov	r2, r3
 80009aa:	4b05      	ldr	r3, [pc, #20]	; (80009c0 <MotorControlMeth+0x38>)
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	639a      	str	r2, [r3, #56]	; 0x38
			i++;
 80009b0:	68fb      	ldr	r3, [r7, #12]
 80009b2:	3301      	adds	r3, #1
 80009b4:	60fb      	str	r3, [r7, #12]
			osDelay(100);
 80009b6:	2064      	movs	r0, #100	; 0x64
 80009b8:	f003 fbde 	bl	8004178 <osDelay>
			if (i==20){
 80009bc:	e7ea      	b.n	8000994 <MotorControlMeth+0xc>
 80009be:	bf00      	nop
 80009c0:	20004940 	.word	0x20004940

080009c4 <DataToIhmMeth>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_DataToIhmMeth */
void DataToIhmMeth(void *argument)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b086      	sub	sp, #24
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN DataToIhmMeth */
  /* Infinite loop */
	uint32_t i = 400;
 80009cc:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80009d0:	617b      	str	r3, [r7, #20]
	uint32_t z = 0;
 80009d2:	2300      	movs	r3, #0
 80009d4:	613b      	str	r3, [r7, #16]
	uint32_t e = 245;
 80009d6:	23f5      	movs	r3, #245	; 0xf5
 80009d8:	60fb      	str	r3, [r7, #12]
	uint8_t stop[2] = "\n";
 80009da:	230a      	movs	r3, #10
 80009dc:	813b      	strh	r3, [r7, #8]

	for(;;)
	{
		itoa(i, txdata, 10);
 80009de:	220a      	movs	r2, #10
 80009e0:	4924      	ldr	r1, [pc, #144]	; (8000a74 <DataToIhmMeth+0xb0>)
 80009e2:	6978      	ldr	r0, [r7, #20]
 80009e4:	f006 f876 	bl	8006ad4 <itoa>
		HAL_UART_Transmit(&huart2, txdata, sizeof(txdata), 100);
 80009e8:	2364      	movs	r3, #100	; 0x64
 80009ea:	221e      	movs	r2, #30
 80009ec:	4921      	ldr	r1, [pc, #132]	; (8000a74 <DataToIhmMeth+0xb0>)
 80009ee:	4822      	ldr	r0, [pc, #136]	; (8000a78 <DataToIhmMeth+0xb4>)
 80009f0:	f002 fce7 	bl	80033c2 <HAL_UART_Transmit>
		itoa(z, txdata, 10);
 80009f4:	220a      	movs	r2, #10
 80009f6:	491f      	ldr	r1, [pc, #124]	; (8000a74 <DataToIhmMeth+0xb0>)
 80009f8:	6938      	ldr	r0, [r7, #16]
 80009fa:	f006 f86b 	bl	8006ad4 <itoa>
		HAL_UART_Transmit(&huart2, txdata, sizeof(txdata), 100);
 80009fe:	2364      	movs	r3, #100	; 0x64
 8000a00:	221e      	movs	r2, #30
 8000a02:	491c      	ldr	r1, [pc, #112]	; (8000a74 <DataToIhmMeth+0xb0>)
 8000a04:	481c      	ldr	r0, [pc, #112]	; (8000a78 <DataToIhmMeth+0xb4>)
 8000a06:	f002 fcdc 	bl	80033c2 <HAL_UART_Transmit>
		itoa(e, txdata, 10);
 8000a0a:	220a      	movs	r2, #10
 8000a0c:	4919      	ldr	r1, [pc, #100]	; (8000a74 <DataToIhmMeth+0xb0>)
 8000a0e:	68f8      	ldr	r0, [r7, #12]
 8000a10:	f006 f860 	bl	8006ad4 <itoa>
		HAL_UART_Transmit(&huart2, txdata, sizeof(txdata), 100);
 8000a14:	2364      	movs	r3, #100	; 0x64
 8000a16:	221e      	movs	r2, #30
 8000a18:	4916      	ldr	r1, [pc, #88]	; (8000a74 <DataToIhmMeth+0xb0>)
 8000a1a:	4817      	ldr	r0, [pc, #92]	; (8000a78 <DataToIhmMeth+0xb4>)
 8000a1c:	f002 fcd1 	bl	80033c2 <HAL_UART_Transmit>

		HAL_UART_Transmit(&huart2, stop, sizeof(stop), 100);
 8000a20:	f107 0108 	add.w	r1, r7, #8
 8000a24:	2364      	movs	r3, #100	; 0x64
 8000a26:	2202      	movs	r2, #2
 8000a28:	4813      	ldr	r0, [pc, #76]	; (8000a78 <DataToIhmMeth+0xb4>)
 8000a2a:	f002 fcca 	bl	80033c2 <HAL_UART_Transmit>
		if (i > 1000){
 8000a2e:	697b      	ldr	r3, [r7, #20]
 8000a30:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000a34:	d902      	bls.n	8000a3c <DataToIhmMeth+0x78>
			i=0;
 8000a36:	2300      	movs	r3, #0
 8000a38:	617b      	str	r3, [r7, #20]
 8000a3a:	e002      	b.n	8000a42 <DataToIhmMeth+0x7e>
		} else {
			i+=100;
 8000a3c:	697b      	ldr	r3, [r7, #20]
 8000a3e:	3364      	adds	r3, #100	; 0x64
 8000a40:	617b      	str	r3, [r7, #20]
		}

		if (z > 1000){
 8000a42:	693b      	ldr	r3, [r7, #16]
 8000a44:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000a48:	d902      	bls.n	8000a50 <DataToIhmMeth+0x8c>
			z=0;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	613b      	str	r3, [r7, #16]
 8000a4e:	e002      	b.n	8000a56 <DataToIhmMeth+0x92>
		} else {
			z+=100;
 8000a50:	693b      	ldr	r3, [r7, #16]
 8000a52:	3364      	adds	r3, #100	; 0x64
 8000a54:	613b      	str	r3, [r7, #16]
		}

		if (e > 1000){
 8000a56:	68fb      	ldr	r3, [r7, #12]
 8000a58:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000a5c:	d902      	bls.n	8000a64 <DataToIhmMeth+0xa0>
			e=0;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	60fb      	str	r3, [r7, #12]
 8000a62:	e002      	b.n	8000a6a <DataToIhmMeth+0xa6>
		} else {
			e+=100;
 8000a64:	68fb      	ldr	r3, [r7, #12]
 8000a66:	3364      	adds	r3, #100	; 0x64
 8000a68:	60fb      	str	r3, [r7, #12]
		}
		osDelay(1500);
 8000a6a:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8000a6e:	f003 fb83 	bl	8004178 <osDelay>
	{
 8000a72:	e7b4      	b.n	80009de <DataToIhmMeth+0x1a>
 8000a74:	200049d0 	.word	0x200049d0
 8000a78:	20004a38 	.word	0x20004a38

08000a7c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b082      	sub	sp, #8
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM10) {
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	4a04      	ldr	r2, [pc, #16]	; (8000a9c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a8a:	4293      	cmp	r3, r2
 8000a8c:	d101      	bne.n	8000a92 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000a8e:	f000 fa6f 	bl	8000f70 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000a92:	bf00      	nop
 8000a94:	3708      	adds	r7, #8
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	40014400 	.word	0x40014400

08000aa0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000aa4:	b672      	cpsid	i
}
 8000aa6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000aa8:	e7fe      	b.n	8000aa8 <Error_Handler+0x8>
	...

08000aac <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b082      	sub	sp, #8
 8000ab0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	607b      	str	r3, [r7, #4]
 8000ab6:	4b12      	ldr	r3, [pc, #72]	; (8000b00 <HAL_MspInit+0x54>)
 8000ab8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aba:	4a11      	ldr	r2, [pc, #68]	; (8000b00 <HAL_MspInit+0x54>)
 8000abc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ac0:	6453      	str	r3, [r2, #68]	; 0x44
 8000ac2:	4b0f      	ldr	r3, [pc, #60]	; (8000b00 <HAL_MspInit+0x54>)
 8000ac4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ac6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000aca:	607b      	str	r3, [r7, #4]
 8000acc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ace:	2300      	movs	r3, #0
 8000ad0:	603b      	str	r3, [r7, #0]
 8000ad2:	4b0b      	ldr	r3, [pc, #44]	; (8000b00 <HAL_MspInit+0x54>)
 8000ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ad6:	4a0a      	ldr	r2, [pc, #40]	; (8000b00 <HAL_MspInit+0x54>)
 8000ad8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000adc:	6413      	str	r3, [r2, #64]	; 0x40
 8000ade:	4b08      	ldr	r3, [pc, #32]	; (8000b00 <HAL_MspInit+0x54>)
 8000ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ae2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ae6:	603b      	str	r3, [r7, #0]
 8000ae8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000aea:	2200      	movs	r2, #0
 8000aec:	210f      	movs	r1, #15
 8000aee:	f06f 0001 	mvn.w	r0, #1
 8000af2:	f000 fd87 	bl	8001604 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000af6:	bf00      	nop
 8000af8:	3708      	adds	r7, #8
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	40023800 	.word	0x40023800

08000b04 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b08a      	sub	sp, #40	; 0x28
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b0c:	f107 0314 	add.w	r3, r7, #20
 8000b10:	2200      	movs	r2, #0
 8000b12:	601a      	str	r2, [r3, #0]
 8000b14:	605a      	str	r2, [r3, #4]
 8000b16:	609a      	str	r2, [r3, #8]
 8000b18:	60da      	str	r2, [r3, #12]
 8000b1a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	4a17      	ldr	r2, [pc, #92]	; (8000b80 <HAL_ADC_MspInit+0x7c>)
 8000b22:	4293      	cmp	r3, r2
 8000b24:	d127      	bne.n	8000b76 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000b26:	2300      	movs	r3, #0
 8000b28:	613b      	str	r3, [r7, #16]
 8000b2a:	4b16      	ldr	r3, [pc, #88]	; (8000b84 <HAL_ADC_MspInit+0x80>)
 8000b2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b2e:	4a15      	ldr	r2, [pc, #84]	; (8000b84 <HAL_ADC_MspInit+0x80>)
 8000b30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b34:	6453      	str	r3, [r2, #68]	; 0x44
 8000b36:	4b13      	ldr	r3, [pc, #76]	; (8000b84 <HAL_ADC_MspInit+0x80>)
 8000b38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b3e:	613b      	str	r3, [r7, #16]
 8000b40:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b42:	2300      	movs	r3, #0
 8000b44:	60fb      	str	r3, [r7, #12]
 8000b46:	4b0f      	ldr	r3, [pc, #60]	; (8000b84 <HAL_ADC_MspInit+0x80>)
 8000b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4a:	4a0e      	ldr	r2, [pc, #56]	; (8000b84 <HAL_ADC_MspInit+0x80>)
 8000b4c:	f043 0301 	orr.w	r3, r3, #1
 8000b50:	6313      	str	r3, [r2, #48]	; 0x30
 8000b52:	4b0c      	ldr	r3, [pc, #48]	; (8000b84 <HAL_ADC_MspInit+0x80>)
 8000b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b56:	f003 0301 	and.w	r3, r3, #1
 8000b5a:	60fb      	str	r3, [r7, #12]
 8000b5c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000b5e:	2302      	movs	r3, #2
 8000b60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b62:	2303      	movs	r3, #3
 8000b64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b66:	2300      	movs	r3, #0
 8000b68:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b6a:	f107 0314 	add.w	r3, r7, #20
 8000b6e:	4619      	mov	r1, r3
 8000b70:	4805      	ldr	r0, [pc, #20]	; (8000b88 <HAL_ADC_MspInit+0x84>)
 8000b72:	f000 fe03 	bl	800177c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000b76:	bf00      	nop
 8000b78:	3728      	adds	r7, #40	; 0x28
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	40012000 	.word	0x40012000
 8000b84:	40023800 	.word	0x40023800
 8000b88:	40020000 	.word	0x40020000

08000b8c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b08a      	sub	sp, #40	; 0x28
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b94:	f107 0314 	add.w	r3, r7, #20
 8000b98:	2200      	movs	r2, #0
 8000b9a:	601a      	str	r2, [r3, #0]
 8000b9c:	605a      	str	r2, [r3, #4]
 8000b9e:	609a      	str	r2, [r3, #8]
 8000ba0:	60da      	str	r2, [r3, #12]
 8000ba2:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000bac:	d149      	bne.n	8000c42 <HAL_TIM_Encoder_MspInit+0xb6>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000bae:	2300      	movs	r3, #0
 8000bb0:	613b      	str	r3, [r7, #16]
 8000bb2:	4b26      	ldr	r3, [pc, #152]	; (8000c4c <HAL_TIM_Encoder_MspInit+0xc0>)
 8000bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bb6:	4a25      	ldr	r2, [pc, #148]	; (8000c4c <HAL_TIM_Encoder_MspInit+0xc0>)
 8000bb8:	f043 0301 	orr.w	r3, r3, #1
 8000bbc:	6413      	str	r3, [r2, #64]	; 0x40
 8000bbe:	4b23      	ldr	r3, [pc, #140]	; (8000c4c <HAL_TIM_Encoder_MspInit+0xc0>)
 8000bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bc2:	f003 0301 	and.w	r3, r3, #1
 8000bc6:	613b      	str	r3, [r7, #16]
 8000bc8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bca:	2300      	movs	r3, #0
 8000bcc:	60fb      	str	r3, [r7, #12]
 8000bce:	4b1f      	ldr	r3, [pc, #124]	; (8000c4c <HAL_TIM_Encoder_MspInit+0xc0>)
 8000bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd2:	4a1e      	ldr	r2, [pc, #120]	; (8000c4c <HAL_TIM_Encoder_MspInit+0xc0>)
 8000bd4:	f043 0301 	orr.w	r3, r3, #1
 8000bd8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bda:	4b1c      	ldr	r3, [pc, #112]	; (8000c4c <HAL_TIM_Encoder_MspInit+0xc0>)
 8000bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bde:	f003 0301 	and.w	r3, r3, #1
 8000be2:	60fb      	str	r3, [r7, #12]
 8000be4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000be6:	2300      	movs	r3, #0
 8000be8:	60bb      	str	r3, [r7, #8]
 8000bea:	4b18      	ldr	r3, [pc, #96]	; (8000c4c <HAL_TIM_Encoder_MspInit+0xc0>)
 8000bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bee:	4a17      	ldr	r2, [pc, #92]	; (8000c4c <HAL_TIM_Encoder_MspInit+0xc0>)
 8000bf0:	f043 0302 	orr.w	r3, r3, #2
 8000bf4:	6313      	str	r3, [r2, #48]	; 0x30
 8000bf6:	4b15      	ldr	r3, [pc, #84]	; (8000c4c <HAL_TIM_Encoder_MspInit+0xc0>)
 8000bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfa:	f003 0302 	and.w	r3, r3, #2
 8000bfe:	60bb      	str	r3, [r7, #8]
 8000c00:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = ChanA_Pin;
 8000c02:	2301      	movs	r3, #1
 8000c04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c06:	2302      	movs	r3, #2
 8000c08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000c12:	2301      	movs	r3, #1
 8000c14:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ChanA_GPIO_Port, &GPIO_InitStruct);
 8000c16:	f107 0314 	add.w	r3, r7, #20
 8000c1a:	4619      	mov	r1, r3
 8000c1c:	480c      	ldr	r0, [pc, #48]	; (8000c50 <HAL_TIM_Encoder_MspInit+0xc4>)
 8000c1e:	f000 fdad 	bl	800177c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ChanB_Pin;
 8000c22:	2308      	movs	r3, #8
 8000c24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c26:	2302      	movs	r3, #2
 8000c28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000c32:	2301      	movs	r3, #1
 8000c34:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ChanB_GPIO_Port, &GPIO_InitStruct);
 8000c36:	f107 0314 	add.w	r3, r7, #20
 8000c3a:	4619      	mov	r1, r3
 8000c3c:	4805      	ldr	r0, [pc, #20]	; (8000c54 <HAL_TIM_Encoder_MspInit+0xc8>)
 8000c3e:	f000 fd9d 	bl	800177c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000c42:	bf00      	nop
 8000c44:	3728      	adds	r7, #40	; 0x28
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	40023800 	.word	0x40023800
 8000c50:	40020000 	.word	0x40020000
 8000c54:	40020400 	.word	0x40020400

08000c58 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	b085      	sub	sp, #20
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	4a0b      	ldr	r2, [pc, #44]	; (8000c94 <HAL_TIM_PWM_MspInit+0x3c>)
 8000c66:	4293      	cmp	r3, r2
 8000c68:	d10d      	bne.n	8000c86 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	60fb      	str	r3, [r7, #12]
 8000c6e:	4b0a      	ldr	r3, [pc, #40]	; (8000c98 <HAL_TIM_PWM_MspInit+0x40>)
 8000c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c72:	4a09      	ldr	r2, [pc, #36]	; (8000c98 <HAL_TIM_PWM_MspInit+0x40>)
 8000c74:	f043 0302 	orr.w	r3, r3, #2
 8000c78:	6413      	str	r3, [r2, #64]	; 0x40
 8000c7a:	4b07      	ldr	r3, [pc, #28]	; (8000c98 <HAL_TIM_PWM_MspInit+0x40>)
 8000c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c7e:	f003 0302 	and.w	r3, r3, #2
 8000c82:	60fb      	str	r3, [r7, #12]
 8000c84:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000c86:	bf00      	nop
 8000c88:	3714      	adds	r7, #20
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c90:	4770      	bx	lr
 8000c92:	bf00      	nop
 8000c94:	40000400 	.word	0x40000400
 8000c98:	40023800 	.word	0x40023800

08000c9c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b088      	sub	sp, #32
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ca4:	f107 030c 	add.w	r3, r7, #12
 8000ca8:	2200      	movs	r2, #0
 8000caa:	601a      	str	r2, [r3, #0]
 8000cac:	605a      	str	r2, [r3, #4]
 8000cae:	609a      	str	r2, [r3, #8]
 8000cb0:	60da      	str	r2, [r3, #12]
 8000cb2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	4a12      	ldr	r2, [pc, #72]	; (8000d04 <HAL_TIM_MspPostInit+0x68>)
 8000cba:	4293      	cmp	r3, r2
 8000cbc:	d11d      	bne.n	8000cfa <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	60bb      	str	r3, [r7, #8]
 8000cc2:	4b11      	ldr	r3, [pc, #68]	; (8000d08 <HAL_TIM_MspPostInit+0x6c>)
 8000cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc6:	4a10      	ldr	r2, [pc, #64]	; (8000d08 <HAL_TIM_MspPostInit+0x6c>)
 8000cc8:	f043 0304 	orr.w	r3, r3, #4
 8000ccc:	6313      	str	r3, [r2, #48]	; 0x30
 8000cce:	4b0e      	ldr	r3, [pc, #56]	; (8000d08 <HAL_TIM_MspPostInit+0x6c>)
 8000cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd2:	f003 0304 	and.w	r3, r3, #4
 8000cd6:	60bb      	str	r3, [r7, #8]
 8000cd8:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = PWM_Pin;
 8000cda:	2380      	movs	r3, #128	; 0x80
 8000cdc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cde:	2302      	movs	r3, #2
 8000ce0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000cea:	2302      	movs	r3, #2
 8000cec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(PWM_GPIO_Port, &GPIO_InitStruct);
 8000cee:	f107 030c 	add.w	r3, r7, #12
 8000cf2:	4619      	mov	r1, r3
 8000cf4:	4805      	ldr	r0, [pc, #20]	; (8000d0c <HAL_TIM_MspPostInit+0x70>)
 8000cf6:	f000 fd41 	bl	800177c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000cfa:	bf00      	nop
 8000cfc:	3720      	adds	r7, #32
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	bf00      	nop
 8000d04:	40000400 	.word	0x40000400
 8000d08:	40023800 	.word	0x40023800
 8000d0c:	40020800 	.word	0x40020800

08000d10 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b08a      	sub	sp, #40	; 0x28
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d18:	f107 0314 	add.w	r3, r7, #20
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	601a      	str	r2, [r3, #0]
 8000d20:	605a      	str	r2, [r3, #4]
 8000d22:	609a      	str	r2, [r3, #8]
 8000d24:	60da      	str	r2, [r3, #12]
 8000d26:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	4a1d      	ldr	r2, [pc, #116]	; (8000da4 <HAL_UART_MspInit+0x94>)
 8000d2e:	4293      	cmp	r3, r2
 8000d30:	d133      	bne.n	8000d9a <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d32:	2300      	movs	r3, #0
 8000d34:	613b      	str	r3, [r7, #16]
 8000d36:	4b1c      	ldr	r3, [pc, #112]	; (8000da8 <HAL_UART_MspInit+0x98>)
 8000d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d3a:	4a1b      	ldr	r2, [pc, #108]	; (8000da8 <HAL_UART_MspInit+0x98>)
 8000d3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d40:	6413      	str	r3, [r2, #64]	; 0x40
 8000d42:	4b19      	ldr	r3, [pc, #100]	; (8000da8 <HAL_UART_MspInit+0x98>)
 8000d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d4a:	613b      	str	r3, [r7, #16]
 8000d4c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d4e:	2300      	movs	r3, #0
 8000d50:	60fb      	str	r3, [r7, #12]
 8000d52:	4b15      	ldr	r3, [pc, #84]	; (8000da8 <HAL_UART_MspInit+0x98>)
 8000d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d56:	4a14      	ldr	r2, [pc, #80]	; (8000da8 <HAL_UART_MspInit+0x98>)
 8000d58:	f043 0301 	orr.w	r3, r3, #1
 8000d5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d5e:	4b12      	ldr	r3, [pc, #72]	; (8000da8 <HAL_UART_MspInit+0x98>)
 8000d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d62:	f003 0301 	and.w	r3, r3, #1
 8000d66:	60fb      	str	r3, [r7, #12]
 8000d68:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000d6a:	230c      	movs	r3, #12
 8000d6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d6e:	2302      	movs	r3, #2
 8000d70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d72:	2300      	movs	r3, #0
 8000d74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d76:	2303      	movs	r3, #3
 8000d78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d7a:	2307      	movs	r3, #7
 8000d7c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d7e:	f107 0314 	add.w	r3, r7, #20
 8000d82:	4619      	mov	r1, r3
 8000d84:	4809      	ldr	r0, [pc, #36]	; (8000dac <HAL_UART_MspInit+0x9c>)
 8000d86:	f000 fcf9 	bl	800177c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	2105      	movs	r1, #5
 8000d8e:	2026      	movs	r0, #38	; 0x26
 8000d90:	f000 fc38 	bl	8001604 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000d94:	2026      	movs	r0, #38	; 0x26
 8000d96:	f000 fc51 	bl	800163c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000d9a:	bf00      	nop
 8000d9c:	3728      	adds	r7, #40	; 0x28
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	40004400 	.word	0x40004400
 8000da8:	40023800 	.word	0x40023800
 8000dac:	40020000 	.word	0x40020000

08000db0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b08c      	sub	sp, #48	; 0x30
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000db8:	2300      	movs	r3, #0
 8000dba:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM10 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	6879      	ldr	r1, [r7, #4]
 8000dc4:	2019      	movs	r0, #25
 8000dc6:	f000 fc1d 	bl	8001604 <HAL_NVIC_SetPriority>

  /* Enable the TIM10 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000dca:	2019      	movs	r0, #25
 8000dcc:	f000 fc36 	bl	800163c <HAL_NVIC_EnableIRQ>
  /* Enable TIM10 clock */
  __HAL_RCC_TIM10_CLK_ENABLE();
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	60fb      	str	r3, [r7, #12]
 8000dd4:	4b1e      	ldr	r3, [pc, #120]	; (8000e50 <HAL_InitTick+0xa0>)
 8000dd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dd8:	4a1d      	ldr	r2, [pc, #116]	; (8000e50 <HAL_InitTick+0xa0>)
 8000dda:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000dde:	6453      	str	r3, [r2, #68]	; 0x44
 8000de0:	4b1b      	ldr	r3, [pc, #108]	; (8000e50 <HAL_InitTick+0xa0>)
 8000de2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000de4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000de8:	60fb      	str	r3, [r7, #12]
 8000dea:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000dec:	f107 0210 	add.w	r2, r7, #16
 8000df0:	f107 0314 	add.w	r3, r7, #20
 8000df4:	4611      	mov	r1, r2
 8000df6:	4618      	mov	r0, r3
 8000df8:	f001 fad2 	bl	80023a0 <HAL_RCC_GetClockConfig>

  /* Compute TIM10 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000dfc:	f001 fabc 	bl	8002378 <HAL_RCC_GetPCLK2Freq>
 8000e00:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM10 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000e02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e04:	4a13      	ldr	r2, [pc, #76]	; (8000e54 <HAL_InitTick+0xa4>)
 8000e06:	fba2 2303 	umull	r2, r3, r2, r3
 8000e0a:	0c9b      	lsrs	r3, r3, #18
 8000e0c:	3b01      	subs	r3, #1
 8000e0e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM10 */
  htim10.Instance = TIM10;
 8000e10:	4b11      	ldr	r3, [pc, #68]	; (8000e58 <HAL_InitTick+0xa8>)
 8000e12:	4a12      	ldr	r2, [pc, #72]	; (8000e5c <HAL_InitTick+0xac>)
 8000e14:	601a      	str	r2, [r3, #0]
  + Period = [(TIM10CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim10.Init.Period = (1000000U / 1000U) - 1U;
 8000e16:	4b10      	ldr	r3, [pc, #64]	; (8000e58 <HAL_InitTick+0xa8>)
 8000e18:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000e1c:	60da      	str	r2, [r3, #12]
  htim10.Init.Prescaler = uwPrescalerValue;
 8000e1e:	4a0e      	ldr	r2, [pc, #56]	; (8000e58 <HAL_InitTick+0xa8>)
 8000e20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e22:	6053      	str	r3, [r2, #4]
  htim10.Init.ClockDivision = 0;
 8000e24:	4b0c      	ldr	r3, [pc, #48]	; (8000e58 <HAL_InitTick+0xa8>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	611a      	str	r2, [r3, #16]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e2a:	4b0b      	ldr	r3, [pc, #44]	; (8000e58 <HAL_InitTick+0xa8>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim10) == HAL_OK)
 8000e30:	4809      	ldr	r0, [pc, #36]	; (8000e58 <HAL_InitTick+0xa8>)
 8000e32:	f001 fae7 	bl	8002404 <HAL_TIM_Base_Init>
 8000e36:	4603      	mov	r3, r0
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d104      	bne.n	8000e46 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim10);
 8000e3c:	4806      	ldr	r0, [pc, #24]	; (8000e58 <HAL_InitTick+0xa8>)
 8000e3e:	f001 fb3b 	bl	80024b8 <HAL_TIM_Base_Start_IT>
 8000e42:	4603      	mov	r3, r0
 8000e44:	e000      	b.n	8000e48 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8000e46:	2301      	movs	r3, #1
}
 8000e48:	4618      	mov	r0, r3
 8000e4a:	3730      	adds	r7, #48	; 0x30
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bd80      	pop	{r7, pc}
 8000e50:	40023800 	.word	0x40023800
 8000e54:	431bde83 	.word	0x431bde83
 8000e58:	20004a80 	.word	0x20004a80
 8000e5c:	40014400 	.word	0x40014400

08000e60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e60:	b480      	push	{r7}
 8000e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e64:	e7fe      	b.n	8000e64 <NMI_Handler+0x4>

08000e66 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e66:	b480      	push	{r7}
 8000e68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e6a:	e7fe      	b.n	8000e6a <HardFault_Handler+0x4>

08000e6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e70:	e7fe      	b.n	8000e70 <MemManage_Handler+0x4>

08000e72 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e72:	b480      	push	{r7}
 8000e74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e76:	e7fe      	b.n	8000e76 <BusFault_Handler+0x4>

08000e78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e7c:	e7fe      	b.n	8000e7c <UsageFault_Handler+0x4>

08000e7e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e7e:	b480      	push	{r7}
 8000e80:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e82:	bf00      	nop
 8000e84:	46bd      	mov	sp, r7
 8000e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8a:	4770      	bx	lr

08000e8c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8000e90:	4802      	ldr	r0, [pc, #8]	; (8000e9c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000e92:	f001 fda7 	bl	80029e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000e96:	bf00      	nop
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	20004a80 	.word	0x20004a80

08000ea0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000ea4:	4802      	ldr	r0, [pc, #8]	; (8000eb0 <USART2_IRQHandler+0x10>)
 8000ea6:	f002 fb1f 	bl	80034e8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000eaa:	bf00      	nop
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	20004a38 	.word	0x20004a38

08000eb4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000eb8:	4b06      	ldr	r3, [pc, #24]	; (8000ed4 <SystemInit+0x20>)
 8000eba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ebe:	4a05      	ldr	r2, [pc, #20]	; (8000ed4 <SystemInit+0x20>)
 8000ec0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ec4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ec8:	bf00      	nop
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop
 8000ed4:	e000ed00 	.word	0xe000ed00

08000ed8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000ed8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f10 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000edc:	480d      	ldr	r0, [pc, #52]	; (8000f14 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000ede:	490e      	ldr	r1, [pc, #56]	; (8000f18 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000ee0:	4a0e      	ldr	r2, [pc, #56]	; (8000f1c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000ee2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ee4:	e002      	b.n	8000eec <LoopCopyDataInit>

08000ee6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ee6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ee8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000eea:	3304      	adds	r3, #4

08000eec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000eec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000eee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ef0:	d3f9      	bcc.n	8000ee6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ef2:	4a0b      	ldr	r2, [pc, #44]	; (8000f20 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000ef4:	4c0b      	ldr	r4, [pc, #44]	; (8000f24 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000ef6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ef8:	e001      	b.n	8000efe <LoopFillZerobss>

08000efa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000efa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000efc:	3204      	adds	r2, #4

08000efe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000efe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f00:	d3fb      	bcc.n	8000efa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000f02:	f7ff ffd7 	bl	8000eb4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f06:	f005 fda9 	bl	8006a5c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f0a:	f7ff fae5 	bl	80004d8 <main>
  bx  lr    
 8000f0e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000f10:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000f14:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f18:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000f1c:	08006c6c 	.word	0x08006c6c
  ldr r2, =_sbss
 8000f20:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000f24:	20004b0c 	.word	0x20004b0c

08000f28 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f28:	e7fe      	b.n	8000f28 <ADC_IRQHandler>
	...

08000f2c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f30:	4b0e      	ldr	r3, [pc, #56]	; (8000f6c <HAL_Init+0x40>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	4a0d      	ldr	r2, [pc, #52]	; (8000f6c <HAL_Init+0x40>)
 8000f36:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f3a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f3c:	4b0b      	ldr	r3, [pc, #44]	; (8000f6c <HAL_Init+0x40>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	4a0a      	ldr	r2, [pc, #40]	; (8000f6c <HAL_Init+0x40>)
 8000f42:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f46:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f48:	4b08      	ldr	r3, [pc, #32]	; (8000f6c <HAL_Init+0x40>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	4a07      	ldr	r2, [pc, #28]	; (8000f6c <HAL_Init+0x40>)
 8000f4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f52:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f54:	2003      	movs	r0, #3
 8000f56:	f000 fb4a 	bl	80015ee <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f5a:	2000      	movs	r0, #0
 8000f5c:	f7ff ff28 	bl	8000db0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f60:	f7ff fda4 	bl	8000aac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f64:	2300      	movs	r3, #0
}
 8000f66:	4618      	mov	r0, r3
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	40023c00 	.word	0x40023c00

08000f70 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f70:	b480      	push	{r7}
 8000f72:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f74:	4b06      	ldr	r3, [pc, #24]	; (8000f90 <HAL_IncTick+0x20>)
 8000f76:	781b      	ldrb	r3, [r3, #0]
 8000f78:	461a      	mov	r2, r3
 8000f7a:	4b06      	ldr	r3, [pc, #24]	; (8000f94 <HAL_IncTick+0x24>)
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	4413      	add	r3, r2
 8000f80:	4a04      	ldr	r2, [pc, #16]	; (8000f94 <HAL_IncTick+0x24>)
 8000f82:	6013      	str	r3, [r2, #0]
}
 8000f84:	bf00      	nop
 8000f86:	46bd      	mov	sp, r7
 8000f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8c:	4770      	bx	lr
 8000f8e:	bf00      	nop
 8000f90:	20000008 	.word	0x20000008
 8000f94:	20004ac8 	.word	0x20004ac8

08000f98 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	af00      	add	r7, sp, #0
  return uwTick;
 8000f9c:	4b03      	ldr	r3, [pc, #12]	; (8000fac <HAL_GetTick+0x14>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
}
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa8:	4770      	bx	lr
 8000faa:	bf00      	nop
 8000fac:	20004ac8 	.word	0x20004ac8

08000fb0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b084      	sub	sp, #16
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d101      	bne.n	8000fc6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	e033      	b.n	800102e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d109      	bne.n	8000fe2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000fce:	6878      	ldr	r0, [r7, #4]
 8000fd0:	f7ff fd98 	bl	8000b04 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	2200      	movs	r2, #0
 8000fde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fe6:	f003 0310 	and.w	r3, r3, #16
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d118      	bne.n	8001020 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ff2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000ff6:	f023 0302 	bic.w	r3, r3, #2
 8000ffa:	f043 0202 	orr.w	r2, r3, #2
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001002:	6878      	ldr	r0, [r7, #4]
 8001004:	f000 f94a 	bl	800129c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	2200      	movs	r2, #0
 800100c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001012:	f023 0303 	bic.w	r3, r3, #3
 8001016:	f043 0201 	orr.w	r2, r3, #1
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	641a      	str	r2, [r3, #64]	; 0x40
 800101e:	e001      	b.n	8001024 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001020:	2301      	movs	r3, #1
 8001022:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	2200      	movs	r2, #0
 8001028:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800102c:	7bfb      	ldrb	r3, [r7, #15]
}
 800102e:	4618      	mov	r0, r3
 8001030:	3710      	adds	r7, #16
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}
	...

08001038 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001038:	b480      	push	{r7}
 800103a:	b085      	sub	sp, #20
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
 8001040:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001042:	2300      	movs	r3, #0
 8001044:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800104c:	2b01      	cmp	r3, #1
 800104e:	d101      	bne.n	8001054 <HAL_ADC_ConfigChannel+0x1c>
 8001050:	2302      	movs	r3, #2
 8001052:	e113      	b.n	800127c <HAL_ADC_ConfigChannel+0x244>
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	2201      	movs	r2, #1
 8001058:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	2b09      	cmp	r3, #9
 8001062:	d925      	bls.n	80010b0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	68d9      	ldr	r1, [r3, #12]
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	b29b      	uxth	r3, r3
 8001070:	461a      	mov	r2, r3
 8001072:	4613      	mov	r3, r2
 8001074:	005b      	lsls	r3, r3, #1
 8001076:	4413      	add	r3, r2
 8001078:	3b1e      	subs	r3, #30
 800107a:	2207      	movs	r2, #7
 800107c:	fa02 f303 	lsl.w	r3, r2, r3
 8001080:	43da      	mvns	r2, r3
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	400a      	ands	r2, r1
 8001088:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	68d9      	ldr	r1, [r3, #12]
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	689a      	ldr	r2, [r3, #8]
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	b29b      	uxth	r3, r3
 800109a:	4618      	mov	r0, r3
 800109c:	4603      	mov	r3, r0
 800109e:	005b      	lsls	r3, r3, #1
 80010a0:	4403      	add	r3, r0
 80010a2:	3b1e      	subs	r3, #30
 80010a4:	409a      	lsls	r2, r3
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	430a      	orrs	r2, r1
 80010ac:	60da      	str	r2, [r3, #12]
 80010ae:	e022      	b.n	80010f6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	6919      	ldr	r1, [r3, #16]
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	b29b      	uxth	r3, r3
 80010bc:	461a      	mov	r2, r3
 80010be:	4613      	mov	r3, r2
 80010c0:	005b      	lsls	r3, r3, #1
 80010c2:	4413      	add	r3, r2
 80010c4:	2207      	movs	r2, #7
 80010c6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ca:	43da      	mvns	r2, r3
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	400a      	ands	r2, r1
 80010d2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	6919      	ldr	r1, [r3, #16]
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	689a      	ldr	r2, [r3, #8]
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	b29b      	uxth	r3, r3
 80010e4:	4618      	mov	r0, r3
 80010e6:	4603      	mov	r3, r0
 80010e8:	005b      	lsls	r3, r3, #1
 80010ea:	4403      	add	r3, r0
 80010ec:	409a      	lsls	r2, r3
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	430a      	orrs	r2, r1
 80010f4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	685b      	ldr	r3, [r3, #4]
 80010fa:	2b06      	cmp	r3, #6
 80010fc:	d824      	bhi.n	8001148 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	685a      	ldr	r2, [r3, #4]
 8001108:	4613      	mov	r3, r2
 800110a:	009b      	lsls	r3, r3, #2
 800110c:	4413      	add	r3, r2
 800110e:	3b05      	subs	r3, #5
 8001110:	221f      	movs	r2, #31
 8001112:	fa02 f303 	lsl.w	r3, r2, r3
 8001116:	43da      	mvns	r2, r3
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	400a      	ands	r2, r1
 800111e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	b29b      	uxth	r3, r3
 800112c:	4618      	mov	r0, r3
 800112e:	683b      	ldr	r3, [r7, #0]
 8001130:	685a      	ldr	r2, [r3, #4]
 8001132:	4613      	mov	r3, r2
 8001134:	009b      	lsls	r3, r3, #2
 8001136:	4413      	add	r3, r2
 8001138:	3b05      	subs	r3, #5
 800113a:	fa00 f203 	lsl.w	r2, r0, r3
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	430a      	orrs	r2, r1
 8001144:	635a      	str	r2, [r3, #52]	; 0x34
 8001146:	e04c      	b.n	80011e2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	685b      	ldr	r3, [r3, #4]
 800114c:	2b0c      	cmp	r3, #12
 800114e:	d824      	bhi.n	800119a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	685a      	ldr	r2, [r3, #4]
 800115a:	4613      	mov	r3, r2
 800115c:	009b      	lsls	r3, r3, #2
 800115e:	4413      	add	r3, r2
 8001160:	3b23      	subs	r3, #35	; 0x23
 8001162:	221f      	movs	r2, #31
 8001164:	fa02 f303 	lsl.w	r3, r2, r3
 8001168:	43da      	mvns	r2, r3
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	400a      	ands	r2, r1
 8001170:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	b29b      	uxth	r3, r3
 800117e:	4618      	mov	r0, r3
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	685a      	ldr	r2, [r3, #4]
 8001184:	4613      	mov	r3, r2
 8001186:	009b      	lsls	r3, r3, #2
 8001188:	4413      	add	r3, r2
 800118a:	3b23      	subs	r3, #35	; 0x23
 800118c:	fa00 f203 	lsl.w	r2, r0, r3
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	430a      	orrs	r2, r1
 8001196:	631a      	str	r2, [r3, #48]	; 0x30
 8001198:	e023      	b.n	80011e2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	685a      	ldr	r2, [r3, #4]
 80011a4:	4613      	mov	r3, r2
 80011a6:	009b      	lsls	r3, r3, #2
 80011a8:	4413      	add	r3, r2
 80011aa:	3b41      	subs	r3, #65	; 0x41
 80011ac:	221f      	movs	r2, #31
 80011ae:	fa02 f303 	lsl.w	r3, r2, r3
 80011b2:	43da      	mvns	r2, r3
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	400a      	ands	r2, r1
 80011ba:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	b29b      	uxth	r3, r3
 80011c8:	4618      	mov	r0, r3
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	685a      	ldr	r2, [r3, #4]
 80011ce:	4613      	mov	r3, r2
 80011d0:	009b      	lsls	r3, r3, #2
 80011d2:	4413      	add	r3, r2
 80011d4:	3b41      	subs	r3, #65	; 0x41
 80011d6:	fa00 f203 	lsl.w	r2, r0, r3
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	430a      	orrs	r2, r1
 80011e0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80011e2:	4b29      	ldr	r3, [pc, #164]	; (8001288 <HAL_ADC_ConfigChannel+0x250>)
 80011e4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	4a28      	ldr	r2, [pc, #160]	; (800128c <HAL_ADC_ConfigChannel+0x254>)
 80011ec:	4293      	cmp	r3, r2
 80011ee:	d10f      	bne.n	8001210 <HAL_ADC_ConfigChannel+0x1d8>
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	2b12      	cmp	r3, #18
 80011f6:	d10b      	bne.n	8001210 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	685b      	ldr	r3, [r3, #4]
 80011fc:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	685b      	ldr	r3, [r3, #4]
 8001208:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	4a1d      	ldr	r2, [pc, #116]	; (800128c <HAL_ADC_ConfigChannel+0x254>)
 8001216:	4293      	cmp	r3, r2
 8001218:	d12b      	bne.n	8001272 <HAL_ADC_ConfigChannel+0x23a>
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	4a1c      	ldr	r2, [pc, #112]	; (8001290 <HAL_ADC_ConfigChannel+0x258>)
 8001220:	4293      	cmp	r3, r2
 8001222:	d003      	beq.n	800122c <HAL_ADC_ConfigChannel+0x1f4>
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	2b11      	cmp	r3, #17
 800122a:	d122      	bne.n	8001272 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	685b      	ldr	r3, [r3, #4]
 8001230:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	685b      	ldr	r3, [r3, #4]
 800123c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	4a11      	ldr	r2, [pc, #68]	; (8001290 <HAL_ADC_ConfigChannel+0x258>)
 800124a:	4293      	cmp	r3, r2
 800124c:	d111      	bne.n	8001272 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800124e:	4b11      	ldr	r3, [pc, #68]	; (8001294 <HAL_ADC_ConfigChannel+0x25c>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	4a11      	ldr	r2, [pc, #68]	; (8001298 <HAL_ADC_ConfigChannel+0x260>)
 8001254:	fba2 2303 	umull	r2, r3, r2, r3
 8001258:	0c9a      	lsrs	r2, r3, #18
 800125a:	4613      	mov	r3, r2
 800125c:	009b      	lsls	r3, r3, #2
 800125e:	4413      	add	r3, r2
 8001260:	005b      	lsls	r3, r3, #1
 8001262:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001264:	e002      	b.n	800126c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001266:	68bb      	ldr	r3, [r7, #8]
 8001268:	3b01      	subs	r3, #1
 800126a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800126c:	68bb      	ldr	r3, [r7, #8]
 800126e:	2b00      	cmp	r3, #0
 8001270:	d1f9      	bne.n	8001266 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	2200      	movs	r2, #0
 8001276:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800127a:	2300      	movs	r3, #0
}
 800127c:	4618      	mov	r0, r3
 800127e:	3714      	adds	r7, #20
 8001280:	46bd      	mov	sp, r7
 8001282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001286:	4770      	bx	lr
 8001288:	40012300 	.word	0x40012300
 800128c:	40012000 	.word	0x40012000
 8001290:	10000012 	.word	0x10000012
 8001294:	20000000 	.word	0x20000000
 8001298:	431bde83 	.word	0x431bde83

0800129c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800129c:	b480      	push	{r7}
 800129e:	b085      	sub	sp, #20
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80012a4:	4b79      	ldr	r3, [pc, #484]	; (800148c <ADC_Init+0x1f0>)
 80012a6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	685b      	ldr	r3, [r3, #4]
 80012ac:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	685a      	ldr	r2, [r3, #4]
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	431a      	orrs	r2, r3
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	685a      	ldr	r2, [r3, #4]
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80012d0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	6859      	ldr	r1, [r3, #4]
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	691b      	ldr	r3, [r3, #16]
 80012dc:	021a      	lsls	r2, r3, #8
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	430a      	orrs	r2, r1
 80012e4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	685a      	ldr	r2, [r3, #4]
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80012f4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	6859      	ldr	r1, [r3, #4]
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	689a      	ldr	r2, [r3, #8]
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	430a      	orrs	r2, r1
 8001306:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	689a      	ldr	r2, [r3, #8]
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001316:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	6899      	ldr	r1, [r3, #8]
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	68da      	ldr	r2, [r3, #12]
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	430a      	orrs	r2, r1
 8001328:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800132e:	4a58      	ldr	r2, [pc, #352]	; (8001490 <ADC_Init+0x1f4>)
 8001330:	4293      	cmp	r3, r2
 8001332:	d022      	beq.n	800137a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	689a      	ldr	r2, [r3, #8]
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001342:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	6899      	ldr	r1, [r3, #8]
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	430a      	orrs	r2, r1
 8001354:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	689a      	ldr	r2, [r3, #8]
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001364:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	6899      	ldr	r1, [r3, #8]
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	430a      	orrs	r2, r1
 8001376:	609a      	str	r2, [r3, #8]
 8001378:	e00f      	b.n	800139a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	689a      	ldr	r2, [r3, #8]
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001388:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	689a      	ldr	r2, [r3, #8]
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001398:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	689a      	ldr	r2, [r3, #8]
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f022 0202 	bic.w	r2, r2, #2
 80013a8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	6899      	ldr	r1, [r3, #8]
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	7e1b      	ldrb	r3, [r3, #24]
 80013b4:	005a      	lsls	r2, r3, #1
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	430a      	orrs	r2, r1
 80013bc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d01b      	beq.n	8001400 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	685a      	ldr	r2, [r3, #4]
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80013d6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	685a      	ldr	r2, [r3, #4]
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80013e6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	6859      	ldr	r1, [r3, #4]
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013f2:	3b01      	subs	r3, #1
 80013f4:	035a      	lsls	r2, r3, #13
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	430a      	orrs	r2, r1
 80013fc:	605a      	str	r2, [r3, #4]
 80013fe:	e007      	b.n	8001410 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	685a      	ldr	r2, [r3, #4]
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800140e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800141e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	69db      	ldr	r3, [r3, #28]
 800142a:	3b01      	subs	r3, #1
 800142c:	051a      	lsls	r2, r3, #20
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	430a      	orrs	r2, r1
 8001434:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	689a      	ldr	r2, [r3, #8]
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001444:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	6899      	ldr	r1, [r3, #8]
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001452:	025a      	lsls	r2, r3, #9
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	430a      	orrs	r2, r1
 800145a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	689a      	ldr	r2, [r3, #8]
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800146a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	6899      	ldr	r1, [r3, #8]
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	695b      	ldr	r3, [r3, #20]
 8001476:	029a      	lsls	r2, r3, #10
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	430a      	orrs	r2, r1
 800147e:	609a      	str	r2, [r3, #8]
}
 8001480:	bf00      	nop
 8001482:	3714      	adds	r7, #20
 8001484:	46bd      	mov	sp, r7
 8001486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148a:	4770      	bx	lr
 800148c:	40012300 	.word	0x40012300
 8001490:	0f000001 	.word	0x0f000001

08001494 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001494:	b480      	push	{r7}
 8001496:	b085      	sub	sp, #20
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	f003 0307 	and.w	r3, r3, #7
 80014a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014a4:	4b0c      	ldr	r3, [pc, #48]	; (80014d8 <__NVIC_SetPriorityGrouping+0x44>)
 80014a6:	68db      	ldr	r3, [r3, #12]
 80014a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014aa:	68ba      	ldr	r2, [r7, #8]
 80014ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014b0:	4013      	ands	r3, r2
 80014b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014b8:	68bb      	ldr	r3, [r7, #8]
 80014ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80014c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014c6:	4a04      	ldr	r2, [pc, #16]	; (80014d8 <__NVIC_SetPriorityGrouping+0x44>)
 80014c8:	68bb      	ldr	r3, [r7, #8]
 80014ca:	60d3      	str	r3, [r2, #12]
}
 80014cc:	bf00      	nop
 80014ce:	3714      	adds	r7, #20
 80014d0:	46bd      	mov	sp, r7
 80014d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d6:	4770      	bx	lr
 80014d8:	e000ed00 	.word	0xe000ed00

080014dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014dc:	b480      	push	{r7}
 80014de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014e0:	4b04      	ldr	r3, [pc, #16]	; (80014f4 <__NVIC_GetPriorityGrouping+0x18>)
 80014e2:	68db      	ldr	r3, [r3, #12]
 80014e4:	0a1b      	lsrs	r3, r3, #8
 80014e6:	f003 0307 	and.w	r3, r3, #7
}
 80014ea:	4618      	mov	r0, r3
 80014ec:	46bd      	mov	sp, r7
 80014ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f2:	4770      	bx	lr
 80014f4:	e000ed00 	.word	0xe000ed00

080014f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014f8:	b480      	push	{r7}
 80014fa:	b083      	sub	sp, #12
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	4603      	mov	r3, r0
 8001500:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001502:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001506:	2b00      	cmp	r3, #0
 8001508:	db0b      	blt.n	8001522 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800150a:	79fb      	ldrb	r3, [r7, #7]
 800150c:	f003 021f 	and.w	r2, r3, #31
 8001510:	4907      	ldr	r1, [pc, #28]	; (8001530 <__NVIC_EnableIRQ+0x38>)
 8001512:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001516:	095b      	lsrs	r3, r3, #5
 8001518:	2001      	movs	r0, #1
 800151a:	fa00 f202 	lsl.w	r2, r0, r2
 800151e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001522:	bf00      	nop
 8001524:	370c      	adds	r7, #12
 8001526:	46bd      	mov	sp, r7
 8001528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152c:	4770      	bx	lr
 800152e:	bf00      	nop
 8001530:	e000e100 	.word	0xe000e100

08001534 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001534:	b480      	push	{r7}
 8001536:	b083      	sub	sp, #12
 8001538:	af00      	add	r7, sp, #0
 800153a:	4603      	mov	r3, r0
 800153c:	6039      	str	r1, [r7, #0]
 800153e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001540:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001544:	2b00      	cmp	r3, #0
 8001546:	db0a      	blt.n	800155e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	b2da      	uxtb	r2, r3
 800154c:	490c      	ldr	r1, [pc, #48]	; (8001580 <__NVIC_SetPriority+0x4c>)
 800154e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001552:	0112      	lsls	r2, r2, #4
 8001554:	b2d2      	uxtb	r2, r2
 8001556:	440b      	add	r3, r1
 8001558:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800155c:	e00a      	b.n	8001574 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	b2da      	uxtb	r2, r3
 8001562:	4908      	ldr	r1, [pc, #32]	; (8001584 <__NVIC_SetPriority+0x50>)
 8001564:	79fb      	ldrb	r3, [r7, #7]
 8001566:	f003 030f 	and.w	r3, r3, #15
 800156a:	3b04      	subs	r3, #4
 800156c:	0112      	lsls	r2, r2, #4
 800156e:	b2d2      	uxtb	r2, r2
 8001570:	440b      	add	r3, r1
 8001572:	761a      	strb	r2, [r3, #24]
}
 8001574:	bf00      	nop
 8001576:	370c      	adds	r7, #12
 8001578:	46bd      	mov	sp, r7
 800157a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157e:	4770      	bx	lr
 8001580:	e000e100 	.word	0xe000e100
 8001584:	e000ed00 	.word	0xe000ed00

08001588 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001588:	b480      	push	{r7}
 800158a:	b089      	sub	sp, #36	; 0x24
 800158c:	af00      	add	r7, sp, #0
 800158e:	60f8      	str	r0, [r7, #12]
 8001590:	60b9      	str	r1, [r7, #8]
 8001592:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	f003 0307 	and.w	r3, r3, #7
 800159a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800159c:	69fb      	ldr	r3, [r7, #28]
 800159e:	f1c3 0307 	rsb	r3, r3, #7
 80015a2:	2b04      	cmp	r3, #4
 80015a4:	bf28      	it	cs
 80015a6:	2304      	movcs	r3, #4
 80015a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015aa:	69fb      	ldr	r3, [r7, #28]
 80015ac:	3304      	adds	r3, #4
 80015ae:	2b06      	cmp	r3, #6
 80015b0:	d902      	bls.n	80015b8 <NVIC_EncodePriority+0x30>
 80015b2:	69fb      	ldr	r3, [r7, #28]
 80015b4:	3b03      	subs	r3, #3
 80015b6:	e000      	b.n	80015ba <NVIC_EncodePriority+0x32>
 80015b8:	2300      	movs	r3, #0
 80015ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015bc:	f04f 32ff 	mov.w	r2, #4294967295
 80015c0:	69bb      	ldr	r3, [r7, #24]
 80015c2:	fa02 f303 	lsl.w	r3, r2, r3
 80015c6:	43da      	mvns	r2, r3
 80015c8:	68bb      	ldr	r3, [r7, #8]
 80015ca:	401a      	ands	r2, r3
 80015cc:	697b      	ldr	r3, [r7, #20]
 80015ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015d0:	f04f 31ff 	mov.w	r1, #4294967295
 80015d4:	697b      	ldr	r3, [r7, #20]
 80015d6:	fa01 f303 	lsl.w	r3, r1, r3
 80015da:	43d9      	mvns	r1, r3
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015e0:	4313      	orrs	r3, r2
         );
}
 80015e2:	4618      	mov	r0, r3
 80015e4:	3724      	adds	r7, #36	; 0x24
 80015e6:	46bd      	mov	sp, r7
 80015e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ec:	4770      	bx	lr

080015ee <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015ee:	b580      	push	{r7, lr}
 80015f0:	b082      	sub	sp, #8
 80015f2:	af00      	add	r7, sp, #0
 80015f4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015f6:	6878      	ldr	r0, [r7, #4]
 80015f8:	f7ff ff4c 	bl	8001494 <__NVIC_SetPriorityGrouping>
}
 80015fc:	bf00      	nop
 80015fe:	3708      	adds	r7, #8
 8001600:	46bd      	mov	sp, r7
 8001602:	bd80      	pop	{r7, pc}

08001604 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001604:	b580      	push	{r7, lr}
 8001606:	b086      	sub	sp, #24
 8001608:	af00      	add	r7, sp, #0
 800160a:	4603      	mov	r3, r0
 800160c:	60b9      	str	r1, [r7, #8]
 800160e:	607a      	str	r2, [r7, #4]
 8001610:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001612:	2300      	movs	r3, #0
 8001614:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001616:	f7ff ff61 	bl	80014dc <__NVIC_GetPriorityGrouping>
 800161a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800161c:	687a      	ldr	r2, [r7, #4]
 800161e:	68b9      	ldr	r1, [r7, #8]
 8001620:	6978      	ldr	r0, [r7, #20]
 8001622:	f7ff ffb1 	bl	8001588 <NVIC_EncodePriority>
 8001626:	4602      	mov	r2, r0
 8001628:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800162c:	4611      	mov	r1, r2
 800162e:	4618      	mov	r0, r3
 8001630:	f7ff ff80 	bl	8001534 <__NVIC_SetPriority>
}
 8001634:	bf00      	nop
 8001636:	3718      	adds	r7, #24
 8001638:	46bd      	mov	sp, r7
 800163a:	bd80      	pop	{r7, pc}

0800163c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b082      	sub	sp, #8
 8001640:	af00      	add	r7, sp, #0
 8001642:	4603      	mov	r3, r0
 8001644:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001646:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800164a:	4618      	mov	r0, r3
 800164c:	f7ff ff54 	bl	80014f8 <__NVIC_EnableIRQ>
}
 8001650:	bf00      	nop
 8001652:	3708      	adds	r7, #8
 8001654:	46bd      	mov	sp, r7
 8001656:	bd80      	pop	{r7, pc}

08001658 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b084      	sub	sp, #16
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001664:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001666:	f7ff fc97 	bl	8000f98 <HAL_GetTick>
 800166a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001672:	b2db      	uxtb	r3, r3
 8001674:	2b02      	cmp	r3, #2
 8001676:	d008      	beq.n	800168a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	2280      	movs	r2, #128	; 0x80
 800167c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	2200      	movs	r2, #0
 8001682:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001686:	2301      	movs	r3, #1
 8001688:	e052      	b.n	8001730 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	681a      	ldr	r2, [r3, #0]
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f022 0216 	bic.w	r2, r2, #22
 8001698:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	695a      	ldr	r2, [r3, #20]
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80016a8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d103      	bne.n	80016ba <HAL_DMA_Abort+0x62>
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d007      	beq.n	80016ca <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	681a      	ldr	r2, [r3, #0]
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f022 0208 	bic.w	r2, r2, #8
 80016c8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	681a      	ldr	r2, [r3, #0]
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f022 0201 	bic.w	r2, r2, #1
 80016d8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80016da:	e013      	b.n	8001704 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80016dc:	f7ff fc5c 	bl	8000f98 <HAL_GetTick>
 80016e0:	4602      	mov	r2, r0
 80016e2:	68bb      	ldr	r3, [r7, #8]
 80016e4:	1ad3      	subs	r3, r2, r3
 80016e6:	2b05      	cmp	r3, #5
 80016e8:	d90c      	bls.n	8001704 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	2220      	movs	r2, #32
 80016ee:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	2200      	movs	r2, #0
 80016f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	2203      	movs	r2, #3
 80016fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8001700:	2303      	movs	r3, #3
 8001702:	e015      	b.n	8001730 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f003 0301 	and.w	r3, r3, #1
 800170e:	2b00      	cmp	r3, #0
 8001710:	d1e4      	bne.n	80016dc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001716:	223f      	movs	r2, #63	; 0x3f
 8001718:	409a      	lsls	r2, r3
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	2200      	movs	r2, #0
 8001722:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	2201      	movs	r2, #1
 800172a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 800172e:	2300      	movs	r3, #0
}
 8001730:	4618      	mov	r0, r3
 8001732:	3710      	adds	r7, #16
 8001734:	46bd      	mov	sp, r7
 8001736:	bd80      	pop	{r7, pc}

08001738 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001738:	b480      	push	{r7}
 800173a:	b083      	sub	sp, #12
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001746:	b2db      	uxtb	r3, r3
 8001748:	2b02      	cmp	r3, #2
 800174a:	d004      	beq.n	8001756 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	2280      	movs	r2, #128	; 0x80
 8001750:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001752:	2301      	movs	r3, #1
 8001754:	e00c      	b.n	8001770 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	2205      	movs	r2, #5
 800175a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	681a      	ldr	r2, [r3, #0]
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f022 0201 	bic.w	r2, r2, #1
 800176c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800176e:	2300      	movs	r3, #0
}
 8001770:	4618      	mov	r0, r3
 8001772:	370c      	adds	r7, #12
 8001774:	46bd      	mov	sp, r7
 8001776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177a:	4770      	bx	lr

0800177c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800177c:	b480      	push	{r7}
 800177e:	b089      	sub	sp, #36	; 0x24
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
 8001784:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001786:	2300      	movs	r3, #0
 8001788:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800178a:	2300      	movs	r3, #0
 800178c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800178e:	2300      	movs	r3, #0
 8001790:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001792:	2300      	movs	r3, #0
 8001794:	61fb      	str	r3, [r7, #28]
 8001796:	e159      	b.n	8001a4c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001798:	2201      	movs	r2, #1
 800179a:	69fb      	ldr	r3, [r7, #28]
 800179c:	fa02 f303 	lsl.w	r3, r2, r3
 80017a0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	697a      	ldr	r2, [r7, #20]
 80017a8:	4013      	ands	r3, r2
 80017aa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80017ac:	693a      	ldr	r2, [r7, #16]
 80017ae:	697b      	ldr	r3, [r7, #20]
 80017b0:	429a      	cmp	r2, r3
 80017b2:	f040 8148 	bne.w	8001a46 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	685b      	ldr	r3, [r3, #4]
 80017ba:	f003 0303 	and.w	r3, r3, #3
 80017be:	2b01      	cmp	r3, #1
 80017c0:	d005      	beq.n	80017ce <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	685b      	ldr	r3, [r3, #4]
 80017c6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80017ca:	2b02      	cmp	r3, #2
 80017cc:	d130      	bne.n	8001830 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	689b      	ldr	r3, [r3, #8]
 80017d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80017d4:	69fb      	ldr	r3, [r7, #28]
 80017d6:	005b      	lsls	r3, r3, #1
 80017d8:	2203      	movs	r2, #3
 80017da:	fa02 f303 	lsl.w	r3, r2, r3
 80017de:	43db      	mvns	r3, r3
 80017e0:	69ba      	ldr	r2, [r7, #24]
 80017e2:	4013      	ands	r3, r2
 80017e4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	68da      	ldr	r2, [r3, #12]
 80017ea:	69fb      	ldr	r3, [r7, #28]
 80017ec:	005b      	lsls	r3, r3, #1
 80017ee:	fa02 f303 	lsl.w	r3, r2, r3
 80017f2:	69ba      	ldr	r2, [r7, #24]
 80017f4:	4313      	orrs	r3, r2
 80017f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	69ba      	ldr	r2, [r7, #24]
 80017fc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	685b      	ldr	r3, [r3, #4]
 8001802:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001804:	2201      	movs	r2, #1
 8001806:	69fb      	ldr	r3, [r7, #28]
 8001808:	fa02 f303 	lsl.w	r3, r2, r3
 800180c:	43db      	mvns	r3, r3
 800180e:	69ba      	ldr	r2, [r7, #24]
 8001810:	4013      	ands	r3, r2
 8001812:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	091b      	lsrs	r3, r3, #4
 800181a:	f003 0201 	and.w	r2, r3, #1
 800181e:	69fb      	ldr	r3, [r7, #28]
 8001820:	fa02 f303 	lsl.w	r3, r2, r3
 8001824:	69ba      	ldr	r2, [r7, #24]
 8001826:	4313      	orrs	r3, r2
 8001828:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	69ba      	ldr	r2, [r7, #24]
 800182e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	f003 0303 	and.w	r3, r3, #3
 8001838:	2b03      	cmp	r3, #3
 800183a:	d017      	beq.n	800186c <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	68db      	ldr	r3, [r3, #12]
 8001840:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001842:	69fb      	ldr	r3, [r7, #28]
 8001844:	005b      	lsls	r3, r3, #1
 8001846:	2203      	movs	r2, #3
 8001848:	fa02 f303 	lsl.w	r3, r2, r3
 800184c:	43db      	mvns	r3, r3
 800184e:	69ba      	ldr	r2, [r7, #24]
 8001850:	4013      	ands	r3, r2
 8001852:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	689a      	ldr	r2, [r3, #8]
 8001858:	69fb      	ldr	r3, [r7, #28]
 800185a:	005b      	lsls	r3, r3, #1
 800185c:	fa02 f303 	lsl.w	r3, r2, r3
 8001860:	69ba      	ldr	r2, [r7, #24]
 8001862:	4313      	orrs	r3, r2
 8001864:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	69ba      	ldr	r2, [r7, #24]
 800186a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	f003 0303 	and.w	r3, r3, #3
 8001874:	2b02      	cmp	r3, #2
 8001876:	d123      	bne.n	80018c0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001878:	69fb      	ldr	r3, [r7, #28]
 800187a:	08da      	lsrs	r2, r3, #3
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	3208      	adds	r2, #8
 8001880:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001884:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001886:	69fb      	ldr	r3, [r7, #28]
 8001888:	f003 0307 	and.w	r3, r3, #7
 800188c:	009b      	lsls	r3, r3, #2
 800188e:	220f      	movs	r2, #15
 8001890:	fa02 f303 	lsl.w	r3, r2, r3
 8001894:	43db      	mvns	r3, r3
 8001896:	69ba      	ldr	r2, [r7, #24]
 8001898:	4013      	ands	r3, r2
 800189a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	691a      	ldr	r2, [r3, #16]
 80018a0:	69fb      	ldr	r3, [r7, #28]
 80018a2:	f003 0307 	and.w	r3, r3, #7
 80018a6:	009b      	lsls	r3, r3, #2
 80018a8:	fa02 f303 	lsl.w	r3, r2, r3
 80018ac:	69ba      	ldr	r2, [r7, #24]
 80018ae:	4313      	orrs	r3, r2
 80018b0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80018b2:	69fb      	ldr	r3, [r7, #28]
 80018b4:	08da      	lsrs	r2, r3, #3
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	3208      	adds	r2, #8
 80018ba:	69b9      	ldr	r1, [r7, #24]
 80018bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80018c6:	69fb      	ldr	r3, [r7, #28]
 80018c8:	005b      	lsls	r3, r3, #1
 80018ca:	2203      	movs	r2, #3
 80018cc:	fa02 f303 	lsl.w	r3, r2, r3
 80018d0:	43db      	mvns	r3, r3
 80018d2:	69ba      	ldr	r2, [r7, #24]
 80018d4:	4013      	ands	r3, r2
 80018d6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	f003 0203 	and.w	r2, r3, #3
 80018e0:	69fb      	ldr	r3, [r7, #28]
 80018e2:	005b      	lsls	r3, r3, #1
 80018e4:	fa02 f303 	lsl.w	r3, r2, r3
 80018e8:	69ba      	ldr	r2, [r7, #24]
 80018ea:	4313      	orrs	r3, r2
 80018ec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	69ba      	ldr	r2, [r7, #24]
 80018f2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	f000 80a2 	beq.w	8001a46 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001902:	2300      	movs	r3, #0
 8001904:	60fb      	str	r3, [r7, #12]
 8001906:	4b57      	ldr	r3, [pc, #348]	; (8001a64 <HAL_GPIO_Init+0x2e8>)
 8001908:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800190a:	4a56      	ldr	r2, [pc, #344]	; (8001a64 <HAL_GPIO_Init+0x2e8>)
 800190c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001910:	6453      	str	r3, [r2, #68]	; 0x44
 8001912:	4b54      	ldr	r3, [pc, #336]	; (8001a64 <HAL_GPIO_Init+0x2e8>)
 8001914:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001916:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800191a:	60fb      	str	r3, [r7, #12]
 800191c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800191e:	4a52      	ldr	r2, [pc, #328]	; (8001a68 <HAL_GPIO_Init+0x2ec>)
 8001920:	69fb      	ldr	r3, [r7, #28]
 8001922:	089b      	lsrs	r3, r3, #2
 8001924:	3302      	adds	r3, #2
 8001926:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800192a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800192c:	69fb      	ldr	r3, [r7, #28]
 800192e:	f003 0303 	and.w	r3, r3, #3
 8001932:	009b      	lsls	r3, r3, #2
 8001934:	220f      	movs	r2, #15
 8001936:	fa02 f303 	lsl.w	r3, r2, r3
 800193a:	43db      	mvns	r3, r3
 800193c:	69ba      	ldr	r2, [r7, #24]
 800193e:	4013      	ands	r3, r2
 8001940:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	4a49      	ldr	r2, [pc, #292]	; (8001a6c <HAL_GPIO_Init+0x2f0>)
 8001946:	4293      	cmp	r3, r2
 8001948:	d019      	beq.n	800197e <HAL_GPIO_Init+0x202>
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	4a48      	ldr	r2, [pc, #288]	; (8001a70 <HAL_GPIO_Init+0x2f4>)
 800194e:	4293      	cmp	r3, r2
 8001950:	d013      	beq.n	800197a <HAL_GPIO_Init+0x1fe>
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	4a47      	ldr	r2, [pc, #284]	; (8001a74 <HAL_GPIO_Init+0x2f8>)
 8001956:	4293      	cmp	r3, r2
 8001958:	d00d      	beq.n	8001976 <HAL_GPIO_Init+0x1fa>
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	4a46      	ldr	r2, [pc, #280]	; (8001a78 <HAL_GPIO_Init+0x2fc>)
 800195e:	4293      	cmp	r3, r2
 8001960:	d007      	beq.n	8001972 <HAL_GPIO_Init+0x1f6>
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	4a45      	ldr	r2, [pc, #276]	; (8001a7c <HAL_GPIO_Init+0x300>)
 8001966:	4293      	cmp	r3, r2
 8001968:	d101      	bne.n	800196e <HAL_GPIO_Init+0x1f2>
 800196a:	2304      	movs	r3, #4
 800196c:	e008      	b.n	8001980 <HAL_GPIO_Init+0x204>
 800196e:	2307      	movs	r3, #7
 8001970:	e006      	b.n	8001980 <HAL_GPIO_Init+0x204>
 8001972:	2303      	movs	r3, #3
 8001974:	e004      	b.n	8001980 <HAL_GPIO_Init+0x204>
 8001976:	2302      	movs	r3, #2
 8001978:	e002      	b.n	8001980 <HAL_GPIO_Init+0x204>
 800197a:	2301      	movs	r3, #1
 800197c:	e000      	b.n	8001980 <HAL_GPIO_Init+0x204>
 800197e:	2300      	movs	r3, #0
 8001980:	69fa      	ldr	r2, [r7, #28]
 8001982:	f002 0203 	and.w	r2, r2, #3
 8001986:	0092      	lsls	r2, r2, #2
 8001988:	4093      	lsls	r3, r2
 800198a:	69ba      	ldr	r2, [r7, #24]
 800198c:	4313      	orrs	r3, r2
 800198e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001990:	4935      	ldr	r1, [pc, #212]	; (8001a68 <HAL_GPIO_Init+0x2ec>)
 8001992:	69fb      	ldr	r3, [r7, #28]
 8001994:	089b      	lsrs	r3, r3, #2
 8001996:	3302      	adds	r3, #2
 8001998:	69ba      	ldr	r2, [r7, #24]
 800199a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800199e:	4b38      	ldr	r3, [pc, #224]	; (8001a80 <HAL_GPIO_Init+0x304>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019a4:	693b      	ldr	r3, [r7, #16]
 80019a6:	43db      	mvns	r3, r3
 80019a8:	69ba      	ldr	r2, [r7, #24]
 80019aa:	4013      	ands	r3, r2
 80019ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d003      	beq.n	80019c2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80019ba:	69ba      	ldr	r2, [r7, #24]
 80019bc:	693b      	ldr	r3, [r7, #16]
 80019be:	4313      	orrs	r3, r2
 80019c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80019c2:	4a2f      	ldr	r2, [pc, #188]	; (8001a80 <HAL_GPIO_Init+0x304>)
 80019c4:	69bb      	ldr	r3, [r7, #24]
 80019c6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80019c8:	4b2d      	ldr	r3, [pc, #180]	; (8001a80 <HAL_GPIO_Init+0x304>)
 80019ca:	685b      	ldr	r3, [r3, #4]
 80019cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019ce:	693b      	ldr	r3, [r7, #16]
 80019d0:	43db      	mvns	r3, r3
 80019d2:	69ba      	ldr	r2, [r7, #24]
 80019d4:	4013      	ands	r3, r2
 80019d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	685b      	ldr	r3, [r3, #4]
 80019dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d003      	beq.n	80019ec <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80019e4:	69ba      	ldr	r2, [r7, #24]
 80019e6:	693b      	ldr	r3, [r7, #16]
 80019e8:	4313      	orrs	r3, r2
 80019ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80019ec:	4a24      	ldr	r2, [pc, #144]	; (8001a80 <HAL_GPIO_Init+0x304>)
 80019ee:	69bb      	ldr	r3, [r7, #24]
 80019f0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80019f2:	4b23      	ldr	r3, [pc, #140]	; (8001a80 <HAL_GPIO_Init+0x304>)
 80019f4:	689b      	ldr	r3, [r3, #8]
 80019f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019f8:	693b      	ldr	r3, [r7, #16]
 80019fa:	43db      	mvns	r3, r3
 80019fc:	69ba      	ldr	r2, [r7, #24]
 80019fe:	4013      	ands	r3, r2
 8001a00:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	685b      	ldr	r3, [r3, #4]
 8001a06:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d003      	beq.n	8001a16 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001a0e:	69ba      	ldr	r2, [r7, #24]
 8001a10:	693b      	ldr	r3, [r7, #16]
 8001a12:	4313      	orrs	r3, r2
 8001a14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001a16:	4a1a      	ldr	r2, [pc, #104]	; (8001a80 <HAL_GPIO_Init+0x304>)
 8001a18:	69bb      	ldr	r3, [r7, #24]
 8001a1a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a1c:	4b18      	ldr	r3, [pc, #96]	; (8001a80 <HAL_GPIO_Init+0x304>)
 8001a1e:	68db      	ldr	r3, [r3, #12]
 8001a20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a22:	693b      	ldr	r3, [r7, #16]
 8001a24:	43db      	mvns	r3, r3
 8001a26:	69ba      	ldr	r2, [r7, #24]
 8001a28:	4013      	ands	r3, r2
 8001a2a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d003      	beq.n	8001a40 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001a38:	69ba      	ldr	r2, [r7, #24]
 8001a3a:	693b      	ldr	r3, [r7, #16]
 8001a3c:	4313      	orrs	r3, r2
 8001a3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001a40:	4a0f      	ldr	r2, [pc, #60]	; (8001a80 <HAL_GPIO_Init+0x304>)
 8001a42:	69bb      	ldr	r3, [r7, #24]
 8001a44:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a46:	69fb      	ldr	r3, [r7, #28]
 8001a48:	3301      	adds	r3, #1
 8001a4a:	61fb      	str	r3, [r7, #28]
 8001a4c:	69fb      	ldr	r3, [r7, #28]
 8001a4e:	2b0f      	cmp	r3, #15
 8001a50:	f67f aea2 	bls.w	8001798 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001a54:	bf00      	nop
 8001a56:	bf00      	nop
 8001a58:	3724      	adds	r7, #36	; 0x24
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a60:	4770      	bx	lr
 8001a62:	bf00      	nop
 8001a64:	40023800 	.word	0x40023800
 8001a68:	40013800 	.word	0x40013800
 8001a6c:	40020000 	.word	0x40020000
 8001a70:	40020400 	.word	0x40020400
 8001a74:	40020800 	.word	0x40020800
 8001a78:	40020c00 	.word	0x40020c00
 8001a7c:	40021000 	.word	0x40021000
 8001a80:	40013c00 	.word	0x40013c00

08001a84 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a84:	b480      	push	{r7}
 8001a86:	b083      	sub	sp, #12
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
 8001a8c:	460b      	mov	r3, r1
 8001a8e:	807b      	strh	r3, [r7, #2]
 8001a90:	4613      	mov	r3, r2
 8001a92:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a94:	787b      	ldrb	r3, [r7, #1]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d003      	beq.n	8001aa2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a9a:	887a      	ldrh	r2, [r7, #2]
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001aa0:	e003      	b.n	8001aaa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001aa2:	887b      	ldrh	r3, [r7, #2]
 8001aa4:	041a      	lsls	r2, r3, #16
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	619a      	str	r2, [r3, #24]
}
 8001aaa:	bf00      	nop
 8001aac:	370c      	adds	r7, #12
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab4:	4770      	bx	lr
	...

08001ab8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b086      	sub	sp, #24
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d101      	bne.n	8001aca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	e264      	b.n	8001f94 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f003 0301 	and.w	r3, r3, #1
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d075      	beq.n	8001bc2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001ad6:	4ba3      	ldr	r3, [pc, #652]	; (8001d64 <HAL_RCC_OscConfig+0x2ac>)
 8001ad8:	689b      	ldr	r3, [r3, #8]
 8001ada:	f003 030c 	and.w	r3, r3, #12
 8001ade:	2b04      	cmp	r3, #4
 8001ae0:	d00c      	beq.n	8001afc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ae2:	4ba0      	ldr	r3, [pc, #640]	; (8001d64 <HAL_RCC_OscConfig+0x2ac>)
 8001ae4:	689b      	ldr	r3, [r3, #8]
 8001ae6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001aea:	2b08      	cmp	r3, #8
 8001aec:	d112      	bne.n	8001b14 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001aee:	4b9d      	ldr	r3, [pc, #628]	; (8001d64 <HAL_RCC_OscConfig+0x2ac>)
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001af6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001afa:	d10b      	bne.n	8001b14 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001afc:	4b99      	ldr	r3, [pc, #612]	; (8001d64 <HAL_RCC_OscConfig+0x2ac>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d05b      	beq.n	8001bc0 <HAL_RCC_OscConfig+0x108>
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d157      	bne.n	8001bc0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001b10:	2301      	movs	r3, #1
 8001b12:	e23f      	b.n	8001f94 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b1c:	d106      	bne.n	8001b2c <HAL_RCC_OscConfig+0x74>
 8001b1e:	4b91      	ldr	r3, [pc, #580]	; (8001d64 <HAL_RCC_OscConfig+0x2ac>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	4a90      	ldr	r2, [pc, #576]	; (8001d64 <HAL_RCC_OscConfig+0x2ac>)
 8001b24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b28:	6013      	str	r3, [r2, #0]
 8001b2a:	e01d      	b.n	8001b68 <HAL_RCC_OscConfig+0xb0>
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b34:	d10c      	bne.n	8001b50 <HAL_RCC_OscConfig+0x98>
 8001b36:	4b8b      	ldr	r3, [pc, #556]	; (8001d64 <HAL_RCC_OscConfig+0x2ac>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4a8a      	ldr	r2, [pc, #552]	; (8001d64 <HAL_RCC_OscConfig+0x2ac>)
 8001b3c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b40:	6013      	str	r3, [r2, #0]
 8001b42:	4b88      	ldr	r3, [pc, #544]	; (8001d64 <HAL_RCC_OscConfig+0x2ac>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	4a87      	ldr	r2, [pc, #540]	; (8001d64 <HAL_RCC_OscConfig+0x2ac>)
 8001b48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b4c:	6013      	str	r3, [r2, #0]
 8001b4e:	e00b      	b.n	8001b68 <HAL_RCC_OscConfig+0xb0>
 8001b50:	4b84      	ldr	r3, [pc, #528]	; (8001d64 <HAL_RCC_OscConfig+0x2ac>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4a83      	ldr	r2, [pc, #524]	; (8001d64 <HAL_RCC_OscConfig+0x2ac>)
 8001b56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b5a:	6013      	str	r3, [r2, #0]
 8001b5c:	4b81      	ldr	r3, [pc, #516]	; (8001d64 <HAL_RCC_OscConfig+0x2ac>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4a80      	ldr	r2, [pc, #512]	; (8001d64 <HAL_RCC_OscConfig+0x2ac>)
 8001b62:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b66:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d013      	beq.n	8001b98 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b70:	f7ff fa12 	bl	8000f98 <HAL_GetTick>
 8001b74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b76:	e008      	b.n	8001b8a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b78:	f7ff fa0e 	bl	8000f98 <HAL_GetTick>
 8001b7c:	4602      	mov	r2, r0
 8001b7e:	693b      	ldr	r3, [r7, #16]
 8001b80:	1ad3      	subs	r3, r2, r3
 8001b82:	2b64      	cmp	r3, #100	; 0x64
 8001b84:	d901      	bls.n	8001b8a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001b86:	2303      	movs	r3, #3
 8001b88:	e204      	b.n	8001f94 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b8a:	4b76      	ldr	r3, [pc, #472]	; (8001d64 <HAL_RCC_OscConfig+0x2ac>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d0f0      	beq.n	8001b78 <HAL_RCC_OscConfig+0xc0>
 8001b96:	e014      	b.n	8001bc2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b98:	f7ff f9fe 	bl	8000f98 <HAL_GetTick>
 8001b9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b9e:	e008      	b.n	8001bb2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ba0:	f7ff f9fa 	bl	8000f98 <HAL_GetTick>
 8001ba4:	4602      	mov	r2, r0
 8001ba6:	693b      	ldr	r3, [r7, #16]
 8001ba8:	1ad3      	subs	r3, r2, r3
 8001baa:	2b64      	cmp	r3, #100	; 0x64
 8001bac:	d901      	bls.n	8001bb2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001bae:	2303      	movs	r3, #3
 8001bb0:	e1f0      	b.n	8001f94 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bb2:	4b6c      	ldr	r3, [pc, #432]	; (8001d64 <HAL_RCC_OscConfig+0x2ac>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d1f0      	bne.n	8001ba0 <HAL_RCC_OscConfig+0xe8>
 8001bbe:	e000      	b.n	8001bc2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bc0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f003 0302 	and.w	r3, r3, #2
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d063      	beq.n	8001c96 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001bce:	4b65      	ldr	r3, [pc, #404]	; (8001d64 <HAL_RCC_OscConfig+0x2ac>)
 8001bd0:	689b      	ldr	r3, [r3, #8]
 8001bd2:	f003 030c 	and.w	r3, r3, #12
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d00b      	beq.n	8001bf2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001bda:	4b62      	ldr	r3, [pc, #392]	; (8001d64 <HAL_RCC_OscConfig+0x2ac>)
 8001bdc:	689b      	ldr	r3, [r3, #8]
 8001bde:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001be2:	2b08      	cmp	r3, #8
 8001be4:	d11c      	bne.n	8001c20 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001be6:	4b5f      	ldr	r3, [pc, #380]	; (8001d64 <HAL_RCC_OscConfig+0x2ac>)
 8001be8:	685b      	ldr	r3, [r3, #4]
 8001bea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d116      	bne.n	8001c20 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bf2:	4b5c      	ldr	r3, [pc, #368]	; (8001d64 <HAL_RCC_OscConfig+0x2ac>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f003 0302 	and.w	r3, r3, #2
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d005      	beq.n	8001c0a <HAL_RCC_OscConfig+0x152>
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	68db      	ldr	r3, [r3, #12]
 8001c02:	2b01      	cmp	r3, #1
 8001c04:	d001      	beq.n	8001c0a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001c06:	2301      	movs	r3, #1
 8001c08:	e1c4      	b.n	8001f94 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c0a:	4b56      	ldr	r3, [pc, #344]	; (8001d64 <HAL_RCC_OscConfig+0x2ac>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	691b      	ldr	r3, [r3, #16]
 8001c16:	00db      	lsls	r3, r3, #3
 8001c18:	4952      	ldr	r1, [pc, #328]	; (8001d64 <HAL_RCC_OscConfig+0x2ac>)
 8001c1a:	4313      	orrs	r3, r2
 8001c1c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c1e:	e03a      	b.n	8001c96 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	68db      	ldr	r3, [r3, #12]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d020      	beq.n	8001c6a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c28:	4b4f      	ldr	r3, [pc, #316]	; (8001d68 <HAL_RCC_OscConfig+0x2b0>)
 8001c2a:	2201      	movs	r2, #1
 8001c2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c2e:	f7ff f9b3 	bl	8000f98 <HAL_GetTick>
 8001c32:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c34:	e008      	b.n	8001c48 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c36:	f7ff f9af 	bl	8000f98 <HAL_GetTick>
 8001c3a:	4602      	mov	r2, r0
 8001c3c:	693b      	ldr	r3, [r7, #16]
 8001c3e:	1ad3      	subs	r3, r2, r3
 8001c40:	2b02      	cmp	r3, #2
 8001c42:	d901      	bls.n	8001c48 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001c44:	2303      	movs	r3, #3
 8001c46:	e1a5      	b.n	8001f94 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c48:	4b46      	ldr	r3, [pc, #280]	; (8001d64 <HAL_RCC_OscConfig+0x2ac>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f003 0302 	and.w	r3, r3, #2
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d0f0      	beq.n	8001c36 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c54:	4b43      	ldr	r3, [pc, #268]	; (8001d64 <HAL_RCC_OscConfig+0x2ac>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	691b      	ldr	r3, [r3, #16]
 8001c60:	00db      	lsls	r3, r3, #3
 8001c62:	4940      	ldr	r1, [pc, #256]	; (8001d64 <HAL_RCC_OscConfig+0x2ac>)
 8001c64:	4313      	orrs	r3, r2
 8001c66:	600b      	str	r3, [r1, #0]
 8001c68:	e015      	b.n	8001c96 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c6a:	4b3f      	ldr	r3, [pc, #252]	; (8001d68 <HAL_RCC_OscConfig+0x2b0>)
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c70:	f7ff f992 	bl	8000f98 <HAL_GetTick>
 8001c74:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c76:	e008      	b.n	8001c8a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c78:	f7ff f98e 	bl	8000f98 <HAL_GetTick>
 8001c7c:	4602      	mov	r2, r0
 8001c7e:	693b      	ldr	r3, [r7, #16]
 8001c80:	1ad3      	subs	r3, r2, r3
 8001c82:	2b02      	cmp	r3, #2
 8001c84:	d901      	bls.n	8001c8a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001c86:	2303      	movs	r3, #3
 8001c88:	e184      	b.n	8001f94 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c8a:	4b36      	ldr	r3, [pc, #216]	; (8001d64 <HAL_RCC_OscConfig+0x2ac>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f003 0302 	and.w	r3, r3, #2
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d1f0      	bne.n	8001c78 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f003 0308 	and.w	r3, r3, #8
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d030      	beq.n	8001d04 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	695b      	ldr	r3, [r3, #20]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d016      	beq.n	8001cd8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001caa:	4b30      	ldr	r3, [pc, #192]	; (8001d6c <HAL_RCC_OscConfig+0x2b4>)
 8001cac:	2201      	movs	r2, #1
 8001cae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cb0:	f7ff f972 	bl	8000f98 <HAL_GetTick>
 8001cb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cb6:	e008      	b.n	8001cca <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001cb8:	f7ff f96e 	bl	8000f98 <HAL_GetTick>
 8001cbc:	4602      	mov	r2, r0
 8001cbe:	693b      	ldr	r3, [r7, #16]
 8001cc0:	1ad3      	subs	r3, r2, r3
 8001cc2:	2b02      	cmp	r3, #2
 8001cc4:	d901      	bls.n	8001cca <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001cc6:	2303      	movs	r3, #3
 8001cc8:	e164      	b.n	8001f94 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cca:	4b26      	ldr	r3, [pc, #152]	; (8001d64 <HAL_RCC_OscConfig+0x2ac>)
 8001ccc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001cce:	f003 0302 	and.w	r3, r3, #2
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d0f0      	beq.n	8001cb8 <HAL_RCC_OscConfig+0x200>
 8001cd6:	e015      	b.n	8001d04 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001cd8:	4b24      	ldr	r3, [pc, #144]	; (8001d6c <HAL_RCC_OscConfig+0x2b4>)
 8001cda:	2200      	movs	r2, #0
 8001cdc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cde:	f7ff f95b 	bl	8000f98 <HAL_GetTick>
 8001ce2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ce4:	e008      	b.n	8001cf8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ce6:	f7ff f957 	bl	8000f98 <HAL_GetTick>
 8001cea:	4602      	mov	r2, r0
 8001cec:	693b      	ldr	r3, [r7, #16]
 8001cee:	1ad3      	subs	r3, r2, r3
 8001cf0:	2b02      	cmp	r3, #2
 8001cf2:	d901      	bls.n	8001cf8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001cf4:	2303      	movs	r3, #3
 8001cf6:	e14d      	b.n	8001f94 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cf8:	4b1a      	ldr	r3, [pc, #104]	; (8001d64 <HAL_RCC_OscConfig+0x2ac>)
 8001cfa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001cfc:	f003 0302 	and.w	r3, r3, #2
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d1f0      	bne.n	8001ce6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f003 0304 	and.w	r3, r3, #4
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	f000 80a0 	beq.w	8001e52 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d12:	2300      	movs	r3, #0
 8001d14:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d16:	4b13      	ldr	r3, [pc, #76]	; (8001d64 <HAL_RCC_OscConfig+0x2ac>)
 8001d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d10f      	bne.n	8001d42 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d22:	2300      	movs	r3, #0
 8001d24:	60bb      	str	r3, [r7, #8]
 8001d26:	4b0f      	ldr	r3, [pc, #60]	; (8001d64 <HAL_RCC_OscConfig+0x2ac>)
 8001d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d2a:	4a0e      	ldr	r2, [pc, #56]	; (8001d64 <HAL_RCC_OscConfig+0x2ac>)
 8001d2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d30:	6413      	str	r3, [r2, #64]	; 0x40
 8001d32:	4b0c      	ldr	r3, [pc, #48]	; (8001d64 <HAL_RCC_OscConfig+0x2ac>)
 8001d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d3a:	60bb      	str	r3, [r7, #8]
 8001d3c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d3e:	2301      	movs	r3, #1
 8001d40:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d42:	4b0b      	ldr	r3, [pc, #44]	; (8001d70 <HAL_RCC_OscConfig+0x2b8>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d121      	bne.n	8001d92 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d4e:	4b08      	ldr	r3, [pc, #32]	; (8001d70 <HAL_RCC_OscConfig+0x2b8>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	4a07      	ldr	r2, [pc, #28]	; (8001d70 <HAL_RCC_OscConfig+0x2b8>)
 8001d54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d58:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d5a:	f7ff f91d 	bl	8000f98 <HAL_GetTick>
 8001d5e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d60:	e011      	b.n	8001d86 <HAL_RCC_OscConfig+0x2ce>
 8001d62:	bf00      	nop
 8001d64:	40023800 	.word	0x40023800
 8001d68:	42470000 	.word	0x42470000
 8001d6c:	42470e80 	.word	0x42470e80
 8001d70:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d74:	f7ff f910 	bl	8000f98 <HAL_GetTick>
 8001d78:	4602      	mov	r2, r0
 8001d7a:	693b      	ldr	r3, [r7, #16]
 8001d7c:	1ad3      	subs	r3, r2, r3
 8001d7e:	2b02      	cmp	r3, #2
 8001d80:	d901      	bls.n	8001d86 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001d82:	2303      	movs	r3, #3
 8001d84:	e106      	b.n	8001f94 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d86:	4b85      	ldr	r3, [pc, #532]	; (8001f9c <HAL_RCC_OscConfig+0x4e4>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d0f0      	beq.n	8001d74 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	689b      	ldr	r3, [r3, #8]
 8001d96:	2b01      	cmp	r3, #1
 8001d98:	d106      	bne.n	8001da8 <HAL_RCC_OscConfig+0x2f0>
 8001d9a:	4b81      	ldr	r3, [pc, #516]	; (8001fa0 <HAL_RCC_OscConfig+0x4e8>)
 8001d9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d9e:	4a80      	ldr	r2, [pc, #512]	; (8001fa0 <HAL_RCC_OscConfig+0x4e8>)
 8001da0:	f043 0301 	orr.w	r3, r3, #1
 8001da4:	6713      	str	r3, [r2, #112]	; 0x70
 8001da6:	e01c      	b.n	8001de2 <HAL_RCC_OscConfig+0x32a>
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	689b      	ldr	r3, [r3, #8]
 8001dac:	2b05      	cmp	r3, #5
 8001dae:	d10c      	bne.n	8001dca <HAL_RCC_OscConfig+0x312>
 8001db0:	4b7b      	ldr	r3, [pc, #492]	; (8001fa0 <HAL_RCC_OscConfig+0x4e8>)
 8001db2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001db4:	4a7a      	ldr	r2, [pc, #488]	; (8001fa0 <HAL_RCC_OscConfig+0x4e8>)
 8001db6:	f043 0304 	orr.w	r3, r3, #4
 8001dba:	6713      	str	r3, [r2, #112]	; 0x70
 8001dbc:	4b78      	ldr	r3, [pc, #480]	; (8001fa0 <HAL_RCC_OscConfig+0x4e8>)
 8001dbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dc0:	4a77      	ldr	r2, [pc, #476]	; (8001fa0 <HAL_RCC_OscConfig+0x4e8>)
 8001dc2:	f043 0301 	orr.w	r3, r3, #1
 8001dc6:	6713      	str	r3, [r2, #112]	; 0x70
 8001dc8:	e00b      	b.n	8001de2 <HAL_RCC_OscConfig+0x32a>
 8001dca:	4b75      	ldr	r3, [pc, #468]	; (8001fa0 <HAL_RCC_OscConfig+0x4e8>)
 8001dcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dce:	4a74      	ldr	r2, [pc, #464]	; (8001fa0 <HAL_RCC_OscConfig+0x4e8>)
 8001dd0:	f023 0301 	bic.w	r3, r3, #1
 8001dd4:	6713      	str	r3, [r2, #112]	; 0x70
 8001dd6:	4b72      	ldr	r3, [pc, #456]	; (8001fa0 <HAL_RCC_OscConfig+0x4e8>)
 8001dd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dda:	4a71      	ldr	r2, [pc, #452]	; (8001fa0 <HAL_RCC_OscConfig+0x4e8>)
 8001ddc:	f023 0304 	bic.w	r3, r3, #4
 8001de0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	689b      	ldr	r3, [r3, #8]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d015      	beq.n	8001e16 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dea:	f7ff f8d5 	bl	8000f98 <HAL_GetTick>
 8001dee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001df0:	e00a      	b.n	8001e08 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001df2:	f7ff f8d1 	bl	8000f98 <HAL_GetTick>
 8001df6:	4602      	mov	r2, r0
 8001df8:	693b      	ldr	r3, [r7, #16]
 8001dfa:	1ad3      	subs	r3, r2, r3
 8001dfc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e00:	4293      	cmp	r3, r2
 8001e02:	d901      	bls.n	8001e08 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001e04:	2303      	movs	r3, #3
 8001e06:	e0c5      	b.n	8001f94 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e08:	4b65      	ldr	r3, [pc, #404]	; (8001fa0 <HAL_RCC_OscConfig+0x4e8>)
 8001e0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e0c:	f003 0302 	and.w	r3, r3, #2
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d0ee      	beq.n	8001df2 <HAL_RCC_OscConfig+0x33a>
 8001e14:	e014      	b.n	8001e40 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e16:	f7ff f8bf 	bl	8000f98 <HAL_GetTick>
 8001e1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e1c:	e00a      	b.n	8001e34 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e1e:	f7ff f8bb 	bl	8000f98 <HAL_GetTick>
 8001e22:	4602      	mov	r2, r0
 8001e24:	693b      	ldr	r3, [r7, #16]
 8001e26:	1ad3      	subs	r3, r2, r3
 8001e28:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e2c:	4293      	cmp	r3, r2
 8001e2e:	d901      	bls.n	8001e34 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001e30:	2303      	movs	r3, #3
 8001e32:	e0af      	b.n	8001f94 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e34:	4b5a      	ldr	r3, [pc, #360]	; (8001fa0 <HAL_RCC_OscConfig+0x4e8>)
 8001e36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e38:	f003 0302 	and.w	r3, r3, #2
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d1ee      	bne.n	8001e1e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001e40:	7dfb      	ldrb	r3, [r7, #23]
 8001e42:	2b01      	cmp	r3, #1
 8001e44:	d105      	bne.n	8001e52 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e46:	4b56      	ldr	r3, [pc, #344]	; (8001fa0 <HAL_RCC_OscConfig+0x4e8>)
 8001e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e4a:	4a55      	ldr	r2, [pc, #340]	; (8001fa0 <HAL_RCC_OscConfig+0x4e8>)
 8001e4c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e50:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	699b      	ldr	r3, [r3, #24]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	f000 809b 	beq.w	8001f92 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001e5c:	4b50      	ldr	r3, [pc, #320]	; (8001fa0 <HAL_RCC_OscConfig+0x4e8>)
 8001e5e:	689b      	ldr	r3, [r3, #8]
 8001e60:	f003 030c 	and.w	r3, r3, #12
 8001e64:	2b08      	cmp	r3, #8
 8001e66:	d05c      	beq.n	8001f22 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	699b      	ldr	r3, [r3, #24]
 8001e6c:	2b02      	cmp	r3, #2
 8001e6e:	d141      	bne.n	8001ef4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e70:	4b4c      	ldr	r3, [pc, #304]	; (8001fa4 <HAL_RCC_OscConfig+0x4ec>)
 8001e72:	2200      	movs	r2, #0
 8001e74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e76:	f7ff f88f 	bl	8000f98 <HAL_GetTick>
 8001e7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e7c:	e008      	b.n	8001e90 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e7e:	f7ff f88b 	bl	8000f98 <HAL_GetTick>
 8001e82:	4602      	mov	r2, r0
 8001e84:	693b      	ldr	r3, [r7, #16]
 8001e86:	1ad3      	subs	r3, r2, r3
 8001e88:	2b02      	cmp	r3, #2
 8001e8a:	d901      	bls.n	8001e90 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001e8c:	2303      	movs	r3, #3
 8001e8e:	e081      	b.n	8001f94 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e90:	4b43      	ldr	r3, [pc, #268]	; (8001fa0 <HAL_RCC_OscConfig+0x4e8>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d1f0      	bne.n	8001e7e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	69da      	ldr	r2, [r3, #28]
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	6a1b      	ldr	r3, [r3, #32]
 8001ea4:	431a      	orrs	r2, r3
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eaa:	019b      	lsls	r3, r3, #6
 8001eac:	431a      	orrs	r2, r3
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001eb2:	085b      	lsrs	r3, r3, #1
 8001eb4:	3b01      	subs	r3, #1
 8001eb6:	041b      	lsls	r3, r3, #16
 8001eb8:	431a      	orrs	r2, r3
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ebe:	061b      	lsls	r3, r3, #24
 8001ec0:	4937      	ldr	r1, [pc, #220]	; (8001fa0 <HAL_RCC_OscConfig+0x4e8>)
 8001ec2:	4313      	orrs	r3, r2
 8001ec4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ec6:	4b37      	ldr	r3, [pc, #220]	; (8001fa4 <HAL_RCC_OscConfig+0x4ec>)
 8001ec8:	2201      	movs	r2, #1
 8001eca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ecc:	f7ff f864 	bl	8000f98 <HAL_GetTick>
 8001ed0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ed2:	e008      	b.n	8001ee6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ed4:	f7ff f860 	bl	8000f98 <HAL_GetTick>
 8001ed8:	4602      	mov	r2, r0
 8001eda:	693b      	ldr	r3, [r7, #16]
 8001edc:	1ad3      	subs	r3, r2, r3
 8001ede:	2b02      	cmp	r3, #2
 8001ee0:	d901      	bls.n	8001ee6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001ee2:	2303      	movs	r3, #3
 8001ee4:	e056      	b.n	8001f94 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ee6:	4b2e      	ldr	r3, [pc, #184]	; (8001fa0 <HAL_RCC_OscConfig+0x4e8>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d0f0      	beq.n	8001ed4 <HAL_RCC_OscConfig+0x41c>
 8001ef2:	e04e      	b.n	8001f92 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ef4:	4b2b      	ldr	r3, [pc, #172]	; (8001fa4 <HAL_RCC_OscConfig+0x4ec>)
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001efa:	f7ff f84d 	bl	8000f98 <HAL_GetTick>
 8001efe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f00:	e008      	b.n	8001f14 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f02:	f7ff f849 	bl	8000f98 <HAL_GetTick>
 8001f06:	4602      	mov	r2, r0
 8001f08:	693b      	ldr	r3, [r7, #16]
 8001f0a:	1ad3      	subs	r3, r2, r3
 8001f0c:	2b02      	cmp	r3, #2
 8001f0e:	d901      	bls.n	8001f14 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001f10:	2303      	movs	r3, #3
 8001f12:	e03f      	b.n	8001f94 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f14:	4b22      	ldr	r3, [pc, #136]	; (8001fa0 <HAL_RCC_OscConfig+0x4e8>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d1f0      	bne.n	8001f02 <HAL_RCC_OscConfig+0x44a>
 8001f20:	e037      	b.n	8001f92 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	699b      	ldr	r3, [r3, #24]
 8001f26:	2b01      	cmp	r3, #1
 8001f28:	d101      	bne.n	8001f2e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	e032      	b.n	8001f94 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001f2e:	4b1c      	ldr	r3, [pc, #112]	; (8001fa0 <HAL_RCC_OscConfig+0x4e8>)
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	699b      	ldr	r3, [r3, #24]
 8001f38:	2b01      	cmp	r3, #1
 8001f3a:	d028      	beq.n	8001f8e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f46:	429a      	cmp	r2, r3
 8001f48:	d121      	bne.n	8001f8e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f54:	429a      	cmp	r2, r3
 8001f56:	d11a      	bne.n	8001f8e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001f58:	68fa      	ldr	r2, [r7, #12]
 8001f5a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001f5e:	4013      	ands	r3, r2
 8001f60:	687a      	ldr	r2, [r7, #4]
 8001f62:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001f64:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d111      	bne.n	8001f8e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f74:	085b      	lsrs	r3, r3, #1
 8001f76:	3b01      	subs	r3, #1
 8001f78:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001f7a:	429a      	cmp	r2, r3
 8001f7c:	d107      	bne.n	8001f8e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f88:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001f8a:	429a      	cmp	r2, r3
 8001f8c:	d001      	beq.n	8001f92 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8001f8e:	2301      	movs	r3, #1
 8001f90:	e000      	b.n	8001f94 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8001f92:	2300      	movs	r3, #0
}
 8001f94:	4618      	mov	r0, r3
 8001f96:	3718      	adds	r7, #24
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bd80      	pop	{r7, pc}
 8001f9c:	40007000 	.word	0x40007000
 8001fa0:	40023800 	.word	0x40023800
 8001fa4:	42470060 	.word	0x42470060

08001fa8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b084      	sub	sp, #16
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
 8001fb0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d101      	bne.n	8001fbc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001fb8:	2301      	movs	r3, #1
 8001fba:	e0cc      	b.n	8002156 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001fbc:	4b68      	ldr	r3, [pc, #416]	; (8002160 <HAL_RCC_ClockConfig+0x1b8>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f003 0307 	and.w	r3, r3, #7
 8001fc4:	683a      	ldr	r2, [r7, #0]
 8001fc6:	429a      	cmp	r2, r3
 8001fc8:	d90c      	bls.n	8001fe4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fca:	4b65      	ldr	r3, [pc, #404]	; (8002160 <HAL_RCC_ClockConfig+0x1b8>)
 8001fcc:	683a      	ldr	r2, [r7, #0]
 8001fce:	b2d2      	uxtb	r2, r2
 8001fd0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fd2:	4b63      	ldr	r3, [pc, #396]	; (8002160 <HAL_RCC_ClockConfig+0x1b8>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f003 0307 	and.w	r3, r3, #7
 8001fda:	683a      	ldr	r2, [r7, #0]
 8001fdc:	429a      	cmp	r2, r3
 8001fde:	d001      	beq.n	8001fe4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001fe0:	2301      	movs	r3, #1
 8001fe2:	e0b8      	b.n	8002156 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f003 0302 	and.w	r3, r3, #2
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d020      	beq.n	8002032 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f003 0304 	and.w	r3, r3, #4
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d005      	beq.n	8002008 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ffc:	4b59      	ldr	r3, [pc, #356]	; (8002164 <HAL_RCC_ClockConfig+0x1bc>)
 8001ffe:	689b      	ldr	r3, [r3, #8]
 8002000:	4a58      	ldr	r2, [pc, #352]	; (8002164 <HAL_RCC_ClockConfig+0x1bc>)
 8002002:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002006:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f003 0308 	and.w	r3, r3, #8
 8002010:	2b00      	cmp	r3, #0
 8002012:	d005      	beq.n	8002020 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002014:	4b53      	ldr	r3, [pc, #332]	; (8002164 <HAL_RCC_ClockConfig+0x1bc>)
 8002016:	689b      	ldr	r3, [r3, #8]
 8002018:	4a52      	ldr	r2, [pc, #328]	; (8002164 <HAL_RCC_ClockConfig+0x1bc>)
 800201a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800201e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002020:	4b50      	ldr	r3, [pc, #320]	; (8002164 <HAL_RCC_ClockConfig+0x1bc>)
 8002022:	689b      	ldr	r3, [r3, #8]
 8002024:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	689b      	ldr	r3, [r3, #8]
 800202c:	494d      	ldr	r1, [pc, #308]	; (8002164 <HAL_RCC_ClockConfig+0x1bc>)
 800202e:	4313      	orrs	r3, r2
 8002030:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f003 0301 	and.w	r3, r3, #1
 800203a:	2b00      	cmp	r3, #0
 800203c:	d044      	beq.n	80020c8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	685b      	ldr	r3, [r3, #4]
 8002042:	2b01      	cmp	r3, #1
 8002044:	d107      	bne.n	8002056 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002046:	4b47      	ldr	r3, [pc, #284]	; (8002164 <HAL_RCC_ClockConfig+0x1bc>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800204e:	2b00      	cmp	r3, #0
 8002050:	d119      	bne.n	8002086 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002052:	2301      	movs	r3, #1
 8002054:	e07f      	b.n	8002156 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	2b02      	cmp	r3, #2
 800205c:	d003      	beq.n	8002066 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002062:	2b03      	cmp	r3, #3
 8002064:	d107      	bne.n	8002076 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002066:	4b3f      	ldr	r3, [pc, #252]	; (8002164 <HAL_RCC_ClockConfig+0x1bc>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800206e:	2b00      	cmp	r3, #0
 8002070:	d109      	bne.n	8002086 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002072:	2301      	movs	r3, #1
 8002074:	e06f      	b.n	8002156 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002076:	4b3b      	ldr	r3, [pc, #236]	; (8002164 <HAL_RCC_ClockConfig+0x1bc>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f003 0302 	and.w	r3, r3, #2
 800207e:	2b00      	cmp	r3, #0
 8002080:	d101      	bne.n	8002086 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002082:	2301      	movs	r3, #1
 8002084:	e067      	b.n	8002156 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002086:	4b37      	ldr	r3, [pc, #220]	; (8002164 <HAL_RCC_ClockConfig+0x1bc>)
 8002088:	689b      	ldr	r3, [r3, #8]
 800208a:	f023 0203 	bic.w	r2, r3, #3
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	4934      	ldr	r1, [pc, #208]	; (8002164 <HAL_RCC_ClockConfig+0x1bc>)
 8002094:	4313      	orrs	r3, r2
 8002096:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002098:	f7fe ff7e 	bl	8000f98 <HAL_GetTick>
 800209c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800209e:	e00a      	b.n	80020b6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020a0:	f7fe ff7a 	bl	8000f98 <HAL_GetTick>
 80020a4:	4602      	mov	r2, r0
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	1ad3      	subs	r3, r2, r3
 80020aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d901      	bls.n	80020b6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80020b2:	2303      	movs	r3, #3
 80020b4:	e04f      	b.n	8002156 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020b6:	4b2b      	ldr	r3, [pc, #172]	; (8002164 <HAL_RCC_ClockConfig+0x1bc>)
 80020b8:	689b      	ldr	r3, [r3, #8]
 80020ba:	f003 020c 	and.w	r2, r3, #12
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	009b      	lsls	r3, r3, #2
 80020c4:	429a      	cmp	r2, r3
 80020c6:	d1eb      	bne.n	80020a0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80020c8:	4b25      	ldr	r3, [pc, #148]	; (8002160 <HAL_RCC_ClockConfig+0x1b8>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f003 0307 	and.w	r3, r3, #7
 80020d0:	683a      	ldr	r2, [r7, #0]
 80020d2:	429a      	cmp	r2, r3
 80020d4:	d20c      	bcs.n	80020f0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020d6:	4b22      	ldr	r3, [pc, #136]	; (8002160 <HAL_RCC_ClockConfig+0x1b8>)
 80020d8:	683a      	ldr	r2, [r7, #0]
 80020da:	b2d2      	uxtb	r2, r2
 80020dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020de:	4b20      	ldr	r3, [pc, #128]	; (8002160 <HAL_RCC_ClockConfig+0x1b8>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f003 0307 	and.w	r3, r3, #7
 80020e6:	683a      	ldr	r2, [r7, #0]
 80020e8:	429a      	cmp	r2, r3
 80020ea:	d001      	beq.n	80020f0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80020ec:	2301      	movs	r3, #1
 80020ee:	e032      	b.n	8002156 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f003 0304 	and.w	r3, r3, #4
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d008      	beq.n	800210e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80020fc:	4b19      	ldr	r3, [pc, #100]	; (8002164 <HAL_RCC_ClockConfig+0x1bc>)
 80020fe:	689b      	ldr	r3, [r3, #8]
 8002100:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	68db      	ldr	r3, [r3, #12]
 8002108:	4916      	ldr	r1, [pc, #88]	; (8002164 <HAL_RCC_ClockConfig+0x1bc>)
 800210a:	4313      	orrs	r3, r2
 800210c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f003 0308 	and.w	r3, r3, #8
 8002116:	2b00      	cmp	r3, #0
 8002118:	d009      	beq.n	800212e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800211a:	4b12      	ldr	r3, [pc, #72]	; (8002164 <HAL_RCC_ClockConfig+0x1bc>)
 800211c:	689b      	ldr	r3, [r3, #8]
 800211e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	691b      	ldr	r3, [r3, #16]
 8002126:	00db      	lsls	r3, r3, #3
 8002128:	490e      	ldr	r1, [pc, #56]	; (8002164 <HAL_RCC_ClockConfig+0x1bc>)
 800212a:	4313      	orrs	r3, r2
 800212c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800212e:	f000 f821 	bl	8002174 <HAL_RCC_GetSysClockFreq>
 8002132:	4602      	mov	r2, r0
 8002134:	4b0b      	ldr	r3, [pc, #44]	; (8002164 <HAL_RCC_ClockConfig+0x1bc>)
 8002136:	689b      	ldr	r3, [r3, #8]
 8002138:	091b      	lsrs	r3, r3, #4
 800213a:	f003 030f 	and.w	r3, r3, #15
 800213e:	490a      	ldr	r1, [pc, #40]	; (8002168 <HAL_RCC_ClockConfig+0x1c0>)
 8002140:	5ccb      	ldrb	r3, [r1, r3]
 8002142:	fa22 f303 	lsr.w	r3, r2, r3
 8002146:	4a09      	ldr	r2, [pc, #36]	; (800216c <HAL_RCC_ClockConfig+0x1c4>)
 8002148:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800214a:	4b09      	ldr	r3, [pc, #36]	; (8002170 <HAL_RCC_ClockConfig+0x1c8>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	4618      	mov	r0, r3
 8002150:	f7fe fe2e 	bl	8000db0 <HAL_InitTick>

  return HAL_OK;
 8002154:	2300      	movs	r3, #0
}
 8002156:	4618      	mov	r0, r3
 8002158:	3710      	adds	r7, #16
 800215a:	46bd      	mov	sp, r7
 800215c:	bd80      	pop	{r7, pc}
 800215e:	bf00      	nop
 8002160:	40023c00 	.word	0x40023c00
 8002164:	40023800 	.word	0x40023800
 8002168:	08006c1c 	.word	0x08006c1c
 800216c:	20000000 	.word	0x20000000
 8002170:	20000004 	.word	0x20000004

08002174 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002174:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002178:	b084      	sub	sp, #16
 800217a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800217c:	2300      	movs	r3, #0
 800217e:	607b      	str	r3, [r7, #4]
 8002180:	2300      	movs	r3, #0
 8002182:	60fb      	str	r3, [r7, #12]
 8002184:	2300      	movs	r3, #0
 8002186:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002188:	2300      	movs	r3, #0
 800218a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800218c:	4b67      	ldr	r3, [pc, #412]	; (800232c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800218e:	689b      	ldr	r3, [r3, #8]
 8002190:	f003 030c 	and.w	r3, r3, #12
 8002194:	2b08      	cmp	r3, #8
 8002196:	d00d      	beq.n	80021b4 <HAL_RCC_GetSysClockFreq+0x40>
 8002198:	2b08      	cmp	r3, #8
 800219a:	f200 80bd 	bhi.w	8002318 <HAL_RCC_GetSysClockFreq+0x1a4>
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d002      	beq.n	80021a8 <HAL_RCC_GetSysClockFreq+0x34>
 80021a2:	2b04      	cmp	r3, #4
 80021a4:	d003      	beq.n	80021ae <HAL_RCC_GetSysClockFreq+0x3a>
 80021a6:	e0b7      	b.n	8002318 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80021a8:	4b61      	ldr	r3, [pc, #388]	; (8002330 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80021aa:	60bb      	str	r3, [r7, #8]
       break;
 80021ac:	e0b7      	b.n	800231e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80021ae:	4b61      	ldr	r3, [pc, #388]	; (8002334 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80021b0:	60bb      	str	r3, [r7, #8]
      break;
 80021b2:	e0b4      	b.n	800231e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80021b4:	4b5d      	ldr	r3, [pc, #372]	; (800232c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80021bc:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80021be:	4b5b      	ldr	r3, [pc, #364]	; (800232c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d04d      	beq.n	8002266 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80021ca:	4b58      	ldr	r3, [pc, #352]	; (800232c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	099b      	lsrs	r3, r3, #6
 80021d0:	461a      	mov	r2, r3
 80021d2:	f04f 0300 	mov.w	r3, #0
 80021d6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80021da:	f04f 0100 	mov.w	r1, #0
 80021de:	ea02 0800 	and.w	r8, r2, r0
 80021e2:	ea03 0901 	and.w	r9, r3, r1
 80021e6:	4640      	mov	r0, r8
 80021e8:	4649      	mov	r1, r9
 80021ea:	f04f 0200 	mov.w	r2, #0
 80021ee:	f04f 0300 	mov.w	r3, #0
 80021f2:	014b      	lsls	r3, r1, #5
 80021f4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80021f8:	0142      	lsls	r2, r0, #5
 80021fa:	4610      	mov	r0, r2
 80021fc:	4619      	mov	r1, r3
 80021fe:	ebb0 0008 	subs.w	r0, r0, r8
 8002202:	eb61 0109 	sbc.w	r1, r1, r9
 8002206:	f04f 0200 	mov.w	r2, #0
 800220a:	f04f 0300 	mov.w	r3, #0
 800220e:	018b      	lsls	r3, r1, #6
 8002210:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002214:	0182      	lsls	r2, r0, #6
 8002216:	1a12      	subs	r2, r2, r0
 8002218:	eb63 0301 	sbc.w	r3, r3, r1
 800221c:	f04f 0000 	mov.w	r0, #0
 8002220:	f04f 0100 	mov.w	r1, #0
 8002224:	00d9      	lsls	r1, r3, #3
 8002226:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800222a:	00d0      	lsls	r0, r2, #3
 800222c:	4602      	mov	r2, r0
 800222e:	460b      	mov	r3, r1
 8002230:	eb12 0208 	adds.w	r2, r2, r8
 8002234:	eb43 0309 	adc.w	r3, r3, r9
 8002238:	f04f 0000 	mov.w	r0, #0
 800223c:	f04f 0100 	mov.w	r1, #0
 8002240:	0259      	lsls	r1, r3, #9
 8002242:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002246:	0250      	lsls	r0, r2, #9
 8002248:	4602      	mov	r2, r0
 800224a:	460b      	mov	r3, r1
 800224c:	4610      	mov	r0, r2
 800224e:	4619      	mov	r1, r3
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	461a      	mov	r2, r3
 8002254:	f04f 0300 	mov.w	r3, #0
 8002258:	f7fd ffc2 	bl	80001e0 <__aeabi_uldivmod>
 800225c:	4602      	mov	r2, r0
 800225e:	460b      	mov	r3, r1
 8002260:	4613      	mov	r3, r2
 8002262:	60fb      	str	r3, [r7, #12]
 8002264:	e04a      	b.n	80022fc <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002266:	4b31      	ldr	r3, [pc, #196]	; (800232c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	099b      	lsrs	r3, r3, #6
 800226c:	461a      	mov	r2, r3
 800226e:	f04f 0300 	mov.w	r3, #0
 8002272:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002276:	f04f 0100 	mov.w	r1, #0
 800227a:	ea02 0400 	and.w	r4, r2, r0
 800227e:	ea03 0501 	and.w	r5, r3, r1
 8002282:	4620      	mov	r0, r4
 8002284:	4629      	mov	r1, r5
 8002286:	f04f 0200 	mov.w	r2, #0
 800228a:	f04f 0300 	mov.w	r3, #0
 800228e:	014b      	lsls	r3, r1, #5
 8002290:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002294:	0142      	lsls	r2, r0, #5
 8002296:	4610      	mov	r0, r2
 8002298:	4619      	mov	r1, r3
 800229a:	1b00      	subs	r0, r0, r4
 800229c:	eb61 0105 	sbc.w	r1, r1, r5
 80022a0:	f04f 0200 	mov.w	r2, #0
 80022a4:	f04f 0300 	mov.w	r3, #0
 80022a8:	018b      	lsls	r3, r1, #6
 80022aa:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80022ae:	0182      	lsls	r2, r0, #6
 80022b0:	1a12      	subs	r2, r2, r0
 80022b2:	eb63 0301 	sbc.w	r3, r3, r1
 80022b6:	f04f 0000 	mov.w	r0, #0
 80022ba:	f04f 0100 	mov.w	r1, #0
 80022be:	00d9      	lsls	r1, r3, #3
 80022c0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80022c4:	00d0      	lsls	r0, r2, #3
 80022c6:	4602      	mov	r2, r0
 80022c8:	460b      	mov	r3, r1
 80022ca:	1912      	adds	r2, r2, r4
 80022cc:	eb45 0303 	adc.w	r3, r5, r3
 80022d0:	f04f 0000 	mov.w	r0, #0
 80022d4:	f04f 0100 	mov.w	r1, #0
 80022d8:	0299      	lsls	r1, r3, #10
 80022da:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80022de:	0290      	lsls	r0, r2, #10
 80022e0:	4602      	mov	r2, r0
 80022e2:	460b      	mov	r3, r1
 80022e4:	4610      	mov	r0, r2
 80022e6:	4619      	mov	r1, r3
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	461a      	mov	r2, r3
 80022ec:	f04f 0300 	mov.w	r3, #0
 80022f0:	f7fd ff76 	bl	80001e0 <__aeabi_uldivmod>
 80022f4:	4602      	mov	r2, r0
 80022f6:	460b      	mov	r3, r1
 80022f8:	4613      	mov	r3, r2
 80022fa:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80022fc:	4b0b      	ldr	r3, [pc, #44]	; (800232c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	0c1b      	lsrs	r3, r3, #16
 8002302:	f003 0303 	and.w	r3, r3, #3
 8002306:	3301      	adds	r3, #1
 8002308:	005b      	lsls	r3, r3, #1
 800230a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800230c:	68fa      	ldr	r2, [r7, #12]
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	fbb2 f3f3 	udiv	r3, r2, r3
 8002314:	60bb      	str	r3, [r7, #8]
      break;
 8002316:	e002      	b.n	800231e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002318:	4b05      	ldr	r3, [pc, #20]	; (8002330 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800231a:	60bb      	str	r3, [r7, #8]
      break;
 800231c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800231e:	68bb      	ldr	r3, [r7, #8]
}
 8002320:	4618      	mov	r0, r3
 8002322:	3710      	adds	r7, #16
 8002324:	46bd      	mov	sp, r7
 8002326:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800232a:	bf00      	nop
 800232c:	40023800 	.word	0x40023800
 8002330:	00f42400 	.word	0x00f42400
 8002334:	007a1200 	.word	0x007a1200

08002338 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002338:	b480      	push	{r7}
 800233a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800233c:	4b03      	ldr	r3, [pc, #12]	; (800234c <HAL_RCC_GetHCLKFreq+0x14>)
 800233e:	681b      	ldr	r3, [r3, #0]
}
 8002340:	4618      	mov	r0, r3
 8002342:	46bd      	mov	sp, r7
 8002344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002348:	4770      	bx	lr
 800234a:	bf00      	nop
 800234c:	20000000 	.word	0x20000000

08002350 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002354:	f7ff fff0 	bl	8002338 <HAL_RCC_GetHCLKFreq>
 8002358:	4602      	mov	r2, r0
 800235a:	4b05      	ldr	r3, [pc, #20]	; (8002370 <HAL_RCC_GetPCLK1Freq+0x20>)
 800235c:	689b      	ldr	r3, [r3, #8]
 800235e:	0a9b      	lsrs	r3, r3, #10
 8002360:	f003 0307 	and.w	r3, r3, #7
 8002364:	4903      	ldr	r1, [pc, #12]	; (8002374 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002366:	5ccb      	ldrb	r3, [r1, r3]
 8002368:	fa22 f303 	lsr.w	r3, r2, r3
}
 800236c:	4618      	mov	r0, r3
 800236e:	bd80      	pop	{r7, pc}
 8002370:	40023800 	.word	0x40023800
 8002374:	08006c2c 	.word	0x08006c2c

08002378 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800237c:	f7ff ffdc 	bl	8002338 <HAL_RCC_GetHCLKFreq>
 8002380:	4602      	mov	r2, r0
 8002382:	4b05      	ldr	r3, [pc, #20]	; (8002398 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002384:	689b      	ldr	r3, [r3, #8]
 8002386:	0b5b      	lsrs	r3, r3, #13
 8002388:	f003 0307 	and.w	r3, r3, #7
 800238c:	4903      	ldr	r1, [pc, #12]	; (800239c <HAL_RCC_GetPCLK2Freq+0x24>)
 800238e:	5ccb      	ldrb	r3, [r1, r3]
 8002390:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002394:	4618      	mov	r0, r3
 8002396:	bd80      	pop	{r7, pc}
 8002398:	40023800 	.word	0x40023800
 800239c:	08006c2c 	.word	0x08006c2c

080023a0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80023a0:	b480      	push	{r7}
 80023a2:	b083      	sub	sp, #12
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
 80023a8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	220f      	movs	r2, #15
 80023ae:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80023b0:	4b12      	ldr	r3, [pc, #72]	; (80023fc <HAL_RCC_GetClockConfig+0x5c>)
 80023b2:	689b      	ldr	r3, [r3, #8]
 80023b4:	f003 0203 	and.w	r2, r3, #3
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80023bc:	4b0f      	ldr	r3, [pc, #60]	; (80023fc <HAL_RCC_GetClockConfig+0x5c>)
 80023be:	689b      	ldr	r3, [r3, #8]
 80023c0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80023c8:	4b0c      	ldr	r3, [pc, #48]	; (80023fc <HAL_RCC_GetClockConfig+0x5c>)
 80023ca:	689b      	ldr	r3, [r3, #8]
 80023cc:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80023d4:	4b09      	ldr	r3, [pc, #36]	; (80023fc <HAL_RCC_GetClockConfig+0x5c>)
 80023d6:	689b      	ldr	r3, [r3, #8]
 80023d8:	08db      	lsrs	r3, r3, #3
 80023da:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80023e2:	4b07      	ldr	r3, [pc, #28]	; (8002400 <HAL_RCC_GetClockConfig+0x60>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f003 0207 	and.w	r2, r3, #7
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	601a      	str	r2, [r3, #0]
}
 80023ee:	bf00      	nop
 80023f0:	370c      	adds	r7, #12
 80023f2:	46bd      	mov	sp, r7
 80023f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f8:	4770      	bx	lr
 80023fa:	bf00      	nop
 80023fc:	40023800 	.word	0x40023800
 8002400:	40023c00 	.word	0x40023c00

08002404 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b082      	sub	sp, #8
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d101      	bne.n	8002416 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002412:	2301      	movs	r3, #1
 8002414:	e041      	b.n	800249a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800241c:	b2db      	uxtb	r3, r3
 800241e:	2b00      	cmp	r3, #0
 8002420:	d106      	bne.n	8002430 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2200      	movs	r2, #0
 8002426:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800242a:	6878      	ldr	r0, [r7, #4]
 800242c:	f000 f839 	bl	80024a2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2202      	movs	r2, #2
 8002434:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681a      	ldr	r2, [r3, #0]
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	3304      	adds	r3, #4
 8002440:	4619      	mov	r1, r3
 8002442:	4610      	mov	r0, r2
 8002444:	f000 fcbc 	bl	8002dc0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2201      	movs	r2, #1
 800244c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2201      	movs	r2, #1
 8002454:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2201      	movs	r2, #1
 800245c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2201      	movs	r2, #1
 8002464:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2201      	movs	r2, #1
 800246c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2201      	movs	r2, #1
 8002474:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2201      	movs	r2, #1
 800247c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2201      	movs	r2, #1
 8002484:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2201      	movs	r2, #1
 800248c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2201      	movs	r2, #1
 8002494:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002498:	2300      	movs	r3, #0
}
 800249a:	4618      	mov	r0, r3
 800249c:	3708      	adds	r7, #8
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd80      	pop	{r7, pc}

080024a2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80024a2:	b480      	push	{r7}
 80024a4:	b083      	sub	sp, #12
 80024a6:	af00      	add	r7, sp, #0
 80024a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80024aa:	bf00      	nop
 80024ac:	370c      	adds	r7, #12
 80024ae:	46bd      	mov	sp, r7
 80024b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b4:	4770      	bx	lr
	...

080024b8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80024b8:	b480      	push	{r7}
 80024ba:	b085      	sub	sp, #20
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024c6:	b2db      	uxtb	r3, r3
 80024c8:	2b01      	cmp	r3, #1
 80024ca:	d001      	beq.n	80024d0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80024cc:	2301      	movs	r3, #1
 80024ce:	e044      	b.n	800255a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2202      	movs	r2, #2
 80024d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	68da      	ldr	r2, [r3, #12]
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f042 0201 	orr.w	r2, r2, #1
 80024e6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4a1e      	ldr	r2, [pc, #120]	; (8002568 <HAL_TIM_Base_Start_IT+0xb0>)
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d018      	beq.n	8002524 <HAL_TIM_Base_Start_IT+0x6c>
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024fa:	d013      	beq.n	8002524 <HAL_TIM_Base_Start_IT+0x6c>
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	4a1a      	ldr	r2, [pc, #104]	; (800256c <HAL_TIM_Base_Start_IT+0xb4>)
 8002502:	4293      	cmp	r3, r2
 8002504:	d00e      	beq.n	8002524 <HAL_TIM_Base_Start_IT+0x6c>
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4a19      	ldr	r2, [pc, #100]	; (8002570 <HAL_TIM_Base_Start_IT+0xb8>)
 800250c:	4293      	cmp	r3, r2
 800250e:	d009      	beq.n	8002524 <HAL_TIM_Base_Start_IT+0x6c>
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4a17      	ldr	r2, [pc, #92]	; (8002574 <HAL_TIM_Base_Start_IT+0xbc>)
 8002516:	4293      	cmp	r3, r2
 8002518:	d004      	beq.n	8002524 <HAL_TIM_Base_Start_IT+0x6c>
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4a16      	ldr	r2, [pc, #88]	; (8002578 <HAL_TIM_Base_Start_IT+0xc0>)
 8002520:	4293      	cmp	r3, r2
 8002522:	d111      	bne.n	8002548 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	689b      	ldr	r3, [r3, #8]
 800252a:	f003 0307 	and.w	r3, r3, #7
 800252e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	2b06      	cmp	r3, #6
 8002534:	d010      	beq.n	8002558 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	681a      	ldr	r2, [r3, #0]
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f042 0201 	orr.w	r2, r2, #1
 8002544:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002546:	e007      	b.n	8002558 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	681a      	ldr	r2, [r3, #0]
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f042 0201 	orr.w	r2, r2, #1
 8002556:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002558:	2300      	movs	r3, #0
}
 800255a:	4618      	mov	r0, r3
 800255c:	3714      	adds	r7, #20
 800255e:	46bd      	mov	sp, r7
 8002560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002564:	4770      	bx	lr
 8002566:	bf00      	nop
 8002568:	40010000 	.word	0x40010000
 800256c:	40000400 	.word	0x40000400
 8002570:	40000800 	.word	0x40000800
 8002574:	40000c00 	.word	0x40000c00
 8002578:	40014000 	.word	0x40014000

0800257c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b082      	sub	sp, #8
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2b00      	cmp	r3, #0
 8002588:	d101      	bne.n	800258e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800258a:	2301      	movs	r3, #1
 800258c:	e041      	b.n	8002612 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002594:	b2db      	uxtb	r3, r3
 8002596:	2b00      	cmp	r3, #0
 8002598:	d106      	bne.n	80025a8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	2200      	movs	r2, #0
 800259e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80025a2:	6878      	ldr	r0, [r7, #4]
 80025a4:	f7fe fb58 	bl	8000c58 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2202      	movs	r2, #2
 80025ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681a      	ldr	r2, [r3, #0]
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	3304      	adds	r3, #4
 80025b8:	4619      	mov	r1, r3
 80025ba:	4610      	mov	r0, r2
 80025bc:	f000 fc00 	bl	8002dc0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2201      	movs	r2, #1
 80025c4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2201      	movs	r2, #1
 80025cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2201      	movs	r2, #1
 80025d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2201      	movs	r2, #1
 80025dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2201      	movs	r2, #1
 80025e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2201      	movs	r2, #1
 80025ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2201      	movs	r2, #1
 80025f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2201      	movs	r2, #1
 80025fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2201      	movs	r2, #1
 8002604:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2201      	movs	r2, #1
 800260c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002610:	2300      	movs	r3, #0
}
 8002612:	4618      	mov	r0, r3
 8002614:	3708      	adds	r7, #8
 8002616:	46bd      	mov	sp, r7
 8002618:	bd80      	pop	{r7, pc}
	...

0800261c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b084      	sub	sp, #16
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
 8002624:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	2b00      	cmp	r3, #0
 800262a:	d109      	bne.n	8002640 <HAL_TIM_PWM_Start+0x24>
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002632:	b2db      	uxtb	r3, r3
 8002634:	2b01      	cmp	r3, #1
 8002636:	bf14      	ite	ne
 8002638:	2301      	movne	r3, #1
 800263a:	2300      	moveq	r3, #0
 800263c:	b2db      	uxtb	r3, r3
 800263e:	e022      	b.n	8002686 <HAL_TIM_PWM_Start+0x6a>
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	2b04      	cmp	r3, #4
 8002644:	d109      	bne.n	800265a <HAL_TIM_PWM_Start+0x3e>
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800264c:	b2db      	uxtb	r3, r3
 800264e:	2b01      	cmp	r3, #1
 8002650:	bf14      	ite	ne
 8002652:	2301      	movne	r3, #1
 8002654:	2300      	moveq	r3, #0
 8002656:	b2db      	uxtb	r3, r3
 8002658:	e015      	b.n	8002686 <HAL_TIM_PWM_Start+0x6a>
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	2b08      	cmp	r3, #8
 800265e:	d109      	bne.n	8002674 <HAL_TIM_PWM_Start+0x58>
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002666:	b2db      	uxtb	r3, r3
 8002668:	2b01      	cmp	r3, #1
 800266a:	bf14      	ite	ne
 800266c:	2301      	movne	r3, #1
 800266e:	2300      	moveq	r3, #0
 8002670:	b2db      	uxtb	r3, r3
 8002672:	e008      	b.n	8002686 <HAL_TIM_PWM_Start+0x6a>
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800267a:	b2db      	uxtb	r3, r3
 800267c:	2b01      	cmp	r3, #1
 800267e:	bf14      	ite	ne
 8002680:	2301      	movne	r3, #1
 8002682:	2300      	moveq	r3, #0
 8002684:	b2db      	uxtb	r3, r3
 8002686:	2b00      	cmp	r3, #0
 8002688:	d001      	beq.n	800268e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800268a:	2301      	movs	r3, #1
 800268c:	e068      	b.n	8002760 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	2b00      	cmp	r3, #0
 8002692:	d104      	bne.n	800269e <HAL_TIM_PWM_Start+0x82>
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2202      	movs	r2, #2
 8002698:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800269c:	e013      	b.n	80026c6 <HAL_TIM_PWM_Start+0xaa>
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	2b04      	cmp	r3, #4
 80026a2:	d104      	bne.n	80026ae <HAL_TIM_PWM_Start+0x92>
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2202      	movs	r2, #2
 80026a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80026ac:	e00b      	b.n	80026c6 <HAL_TIM_PWM_Start+0xaa>
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	2b08      	cmp	r3, #8
 80026b2:	d104      	bne.n	80026be <HAL_TIM_PWM_Start+0xa2>
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2202      	movs	r2, #2
 80026b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80026bc:	e003      	b.n	80026c6 <HAL_TIM_PWM_Start+0xaa>
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	2202      	movs	r2, #2
 80026c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	2201      	movs	r2, #1
 80026cc:	6839      	ldr	r1, [r7, #0]
 80026ce:	4618      	mov	r0, r3
 80026d0:	f000 fd82 	bl	80031d8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4a23      	ldr	r2, [pc, #140]	; (8002768 <HAL_TIM_PWM_Start+0x14c>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d107      	bne.n	80026ee <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80026ec:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4a1d      	ldr	r2, [pc, #116]	; (8002768 <HAL_TIM_PWM_Start+0x14c>)
 80026f4:	4293      	cmp	r3, r2
 80026f6:	d018      	beq.n	800272a <HAL_TIM_PWM_Start+0x10e>
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002700:	d013      	beq.n	800272a <HAL_TIM_PWM_Start+0x10e>
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4a19      	ldr	r2, [pc, #100]	; (800276c <HAL_TIM_PWM_Start+0x150>)
 8002708:	4293      	cmp	r3, r2
 800270a:	d00e      	beq.n	800272a <HAL_TIM_PWM_Start+0x10e>
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4a17      	ldr	r2, [pc, #92]	; (8002770 <HAL_TIM_PWM_Start+0x154>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d009      	beq.n	800272a <HAL_TIM_PWM_Start+0x10e>
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4a16      	ldr	r2, [pc, #88]	; (8002774 <HAL_TIM_PWM_Start+0x158>)
 800271c:	4293      	cmp	r3, r2
 800271e:	d004      	beq.n	800272a <HAL_TIM_PWM_Start+0x10e>
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4a14      	ldr	r2, [pc, #80]	; (8002778 <HAL_TIM_PWM_Start+0x15c>)
 8002726:	4293      	cmp	r3, r2
 8002728:	d111      	bne.n	800274e <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	689b      	ldr	r3, [r3, #8]
 8002730:	f003 0307 	and.w	r3, r3, #7
 8002734:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	2b06      	cmp	r3, #6
 800273a:	d010      	beq.n	800275e <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	681a      	ldr	r2, [r3, #0]
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f042 0201 	orr.w	r2, r2, #1
 800274a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800274c:	e007      	b.n	800275e <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	681a      	ldr	r2, [r3, #0]
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f042 0201 	orr.w	r2, r2, #1
 800275c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800275e:	2300      	movs	r3, #0
}
 8002760:	4618      	mov	r0, r3
 8002762:	3710      	adds	r7, #16
 8002764:	46bd      	mov	sp, r7
 8002766:	bd80      	pop	{r7, pc}
 8002768:	40010000 	.word	0x40010000
 800276c:	40000400 	.word	0x40000400
 8002770:	40000800 	.word	0x40000800
 8002774:	40000c00 	.word	0x40000c00
 8002778:	40014000 	.word	0x40014000

0800277c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b086      	sub	sp, #24
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
 8002784:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2b00      	cmp	r3, #0
 800278a:	d101      	bne.n	8002790 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800278c:	2301      	movs	r3, #1
 800278e:	e097      	b.n	80028c0 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002796:	b2db      	uxtb	r3, r3
 8002798:	2b00      	cmp	r3, #0
 800279a:	d106      	bne.n	80027aa <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2200      	movs	r2, #0
 80027a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80027a4:	6878      	ldr	r0, [r7, #4]
 80027a6:	f7fe f9f1 	bl	8000b8c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	2202      	movs	r2, #2
 80027ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	689b      	ldr	r3, [r3, #8]
 80027b8:	687a      	ldr	r2, [r7, #4]
 80027ba:	6812      	ldr	r2, [r2, #0]
 80027bc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80027c0:	f023 0307 	bic.w	r3, r3, #7
 80027c4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681a      	ldr	r2, [r3, #0]
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	3304      	adds	r3, #4
 80027ce:	4619      	mov	r1, r3
 80027d0:	4610      	mov	r0, r2
 80027d2:	f000 faf5 	bl	8002dc0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	689b      	ldr	r3, [r3, #8]
 80027dc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	699b      	ldr	r3, [r3, #24]
 80027e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	6a1b      	ldr	r3, [r3, #32]
 80027ec:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	697a      	ldr	r2, [r7, #20]
 80027f4:	4313      	orrs	r3, r2
 80027f6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80027f8:	693b      	ldr	r3, [r7, #16]
 80027fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80027fe:	f023 0303 	bic.w	r3, r3, #3
 8002802:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	689a      	ldr	r2, [r3, #8]
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	699b      	ldr	r3, [r3, #24]
 800280c:	021b      	lsls	r3, r3, #8
 800280e:	4313      	orrs	r3, r2
 8002810:	693a      	ldr	r2, [r7, #16]
 8002812:	4313      	orrs	r3, r2
 8002814:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8002816:	693b      	ldr	r3, [r7, #16]
 8002818:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800281c:	f023 030c 	bic.w	r3, r3, #12
 8002820:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8002822:	693b      	ldr	r3, [r7, #16]
 8002824:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002828:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800282c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	68da      	ldr	r2, [r3, #12]
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	69db      	ldr	r3, [r3, #28]
 8002836:	021b      	lsls	r3, r3, #8
 8002838:	4313      	orrs	r3, r2
 800283a:	693a      	ldr	r2, [r7, #16]
 800283c:	4313      	orrs	r3, r2
 800283e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	691b      	ldr	r3, [r3, #16]
 8002844:	011a      	lsls	r2, r3, #4
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	6a1b      	ldr	r3, [r3, #32]
 800284a:	031b      	lsls	r3, r3, #12
 800284c:	4313      	orrs	r3, r2
 800284e:	693a      	ldr	r2, [r7, #16]
 8002850:	4313      	orrs	r3, r2
 8002852:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800285a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8002862:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	685a      	ldr	r2, [r3, #4]
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	695b      	ldr	r3, [r3, #20]
 800286c:	011b      	lsls	r3, r3, #4
 800286e:	4313      	orrs	r3, r2
 8002870:	68fa      	ldr	r2, [r7, #12]
 8002872:	4313      	orrs	r3, r2
 8002874:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	697a      	ldr	r2, [r7, #20]
 800287c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	693a      	ldr	r2, [r7, #16]
 8002884:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	68fa      	ldr	r2, [r7, #12]
 800288c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2201      	movs	r2, #1
 8002892:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	2201      	movs	r2, #1
 800289a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	2201      	movs	r2, #1
 80028a2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2201      	movs	r2, #1
 80028aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2201      	movs	r2, #1
 80028b2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	2201      	movs	r2, #1
 80028ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80028be:	2300      	movs	r3, #0
}
 80028c0:	4618      	mov	r0, r3
 80028c2:	3718      	adds	r7, #24
 80028c4:	46bd      	mov	sp, r7
 80028c6:	bd80      	pop	{r7, pc}

080028c8 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b084      	sub	sp, #16
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
 80028d0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80028d8:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80028e0:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80028e8:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80028f0:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d110      	bne.n	800291a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80028f8:	7bfb      	ldrb	r3, [r7, #15]
 80028fa:	2b01      	cmp	r3, #1
 80028fc:	d102      	bne.n	8002904 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80028fe:	7b7b      	ldrb	r3, [r7, #13]
 8002900:	2b01      	cmp	r3, #1
 8002902:	d001      	beq.n	8002908 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8002904:	2301      	movs	r3, #1
 8002906:	e069      	b.n	80029dc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2202      	movs	r2, #2
 800290c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2202      	movs	r2, #2
 8002914:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002918:	e031      	b.n	800297e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	2b04      	cmp	r3, #4
 800291e:	d110      	bne.n	8002942 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8002920:	7bbb      	ldrb	r3, [r7, #14]
 8002922:	2b01      	cmp	r3, #1
 8002924:	d102      	bne.n	800292c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8002926:	7b3b      	ldrb	r3, [r7, #12]
 8002928:	2b01      	cmp	r3, #1
 800292a:	d001      	beq.n	8002930 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800292c:	2301      	movs	r3, #1
 800292e:	e055      	b.n	80029dc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2202      	movs	r2, #2
 8002934:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2202      	movs	r2, #2
 800293c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002940:	e01d      	b.n	800297e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002942:	7bfb      	ldrb	r3, [r7, #15]
 8002944:	2b01      	cmp	r3, #1
 8002946:	d108      	bne.n	800295a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8002948:	7bbb      	ldrb	r3, [r7, #14]
 800294a:	2b01      	cmp	r3, #1
 800294c:	d105      	bne.n	800295a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800294e:	7b7b      	ldrb	r3, [r7, #13]
 8002950:	2b01      	cmp	r3, #1
 8002952:	d102      	bne.n	800295a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8002954:	7b3b      	ldrb	r3, [r7, #12]
 8002956:	2b01      	cmp	r3, #1
 8002958:	d001      	beq.n	800295e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800295a:	2301      	movs	r3, #1
 800295c:	e03e      	b.n	80029dc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	2202      	movs	r2, #2
 8002962:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	2202      	movs	r2, #2
 800296a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2202      	movs	r2, #2
 8002972:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2202      	movs	r2, #2
 800297a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	2b00      	cmp	r3, #0
 8002982:	d003      	beq.n	800298c <HAL_TIM_Encoder_Start+0xc4>
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	2b04      	cmp	r3, #4
 8002988:	d008      	beq.n	800299c <HAL_TIM_Encoder_Start+0xd4>
 800298a:	e00f      	b.n	80029ac <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	2201      	movs	r2, #1
 8002992:	2100      	movs	r1, #0
 8002994:	4618      	mov	r0, r3
 8002996:	f000 fc1f 	bl	80031d8 <TIM_CCxChannelCmd>
      break;
 800299a:	e016      	b.n	80029ca <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	2201      	movs	r2, #1
 80029a2:	2104      	movs	r1, #4
 80029a4:	4618      	mov	r0, r3
 80029a6:	f000 fc17 	bl	80031d8 <TIM_CCxChannelCmd>
      break;
 80029aa:	e00e      	b.n	80029ca <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	2201      	movs	r2, #1
 80029b2:	2100      	movs	r1, #0
 80029b4:	4618      	mov	r0, r3
 80029b6:	f000 fc0f 	bl	80031d8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	2201      	movs	r2, #1
 80029c0:	2104      	movs	r1, #4
 80029c2:	4618      	mov	r0, r3
 80029c4:	f000 fc08 	bl	80031d8 <TIM_CCxChannelCmd>
      break;
 80029c8:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	681a      	ldr	r2, [r3, #0]
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f042 0201 	orr.w	r2, r2, #1
 80029d8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80029da:	2300      	movs	r3, #0
}
 80029dc:	4618      	mov	r0, r3
 80029de:	3710      	adds	r7, #16
 80029e0:	46bd      	mov	sp, r7
 80029e2:	bd80      	pop	{r7, pc}

080029e4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b082      	sub	sp, #8
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	691b      	ldr	r3, [r3, #16]
 80029f2:	f003 0302 	and.w	r3, r3, #2
 80029f6:	2b02      	cmp	r3, #2
 80029f8:	d122      	bne.n	8002a40 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	68db      	ldr	r3, [r3, #12]
 8002a00:	f003 0302 	and.w	r3, r3, #2
 8002a04:	2b02      	cmp	r3, #2
 8002a06:	d11b      	bne.n	8002a40 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f06f 0202 	mvn.w	r2, #2
 8002a10:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2201      	movs	r2, #1
 8002a16:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	699b      	ldr	r3, [r3, #24]
 8002a1e:	f003 0303 	and.w	r3, r3, #3
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d003      	beq.n	8002a2e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002a26:	6878      	ldr	r0, [r7, #4]
 8002a28:	f000 f9ac 	bl	8002d84 <HAL_TIM_IC_CaptureCallback>
 8002a2c:	e005      	b.n	8002a3a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a2e:	6878      	ldr	r0, [r7, #4]
 8002a30:	f000 f99e 	bl	8002d70 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a34:	6878      	ldr	r0, [r7, #4]
 8002a36:	f000 f9af 	bl	8002d98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	691b      	ldr	r3, [r3, #16]
 8002a46:	f003 0304 	and.w	r3, r3, #4
 8002a4a:	2b04      	cmp	r3, #4
 8002a4c:	d122      	bne.n	8002a94 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	68db      	ldr	r3, [r3, #12]
 8002a54:	f003 0304 	and.w	r3, r3, #4
 8002a58:	2b04      	cmp	r3, #4
 8002a5a:	d11b      	bne.n	8002a94 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f06f 0204 	mvn.w	r2, #4
 8002a64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	2202      	movs	r2, #2
 8002a6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	699b      	ldr	r3, [r3, #24]
 8002a72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d003      	beq.n	8002a82 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a7a:	6878      	ldr	r0, [r7, #4]
 8002a7c:	f000 f982 	bl	8002d84 <HAL_TIM_IC_CaptureCallback>
 8002a80:	e005      	b.n	8002a8e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a82:	6878      	ldr	r0, [r7, #4]
 8002a84:	f000 f974 	bl	8002d70 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a88:	6878      	ldr	r0, [r7, #4]
 8002a8a:	f000 f985 	bl	8002d98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2200      	movs	r2, #0
 8002a92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	691b      	ldr	r3, [r3, #16]
 8002a9a:	f003 0308 	and.w	r3, r3, #8
 8002a9e:	2b08      	cmp	r3, #8
 8002aa0:	d122      	bne.n	8002ae8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	68db      	ldr	r3, [r3, #12]
 8002aa8:	f003 0308 	and.w	r3, r3, #8
 8002aac:	2b08      	cmp	r3, #8
 8002aae:	d11b      	bne.n	8002ae8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f06f 0208 	mvn.w	r2, #8
 8002ab8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	2204      	movs	r2, #4
 8002abe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	69db      	ldr	r3, [r3, #28]
 8002ac6:	f003 0303 	and.w	r3, r3, #3
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d003      	beq.n	8002ad6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ace:	6878      	ldr	r0, [r7, #4]
 8002ad0:	f000 f958 	bl	8002d84 <HAL_TIM_IC_CaptureCallback>
 8002ad4:	e005      	b.n	8002ae2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ad6:	6878      	ldr	r0, [r7, #4]
 8002ad8:	f000 f94a 	bl	8002d70 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002adc:	6878      	ldr	r0, [r7, #4]
 8002ade:	f000 f95b 	bl	8002d98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	691b      	ldr	r3, [r3, #16]
 8002aee:	f003 0310 	and.w	r3, r3, #16
 8002af2:	2b10      	cmp	r3, #16
 8002af4:	d122      	bne.n	8002b3c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	68db      	ldr	r3, [r3, #12]
 8002afc:	f003 0310 	and.w	r3, r3, #16
 8002b00:	2b10      	cmp	r3, #16
 8002b02:	d11b      	bne.n	8002b3c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f06f 0210 	mvn.w	r2, #16
 8002b0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2208      	movs	r2, #8
 8002b12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	69db      	ldr	r3, [r3, #28]
 8002b1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d003      	beq.n	8002b2a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b22:	6878      	ldr	r0, [r7, #4]
 8002b24:	f000 f92e 	bl	8002d84 <HAL_TIM_IC_CaptureCallback>
 8002b28:	e005      	b.n	8002b36 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b2a:	6878      	ldr	r0, [r7, #4]
 8002b2c:	f000 f920 	bl	8002d70 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b30:	6878      	ldr	r0, [r7, #4]
 8002b32:	f000 f931 	bl	8002d98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	2200      	movs	r2, #0
 8002b3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	691b      	ldr	r3, [r3, #16]
 8002b42:	f003 0301 	and.w	r3, r3, #1
 8002b46:	2b01      	cmp	r3, #1
 8002b48:	d10e      	bne.n	8002b68 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	68db      	ldr	r3, [r3, #12]
 8002b50:	f003 0301 	and.w	r3, r3, #1
 8002b54:	2b01      	cmp	r3, #1
 8002b56:	d107      	bne.n	8002b68 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f06f 0201 	mvn.w	r2, #1
 8002b60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002b62:	6878      	ldr	r0, [r7, #4]
 8002b64:	f7fd ff8a 	bl	8000a7c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	691b      	ldr	r3, [r3, #16]
 8002b6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b72:	2b80      	cmp	r3, #128	; 0x80
 8002b74:	d10e      	bne.n	8002b94 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	68db      	ldr	r3, [r3, #12]
 8002b7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b80:	2b80      	cmp	r3, #128	; 0x80
 8002b82:	d107      	bne.n	8002b94 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002b8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002b8e:	6878      	ldr	r0, [r7, #4]
 8002b90:	f000 fbc0 	bl	8003314 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	691b      	ldr	r3, [r3, #16]
 8002b9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b9e:	2b40      	cmp	r3, #64	; 0x40
 8002ba0:	d10e      	bne.n	8002bc0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	68db      	ldr	r3, [r3, #12]
 8002ba8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bac:	2b40      	cmp	r3, #64	; 0x40
 8002bae:	d107      	bne.n	8002bc0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002bb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002bba:	6878      	ldr	r0, [r7, #4]
 8002bbc:	f000 f8f6 	bl	8002dac <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	691b      	ldr	r3, [r3, #16]
 8002bc6:	f003 0320 	and.w	r3, r3, #32
 8002bca:	2b20      	cmp	r3, #32
 8002bcc:	d10e      	bne.n	8002bec <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	68db      	ldr	r3, [r3, #12]
 8002bd4:	f003 0320 	and.w	r3, r3, #32
 8002bd8:	2b20      	cmp	r3, #32
 8002bda:	d107      	bne.n	8002bec <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f06f 0220 	mvn.w	r2, #32
 8002be4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002be6:	6878      	ldr	r0, [r7, #4]
 8002be8:	f000 fb8a 	bl	8003300 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002bec:	bf00      	nop
 8002bee:	3708      	adds	r7, #8
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	bd80      	pop	{r7, pc}

08002bf4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b084      	sub	sp, #16
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	60f8      	str	r0, [r7, #12]
 8002bfc:	60b9      	str	r1, [r7, #8]
 8002bfe:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c06:	2b01      	cmp	r3, #1
 8002c08:	d101      	bne.n	8002c0e <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002c0a:	2302      	movs	r3, #2
 8002c0c:	e0ac      	b.n	8002d68 <HAL_TIM_PWM_ConfigChannel+0x174>
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	2201      	movs	r2, #1
 8002c12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	2b0c      	cmp	r3, #12
 8002c1a:	f200 809f 	bhi.w	8002d5c <HAL_TIM_PWM_ConfigChannel+0x168>
 8002c1e:	a201      	add	r2, pc, #4	; (adr r2, 8002c24 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8002c20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c24:	08002c59 	.word	0x08002c59
 8002c28:	08002d5d 	.word	0x08002d5d
 8002c2c:	08002d5d 	.word	0x08002d5d
 8002c30:	08002d5d 	.word	0x08002d5d
 8002c34:	08002c99 	.word	0x08002c99
 8002c38:	08002d5d 	.word	0x08002d5d
 8002c3c:	08002d5d 	.word	0x08002d5d
 8002c40:	08002d5d 	.word	0x08002d5d
 8002c44:	08002cdb 	.word	0x08002cdb
 8002c48:	08002d5d 	.word	0x08002d5d
 8002c4c:	08002d5d 	.word	0x08002d5d
 8002c50:	08002d5d 	.word	0x08002d5d
 8002c54:	08002d1b 	.word	0x08002d1b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	68b9      	ldr	r1, [r7, #8]
 8002c5e:	4618      	mov	r0, r3
 8002c60:	f000 f92e 	bl	8002ec0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	699a      	ldr	r2, [r3, #24]
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f042 0208 	orr.w	r2, r2, #8
 8002c72:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	699a      	ldr	r2, [r3, #24]
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f022 0204 	bic.w	r2, r2, #4
 8002c82:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	6999      	ldr	r1, [r3, #24]
 8002c8a:	68bb      	ldr	r3, [r7, #8]
 8002c8c:	691a      	ldr	r2, [r3, #16]
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	430a      	orrs	r2, r1
 8002c94:	619a      	str	r2, [r3, #24]
      break;
 8002c96:	e062      	b.n	8002d5e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	68b9      	ldr	r1, [r7, #8]
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	f000 f974 	bl	8002f8c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	699a      	ldr	r2, [r3, #24]
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002cb2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	699a      	ldr	r2, [r3, #24]
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002cc2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	6999      	ldr	r1, [r3, #24]
 8002cca:	68bb      	ldr	r3, [r7, #8]
 8002ccc:	691b      	ldr	r3, [r3, #16]
 8002cce:	021a      	lsls	r2, r3, #8
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	430a      	orrs	r2, r1
 8002cd6:	619a      	str	r2, [r3, #24]
      break;
 8002cd8:	e041      	b.n	8002d5e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	68b9      	ldr	r1, [r7, #8]
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	f000 f9bf 	bl	8003064 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	69da      	ldr	r2, [r3, #28]
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f042 0208 	orr.w	r2, r2, #8
 8002cf4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	69da      	ldr	r2, [r3, #28]
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f022 0204 	bic.w	r2, r2, #4
 8002d04:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	69d9      	ldr	r1, [r3, #28]
 8002d0c:	68bb      	ldr	r3, [r7, #8]
 8002d0e:	691a      	ldr	r2, [r3, #16]
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	430a      	orrs	r2, r1
 8002d16:	61da      	str	r2, [r3, #28]
      break;
 8002d18:	e021      	b.n	8002d5e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	68b9      	ldr	r1, [r7, #8]
 8002d20:	4618      	mov	r0, r3
 8002d22:	f000 fa09 	bl	8003138 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	69da      	ldr	r2, [r3, #28]
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002d34:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	69da      	ldr	r2, [r3, #28]
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d44:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	69d9      	ldr	r1, [r3, #28]
 8002d4c:	68bb      	ldr	r3, [r7, #8]
 8002d4e:	691b      	ldr	r3, [r3, #16]
 8002d50:	021a      	lsls	r2, r3, #8
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	430a      	orrs	r2, r1
 8002d58:	61da      	str	r2, [r3, #28]
      break;
 8002d5a:	e000      	b.n	8002d5e <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8002d5c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	2200      	movs	r2, #0
 8002d62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002d66:	2300      	movs	r3, #0
}
 8002d68:	4618      	mov	r0, r3
 8002d6a:	3710      	adds	r7, #16
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	bd80      	pop	{r7, pc}

08002d70 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002d70:	b480      	push	{r7}
 8002d72:	b083      	sub	sp, #12
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002d78:	bf00      	nop
 8002d7a:	370c      	adds	r7, #12
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d82:	4770      	bx	lr

08002d84 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002d84:	b480      	push	{r7}
 8002d86:	b083      	sub	sp, #12
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002d8c:	bf00      	nop
 8002d8e:	370c      	adds	r7, #12
 8002d90:	46bd      	mov	sp, r7
 8002d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d96:	4770      	bx	lr

08002d98 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002d98:	b480      	push	{r7}
 8002d9a:	b083      	sub	sp, #12
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002da0:	bf00      	nop
 8002da2:	370c      	adds	r7, #12
 8002da4:	46bd      	mov	sp, r7
 8002da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002daa:	4770      	bx	lr

08002dac <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002dac:	b480      	push	{r7}
 8002dae:	b083      	sub	sp, #12
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002db4:	bf00      	nop
 8002db6:	370c      	adds	r7, #12
 8002db8:	46bd      	mov	sp, r7
 8002dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbe:	4770      	bx	lr

08002dc0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	b085      	sub	sp, #20
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
 8002dc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	4a34      	ldr	r2, [pc, #208]	; (8002ea4 <TIM_Base_SetConfig+0xe4>)
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	d00f      	beq.n	8002df8 <TIM_Base_SetConfig+0x38>
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002dde:	d00b      	beq.n	8002df8 <TIM_Base_SetConfig+0x38>
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	4a31      	ldr	r2, [pc, #196]	; (8002ea8 <TIM_Base_SetConfig+0xe8>)
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d007      	beq.n	8002df8 <TIM_Base_SetConfig+0x38>
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	4a30      	ldr	r2, [pc, #192]	; (8002eac <TIM_Base_SetConfig+0xec>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d003      	beq.n	8002df8 <TIM_Base_SetConfig+0x38>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	4a2f      	ldr	r2, [pc, #188]	; (8002eb0 <TIM_Base_SetConfig+0xf0>)
 8002df4:	4293      	cmp	r3, r2
 8002df6:	d108      	bne.n	8002e0a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002dfe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	685b      	ldr	r3, [r3, #4]
 8002e04:	68fa      	ldr	r2, [r7, #12]
 8002e06:	4313      	orrs	r3, r2
 8002e08:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	4a25      	ldr	r2, [pc, #148]	; (8002ea4 <TIM_Base_SetConfig+0xe4>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d01b      	beq.n	8002e4a <TIM_Base_SetConfig+0x8a>
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e18:	d017      	beq.n	8002e4a <TIM_Base_SetConfig+0x8a>
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	4a22      	ldr	r2, [pc, #136]	; (8002ea8 <TIM_Base_SetConfig+0xe8>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d013      	beq.n	8002e4a <TIM_Base_SetConfig+0x8a>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	4a21      	ldr	r2, [pc, #132]	; (8002eac <TIM_Base_SetConfig+0xec>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d00f      	beq.n	8002e4a <TIM_Base_SetConfig+0x8a>
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	4a20      	ldr	r2, [pc, #128]	; (8002eb0 <TIM_Base_SetConfig+0xf0>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d00b      	beq.n	8002e4a <TIM_Base_SetConfig+0x8a>
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	4a1f      	ldr	r2, [pc, #124]	; (8002eb4 <TIM_Base_SetConfig+0xf4>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d007      	beq.n	8002e4a <TIM_Base_SetConfig+0x8a>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	4a1e      	ldr	r2, [pc, #120]	; (8002eb8 <TIM_Base_SetConfig+0xf8>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d003      	beq.n	8002e4a <TIM_Base_SetConfig+0x8a>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	4a1d      	ldr	r2, [pc, #116]	; (8002ebc <TIM_Base_SetConfig+0xfc>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d108      	bne.n	8002e5c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e50:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	68db      	ldr	r3, [r3, #12]
 8002e56:	68fa      	ldr	r2, [r7, #12]
 8002e58:	4313      	orrs	r3, r2
 8002e5a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	695b      	ldr	r3, [r3, #20]
 8002e66:	4313      	orrs	r3, r2
 8002e68:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	68fa      	ldr	r2, [r7, #12]
 8002e6e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	689a      	ldr	r2, [r3, #8]
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	681a      	ldr	r2, [r3, #0]
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	4a08      	ldr	r2, [pc, #32]	; (8002ea4 <TIM_Base_SetConfig+0xe4>)
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d103      	bne.n	8002e90 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	691a      	ldr	r2, [r3, #16]
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2201      	movs	r2, #1
 8002e94:	615a      	str	r2, [r3, #20]
}
 8002e96:	bf00      	nop
 8002e98:	3714      	adds	r7, #20
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea0:	4770      	bx	lr
 8002ea2:	bf00      	nop
 8002ea4:	40010000 	.word	0x40010000
 8002ea8:	40000400 	.word	0x40000400
 8002eac:	40000800 	.word	0x40000800
 8002eb0:	40000c00 	.word	0x40000c00
 8002eb4:	40014000 	.word	0x40014000
 8002eb8:	40014400 	.word	0x40014400
 8002ebc:	40014800 	.word	0x40014800

08002ec0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	b087      	sub	sp, #28
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
 8002ec8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6a1b      	ldr	r3, [r3, #32]
 8002ece:	f023 0201 	bic.w	r2, r3, #1
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6a1b      	ldr	r3, [r3, #32]
 8002eda:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	699b      	ldr	r3, [r3, #24]
 8002ee6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002eee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	f023 0303 	bic.w	r3, r3, #3
 8002ef6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	68fa      	ldr	r2, [r7, #12]
 8002efe:	4313      	orrs	r3, r2
 8002f00:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002f02:	697b      	ldr	r3, [r7, #20]
 8002f04:	f023 0302 	bic.w	r3, r3, #2
 8002f08:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	689b      	ldr	r3, [r3, #8]
 8002f0e:	697a      	ldr	r2, [r7, #20]
 8002f10:	4313      	orrs	r3, r2
 8002f12:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	4a1c      	ldr	r2, [pc, #112]	; (8002f88 <TIM_OC1_SetConfig+0xc8>)
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	d10c      	bne.n	8002f36 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002f1c:	697b      	ldr	r3, [r7, #20]
 8002f1e:	f023 0308 	bic.w	r3, r3, #8
 8002f22:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	68db      	ldr	r3, [r3, #12]
 8002f28:	697a      	ldr	r2, [r7, #20]
 8002f2a:	4313      	orrs	r3, r2
 8002f2c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002f2e:	697b      	ldr	r3, [r7, #20]
 8002f30:	f023 0304 	bic.w	r3, r3, #4
 8002f34:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	4a13      	ldr	r2, [pc, #76]	; (8002f88 <TIM_OC1_SetConfig+0xc8>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d111      	bne.n	8002f62 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002f3e:	693b      	ldr	r3, [r7, #16]
 8002f40:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002f44:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002f46:	693b      	ldr	r3, [r7, #16]
 8002f48:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002f4c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	695b      	ldr	r3, [r3, #20]
 8002f52:	693a      	ldr	r2, [r7, #16]
 8002f54:	4313      	orrs	r3, r2
 8002f56:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	699b      	ldr	r3, [r3, #24]
 8002f5c:	693a      	ldr	r2, [r7, #16]
 8002f5e:	4313      	orrs	r3, r2
 8002f60:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	693a      	ldr	r2, [r7, #16]
 8002f66:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	68fa      	ldr	r2, [r7, #12]
 8002f6c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	685a      	ldr	r2, [r3, #4]
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	697a      	ldr	r2, [r7, #20]
 8002f7a:	621a      	str	r2, [r3, #32]
}
 8002f7c:	bf00      	nop
 8002f7e:	371c      	adds	r7, #28
 8002f80:	46bd      	mov	sp, r7
 8002f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f86:	4770      	bx	lr
 8002f88:	40010000 	.word	0x40010000

08002f8c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	b087      	sub	sp, #28
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
 8002f94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6a1b      	ldr	r3, [r3, #32]
 8002f9a:	f023 0210 	bic.w	r2, r3, #16
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6a1b      	ldr	r3, [r3, #32]
 8002fa6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	685b      	ldr	r3, [r3, #4]
 8002fac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	699b      	ldr	r3, [r3, #24]
 8002fb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002fba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002fc2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	021b      	lsls	r3, r3, #8
 8002fca:	68fa      	ldr	r2, [r7, #12]
 8002fcc:	4313      	orrs	r3, r2
 8002fce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002fd0:	697b      	ldr	r3, [r7, #20]
 8002fd2:	f023 0320 	bic.w	r3, r3, #32
 8002fd6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	689b      	ldr	r3, [r3, #8]
 8002fdc:	011b      	lsls	r3, r3, #4
 8002fde:	697a      	ldr	r2, [r7, #20]
 8002fe0:	4313      	orrs	r3, r2
 8002fe2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	4a1e      	ldr	r2, [pc, #120]	; (8003060 <TIM_OC2_SetConfig+0xd4>)
 8002fe8:	4293      	cmp	r3, r2
 8002fea:	d10d      	bne.n	8003008 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002fec:	697b      	ldr	r3, [r7, #20]
 8002fee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002ff2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	68db      	ldr	r3, [r3, #12]
 8002ff8:	011b      	lsls	r3, r3, #4
 8002ffa:	697a      	ldr	r2, [r7, #20]
 8002ffc:	4313      	orrs	r3, r2
 8002ffe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003000:	697b      	ldr	r3, [r7, #20]
 8003002:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003006:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	4a15      	ldr	r2, [pc, #84]	; (8003060 <TIM_OC2_SetConfig+0xd4>)
 800300c:	4293      	cmp	r3, r2
 800300e:	d113      	bne.n	8003038 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003010:	693b      	ldr	r3, [r7, #16]
 8003012:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003016:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003018:	693b      	ldr	r3, [r7, #16]
 800301a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800301e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	695b      	ldr	r3, [r3, #20]
 8003024:	009b      	lsls	r3, r3, #2
 8003026:	693a      	ldr	r2, [r7, #16]
 8003028:	4313      	orrs	r3, r2
 800302a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	699b      	ldr	r3, [r3, #24]
 8003030:	009b      	lsls	r3, r3, #2
 8003032:	693a      	ldr	r2, [r7, #16]
 8003034:	4313      	orrs	r3, r2
 8003036:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	693a      	ldr	r2, [r7, #16]
 800303c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	68fa      	ldr	r2, [r7, #12]
 8003042:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	685a      	ldr	r2, [r3, #4]
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	697a      	ldr	r2, [r7, #20]
 8003050:	621a      	str	r2, [r3, #32]
}
 8003052:	bf00      	nop
 8003054:	371c      	adds	r7, #28
 8003056:	46bd      	mov	sp, r7
 8003058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305c:	4770      	bx	lr
 800305e:	bf00      	nop
 8003060:	40010000 	.word	0x40010000

08003064 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003064:	b480      	push	{r7}
 8003066:	b087      	sub	sp, #28
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
 800306c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6a1b      	ldr	r3, [r3, #32]
 8003072:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6a1b      	ldr	r3, [r3, #32]
 800307e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	69db      	ldr	r3, [r3, #28]
 800308a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003092:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	f023 0303 	bic.w	r3, r3, #3
 800309a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	68fa      	ldr	r2, [r7, #12]
 80030a2:	4313      	orrs	r3, r2
 80030a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80030a6:	697b      	ldr	r3, [r7, #20]
 80030a8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80030ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	689b      	ldr	r3, [r3, #8]
 80030b2:	021b      	lsls	r3, r3, #8
 80030b4:	697a      	ldr	r2, [r7, #20]
 80030b6:	4313      	orrs	r3, r2
 80030b8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	4a1d      	ldr	r2, [pc, #116]	; (8003134 <TIM_OC3_SetConfig+0xd0>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d10d      	bne.n	80030de <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80030c2:	697b      	ldr	r3, [r7, #20]
 80030c4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80030c8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	68db      	ldr	r3, [r3, #12]
 80030ce:	021b      	lsls	r3, r3, #8
 80030d0:	697a      	ldr	r2, [r7, #20]
 80030d2:	4313      	orrs	r3, r2
 80030d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80030d6:	697b      	ldr	r3, [r7, #20]
 80030d8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80030dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	4a14      	ldr	r2, [pc, #80]	; (8003134 <TIM_OC3_SetConfig+0xd0>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d113      	bne.n	800310e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80030e6:	693b      	ldr	r3, [r7, #16]
 80030e8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80030ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80030ee:	693b      	ldr	r3, [r7, #16]
 80030f0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80030f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	695b      	ldr	r3, [r3, #20]
 80030fa:	011b      	lsls	r3, r3, #4
 80030fc:	693a      	ldr	r2, [r7, #16]
 80030fe:	4313      	orrs	r3, r2
 8003100:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	699b      	ldr	r3, [r3, #24]
 8003106:	011b      	lsls	r3, r3, #4
 8003108:	693a      	ldr	r2, [r7, #16]
 800310a:	4313      	orrs	r3, r2
 800310c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	693a      	ldr	r2, [r7, #16]
 8003112:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	68fa      	ldr	r2, [r7, #12]
 8003118:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	685a      	ldr	r2, [r3, #4]
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	697a      	ldr	r2, [r7, #20]
 8003126:	621a      	str	r2, [r3, #32]
}
 8003128:	bf00      	nop
 800312a:	371c      	adds	r7, #28
 800312c:	46bd      	mov	sp, r7
 800312e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003132:	4770      	bx	lr
 8003134:	40010000 	.word	0x40010000

08003138 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003138:	b480      	push	{r7}
 800313a:	b087      	sub	sp, #28
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
 8003140:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6a1b      	ldr	r3, [r3, #32]
 8003146:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6a1b      	ldr	r3, [r3, #32]
 8003152:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	685b      	ldr	r3, [r3, #4]
 8003158:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	69db      	ldr	r3, [r3, #28]
 800315e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003166:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800316e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	021b      	lsls	r3, r3, #8
 8003176:	68fa      	ldr	r2, [r7, #12]
 8003178:	4313      	orrs	r3, r2
 800317a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800317c:	693b      	ldr	r3, [r7, #16]
 800317e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003182:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	689b      	ldr	r3, [r3, #8]
 8003188:	031b      	lsls	r3, r3, #12
 800318a:	693a      	ldr	r2, [r7, #16]
 800318c:	4313      	orrs	r3, r2
 800318e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	4a10      	ldr	r2, [pc, #64]	; (80031d4 <TIM_OC4_SetConfig+0x9c>)
 8003194:	4293      	cmp	r3, r2
 8003196:	d109      	bne.n	80031ac <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003198:	697b      	ldr	r3, [r7, #20]
 800319a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800319e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	695b      	ldr	r3, [r3, #20]
 80031a4:	019b      	lsls	r3, r3, #6
 80031a6:	697a      	ldr	r2, [r7, #20]
 80031a8:	4313      	orrs	r3, r2
 80031aa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	697a      	ldr	r2, [r7, #20]
 80031b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	68fa      	ldr	r2, [r7, #12]
 80031b6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	685a      	ldr	r2, [r3, #4]
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	693a      	ldr	r2, [r7, #16]
 80031c4:	621a      	str	r2, [r3, #32]
}
 80031c6:	bf00      	nop
 80031c8:	371c      	adds	r7, #28
 80031ca:	46bd      	mov	sp, r7
 80031cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d0:	4770      	bx	lr
 80031d2:	bf00      	nop
 80031d4:	40010000 	.word	0x40010000

080031d8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80031d8:	b480      	push	{r7}
 80031da:	b087      	sub	sp, #28
 80031dc:	af00      	add	r7, sp, #0
 80031de:	60f8      	str	r0, [r7, #12]
 80031e0:	60b9      	str	r1, [r7, #8]
 80031e2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80031e4:	68bb      	ldr	r3, [r7, #8]
 80031e6:	f003 031f 	and.w	r3, r3, #31
 80031ea:	2201      	movs	r2, #1
 80031ec:	fa02 f303 	lsl.w	r3, r2, r3
 80031f0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	6a1a      	ldr	r2, [r3, #32]
 80031f6:	697b      	ldr	r3, [r7, #20]
 80031f8:	43db      	mvns	r3, r3
 80031fa:	401a      	ands	r2, r3
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	6a1a      	ldr	r2, [r3, #32]
 8003204:	68bb      	ldr	r3, [r7, #8]
 8003206:	f003 031f 	and.w	r3, r3, #31
 800320a:	6879      	ldr	r1, [r7, #4]
 800320c:	fa01 f303 	lsl.w	r3, r1, r3
 8003210:	431a      	orrs	r2, r3
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	621a      	str	r2, [r3, #32]
}
 8003216:	bf00      	nop
 8003218:	371c      	adds	r7, #28
 800321a:	46bd      	mov	sp, r7
 800321c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003220:	4770      	bx	lr
	...

08003224 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003224:	b480      	push	{r7}
 8003226:	b085      	sub	sp, #20
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
 800322c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003234:	2b01      	cmp	r3, #1
 8003236:	d101      	bne.n	800323c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003238:	2302      	movs	r3, #2
 800323a:	e050      	b.n	80032de <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2201      	movs	r2, #1
 8003240:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2202      	movs	r2, #2
 8003248:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	689b      	ldr	r3, [r3, #8]
 800325a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003262:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	68fa      	ldr	r2, [r7, #12]
 800326a:	4313      	orrs	r3, r2
 800326c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	68fa      	ldr	r2, [r7, #12]
 8003274:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4a1c      	ldr	r2, [pc, #112]	; (80032ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800327c:	4293      	cmp	r3, r2
 800327e:	d018      	beq.n	80032b2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003288:	d013      	beq.n	80032b2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4a18      	ldr	r2, [pc, #96]	; (80032f0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003290:	4293      	cmp	r3, r2
 8003292:	d00e      	beq.n	80032b2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4a16      	ldr	r2, [pc, #88]	; (80032f4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d009      	beq.n	80032b2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4a15      	ldr	r2, [pc, #84]	; (80032f8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d004      	beq.n	80032b2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4a13      	ldr	r2, [pc, #76]	; (80032fc <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d10c      	bne.n	80032cc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80032b2:	68bb      	ldr	r3, [r7, #8]
 80032b4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80032b8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	68ba      	ldr	r2, [r7, #8]
 80032c0:	4313      	orrs	r3, r2
 80032c2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	68ba      	ldr	r2, [r7, #8]
 80032ca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2201      	movs	r2, #1
 80032d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2200      	movs	r2, #0
 80032d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80032dc:	2300      	movs	r3, #0
}
 80032de:	4618      	mov	r0, r3
 80032e0:	3714      	adds	r7, #20
 80032e2:	46bd      	mov	sp, r7
 80032e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e8:	4770      	bx	lr
 80032ea:	bf00      	nop
 80032ec:	40010000 	.word	0x40010000
 80032f0:	40000400 	.word	0x40000400
 80032f4:	40000800 	.word	0x40000800
 80032f8:	40000c00 	.word	0x40000c00
 80032fc:	40014000 	.word	0x40014000

08003300 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003300:	b480      	push	{r7}
 8003302:	b083      	sub	sp, #12
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003308:	bf00      	nop
 800330a:	370c      	adds	r7, #12
 800330c:	46bd      	mov	sp, r7
 800330e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003312:	4770      	bx	lr

08003314 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003314:	b480      	push	{r7}
 8003316:	b083      	sub	sp, #12
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800331c:	bf00      	nop
 800331e:	370c      	adds	r7, #12
 8003320:	46bd      	mov	sp, r7
 8003322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003326:	4770      	bx	lr

08003328 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b082      	sub	sp, #8
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2b00      	cmp	r3, #0
 8003334:	d101      	bne.n	800333a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003336:	2301      	movs	r3, #1
 8003338:	e03f      	b.n	80033ba <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003340:	b2db      	uxtb	r3, r3
 8003342:	2b00      	cmp	r3, #0
 8003344:	d106      	bne.n	8003354 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2200      	movs	r2, #0
 800334a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800334e:	6878      	ldr	r0, [r7, #4]
 8003350:	f7fd fcde 	bl	8000d10 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2224      	movs	r2, #36	; 0x24
 8003358:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	68da      	ldr	r2, [r3, #12]
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800336a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800336c:	6878      	ldr	r0, [r7, #4]
 800336e:	f000 fc1b 	bl	8003ba8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	691a      	ldr	r2, [r3, #16]
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003380:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	695a      	ldr	r2, [r3, #20]
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003390:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	68da      	ldr	r2, [r3, #12]
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80033a0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	2200      	movs	r2, #0
 80033a6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2220      	movs	r2, #32
 80033ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2220      	movs	r2, #32
 80033b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80033b8:	2300      	movs	r3, #0
}
 80033ba:	4618      	mov	r0, r3
 80033bc:	3708      	adds	r7, #8
 80033be:	46bd      	mov	sp, r7
 80033c0:	bd80      	pop	{r7, pc}

080033c2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80033c2:	b580      	push	{r7, lr}
 80033c4:	b08a      	sub	sp, #40	; 0x28
 80033c6:	af02      	add	r7, sp, #8
 80033c8:	60f8      	str	r0, [r7, #12]
 80033ca:	60b9      	str	r1, [r7, #8]
 80033cc:	603b      	str	r3, [r7, #0]
 80033ce:	4613      	mov	r3, r2
 80033d0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80033d2:	2300      	movs	r3, #0
 80033d4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033dc:	b2db      	uxtb	r3, r3
 80033de:	2b20      	cmp	r3, #32
 80033e0:	d17c      	bne.n	80034dc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80033e2:	68bb      	ldr	r3, [r7, #8]
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d002      	beq.n	80033ee <HAL_UART_Transmit+0x2c>
 80033e8:	88fb      	ldrh	r3, [r7, #6]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d101      	bne.n	80033f2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80033ee:	2301      	movs	r3, #1
 80033f0:	e075      	b.n	80034de <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033f8:	2b01      	cmp	r3, #1
 80033fa:	d101      	bne.n	8003400 <HAL_UART_Transmit+0x3e>
 80033fc:	2302      	movs	r3, #2
 80033fe:	e06e      	b.n	80034de <HAL_UART_Transmit+0x11c>
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	2201      	movs	r2, #1
 8003404:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	2200      	movs	r2, #0
 800340c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	2221      	movs	r2, #33	; 0x21
 8003412:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003416:	f7fd fdbf 	bl	8000f98 <HAL_GetTick>
 800341a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	88fa      	ldrh	r2, [r7, #6]
 8003420:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	88fa      	ldrh	r2, [r7, #6]
 8003426:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	689b      	ldr	r3, [r3, #8]
 800342c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003430:	d108      	bne.n	8003444 <HAL_UART_Transmit+0x82>
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	691b      	ldr	r3, [r3, #16]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d104      	bne.n	8003444 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800343a:	2300      	movs	r3, #0
 800343c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800343e:	68bb      	ldr	r3, [r7, #8]
 8003440:	61bb      	str	r3, [r7, #24]
 8003442:	e003      	b.n	800344c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003444:	68bb      	ldr	r3, [r7, #8]
 8003446:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003448:	2300      	movs	r3, #0
 800344a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	2200      	movs	r2, #0
 8003450:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003454:	e02a      	b.n	80034ac <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	9300      	str	r3, [sp, #0]
 800345a:	697b      	ldr	r3, [r7, #20]
 800345c:	2200      	movs	r2, #0
 800345e:	2180      	movs	r1, #128	; 0x80
 8003460:	68f8      	ldr	r0, [r7, #12]
 8003462:	f000 fa17 	bl	8003894 <UART_WaitOnFlagUntilTimeout>
 8003466:	4603      	mov	r3, r0
 8003468:	2b00      	cmp	r3, #0
 800346a:	d001      	beq.n	8003470 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800346c:	2303      	movs	r3, #3
 800346e:	e036      	b.n	80034de <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003470:	69fb      	ldr	r3, [r7, #28]
 8003472:	2b00      	cmp	r3, #0
 8003474:	d10b      	bne.n	800348e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003476:	69bb      	ldr	r3, [r7, #24]
 8003478:	881b      	ldrh	r3, [r3, #0]
 800347a:	461a      	mov	r2, r3
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003484:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003486:	69bb      	ldr	r3, [r7, #24]
 8003488:	3302      	adds	r3, #2
 800348a:	61bb      	str	r3, [r7, #24]
 800348c:	e007      	b.n	800349e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800348e:	69fb      	ldr	r3, [r7, #28]
 8003490:	781a      	ldrb	r2, [r3, #0]
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003498:	69fb      	ldr	r3, [r7, #28]
 800349a:	3301      	adds	r3, #1
 800349c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80034a2:	b29b      	uxth	r3, r3
 80034a4:	3b01      	subs	r3, #1
 80034a6:	b29a      	uxth	r2, r3
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80034b0:	b29b      	uxth	r3, r3
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d1cf      	bne.n	8003456 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	9300      	str	r3, [sp, #0]
 80034ba:	697b      	ldr	r3, [r7, #20]
 80034bc:	2200      	movs	r2, #0
 80034be:	2140      	movs	r1, #64	; 0x40
 80034c0:	68f8      	ldr	r0, [r7, #12]
 80034c2:	f000 f9e7 	bl	8003894 <UART_WaitOnFlagUntilTimeout>
 80034c6:	4603      	mov	r3, r0
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d001      	beq.n	80034d0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80034cc:	2303      	movs	r3, #3
 80034ce:	e006      	b.n	80034de <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	2220      	movs	r2, #32
 80034d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80034d8:	2300      	movs	r3, #0
 80034da:	e000      	b.n	80034de <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80034dc:	2302      	movs	r3, #2
  }
}
 80034de:	4618      	mov	r0, r3
 80034e0:	3720      	adds	r7, #32
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bd80      	pop	{r7, pc}
	...

080034e8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b08a      	sub	sp, #40	; 0x28
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	68db      	ldr	r3, [r3, #12]
 80034fe:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	695b      	ldr	r3, [r3, #20]
 8003506:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8003508:	2300      	movs	r3, #0
 800350a:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 800350c:	2300      	movs	r3, #0
 800350e:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003512:	f003 030f 	and.w	r3, r3, #15
 8003516:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8003518:	69bb      	ldr	r3, [r7, #24]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d10d      	bne.n	800353a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800351e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003520:	f003 0320 	and.w	r3, r3, #32
 8003524:	2b00      	cmp	r3, #0
 8003526:	d008      	beq.n	800353a <HAL_UART_IRQHandler+0x52>
 8003528:	6a3b      	ldr	r3, [r7, #32]
 800352a:	f003 0320 	and.w	r3, r3, #32
 800352e:	2b00      	cmp	r3, #0
 8003530:	d003      	beq.n	800353a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003532:	6878      	ldr	r0, [r7, #4]
 8003534:	f000 faa1 	bl	8003a7a <UART_Receive_IT>
      return;
 8003538:	e17c      	b.n	8003834 <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800353a:	69bb      	ldr	r3, [r7, #24]
 800353c:	2b00      	cmp	r3, #0
 800353e:	f000 80b1 	beq.w	80036a4 <HAL_UART_IRQHandler+0x1bc>
 8003542:	69fb      	ldr	r3, [r7, #28]
 8003544:	f003 0301 	and.w	r3, r3, #1
 8003548:	2b00      	cmp	r3, #0
 800354a:	d105      	bne.n	8003558 <HAL_UART_IRQHandler+0x70>
 800354c:	6a3b      	ldr	r3, [r7, #32]
 800354e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003552:	2b00      	cmp	r3, #0
 8003554:	f000 80a6 	beq.w	80036a4 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800355a:	f003 0301 	and.w	r3, r3, #1
 800355e:	2b00      	cmp	r3, #0
 8003560:	d00a      	beq.n	8003578 <HAL_UART_IRQHandler+0x90>
 8003562:	6a3b      	ldr	r3, [r7, #32]
 8003564:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003568:	2b00      	cmp	r3, #0
 800356a:	d005      	beq.n	8003578 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003570:	f043 0201 	orr.w	r2, r3, #1
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800357a:	f003 0304 	and.w	r3, r3, #4
 800357e:	2b00      	cmp	r3, #0
 8003580:	d00a      	beq.n	8003598 <HAL_UART_IRQHandler+0xb0>
 8003582:	69fb      	ldr	r3, [r7, #28]
 8003584:	f003 0301 	and.w	r3, r3, #1
 8003588:	2b00      	cmp	r3, #0
 800358a:	d005      	beq.n	8003598 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003590:	f043 0202 	orr.w	r2, r3, #2
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800359a:	f003 0302 	and.w	r3, r3, #2
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d00a      	beq.n	80035b8 <HAL_UART_IRQHandler+0xd0>
 80035a2:	69fb      	ldr	r3, [r7, #28]
 80035a4:	f003 0301 	and.w	r3, r3, #1
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d005      	beq.n	80035b8 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035b0:	f043 0204 	orr.w	r2, r3, #4
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80035b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ba:	f003 0308 	and.w	r3, r3, #8
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d00f      	beq.n	80035e2 <HAL_UART_IRQHandler+0xfa>
 80035c2:	6a3b      	ldr	r3, [r7, #32]
 80035c4:	f003 0320 	and.w	r3, r3, #32
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d104      	bne.n	80035d6 <HAL_UART_IRQHandler+0xee>
 80035cc:	69fb      	ldr	r3, [r7, #28]
 80035ce:	f003 0301 	and.w	r3, r3, #1
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d005      	beq.n	80035e2 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035da:	f043 0208 	orr.w	r2, r3, #8
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	f000 811f 	beq.w	800382a <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80035ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ee:	f003 0320 	and.w	r3, r3, #32
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d007      	beq.n	8003606 <HAL_UART_IRQHandler+0x11e>
 80035f6:	6a3b      	ldr	r3, [r7, #32]
 80035f8:	f003 0320 	and.w	r3, r3, #32
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d002      	beq.n	8003606 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8003600:	6878      	ldr	r0, [r7, #4]
 8003602:	f000 fa3a 	bl	8003a7a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	695b      	ldr	r3, [r3, #20]
 800360c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003610:	2b40      	cmp	r3, #64	; 0x40
 8003612:	bf0c      	ite	eq
 8003614:	2301      	moveq	r3, #1
 8003616:	2300      	movne	r3, #0
 8003618:	b2db      	uxtb	r3, r3
 800361a:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003620:	f003 0308 	and.w	r3, r3, #8
 8003624:	2b00      	cmp	r3, #0
 8003626:	d102      	bne.n	800362e <HAL_UART_IRQHandler+0x146>
 8003628:	697b      	ldr	r3, [r7, #20]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d031      	beq.n	8003692 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800362e:	6878      	ldr	r0, [r7, #4]
 8003630:	f000 f97a 	bl	8003928 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	695b      	ldr	r3, [r3, #20]
 800363a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800363e:	2b40      	cmp	r3, #64	; 0x40
 8003640:	d123      	bne.n	800368a <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	695a      	ldr	r2, [r3, #20]
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003650:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003656:	2b00      	cmp	r3, #0
 8003658:	d013      	beq.n	8003682 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800365e:	4a77      	ldr	r2, [pc, #476]	; (800383c <HAL_UART_IRQHandler+0x354>)
 8003660:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003666:	4618      	mov	r0, r3
 8003668:	f7fe f866 	bl	8001738 <HAL_DMA_Abort_IT>
 800366c:	4603      	mov	r3, r0
 800366e:	2b00      	cmp	r3, #0
 8003670:	d016      	beq.n	80036a0 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003676:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003678:	687a      	ldr	r2, [r7, #4]
 800367a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800367c:	4610      	mov	r0, r2
 800367e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003680:	e00e      	b.n	80036a0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003682:	6878      	ldr	r0, [r7, #4]
 8003684:	f000 f8f0 	bl	8003868 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003688:	e00a      	b.n	80036a0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800368a:	6878      	ldr	r0, [r7, #4]
 800368c:	f000 f8ec 	bl	8003868 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003690:	e006      	b.n	80036a0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003692:	6878      	ldr	r0, [r7, #4]
 8003694:	f000 f8e8 	bl	8003868 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2200      	movs	r2, #0
 800369c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800369e:	e0c4      	b.n	800382a <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036a0:	bf00      	nop
    return;
 80036a2:	e0c2      	b.n	800382a <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036a8:	2b01      	cmp	r3, #1
 80036aa:	f040 80a2 	bne.w	80037f2 <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 80036ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036b0:	f003 0310 	and.w	r3, r3, #16
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	f000 809c 	beq.w	80037f2 <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 80036ba:	6a3b      	ldr	r3, [r7, #32]
 80036bc:	f003 0310 	and.w	r3, r3, #16
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	f000 8096 	beq.w	80037f2 <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80036c6:	2300      	movs	r3, #0
 80036c8:	60fb      	str	r3, [r7, #12]
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	60fb      	str	r3, [r7, #12]
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	685b      	ldr	r3, [r3, #4]
 80036d8:	60fb      	str	r3, [r7, #12]
 80036da:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	695b      	ldr	r3, [r3, #20]
 80036e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036e6:	2b40      	cmp	r3, #64	; 0x40
 80036e8:	d14f      	bne.n	800378a <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	685b      	ldr	r3, [r3, #4]
 80036f2:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 80036f4:	8a3b      	ldrh	r3, [r7, #16]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	f000 8099 	beq.w	800382e <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003700:	8a3a      	ldrh	r2, [r7, #16]
 8003702:	429a      	cmp	r2, r3
 8003704:	f080 8093 	bcs.w	800382e <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	8a3a      	ldrh	r2, [r7, #16]
 800370c:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003712:	69db      	ldr	r3, [r3, #28]
 8003714:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003718:	d02b      	beq.n	8003772 <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	68da      	ldr	r2, [r3, #12]
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003728:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	695a      	ldr	r2, [r3, #20]
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f022 0201 	bic.w	r2, r2, #1
 8003738:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	695a      	ldr	r2, [r3, #20]
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003748:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2220      	movs	r2, #32
 800374e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2200      	movs	r2, #0
 8003756:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	68da      	ldr	r2, [r3, #12]
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f022 0210 	bic.w	r2, r2, #16
 8003766:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800376c:	4618      	mov	r0, r3
 800376e:	f7fd ff73 	bl	8001658 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800377a:	b29b      	uxth	r3, r3
 800377c:	1ad3      	subs	r3, r2, r3
 800377e:	b29b      	uxth	r3, r3
 8003780:	4619      	mov	r1, r3
 8003782:	6878      	ldr	r0, [r7, #4]
 8003784:	f000 f87a 	bl	800387c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003788:	e051      	b.n	800382e <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003792:	b29b      	uxth	r3, r3
 8003794:	1ad3      	subs	r3, r2, r3
 8003796:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800379c:	b29b      	uxth	r3, r3
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d047      	beq.n	8003832 <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 80037a2:	8a7b      	ldrh	r3, [r7, #18]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d044      	beq.n	8003832 <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	68da      	ldr	r2, [r3, #12]
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80037b6:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	695a      	ldr	r2, [r3, #20]
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f022 0201 	bic.w	r2, r2, #1
 80037c6:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2220      	movs	r2, #32
 80037cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2200      	movs	r2, #0
 80037d4:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	68da      	ldr	r2, [r3, #12]
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f022 0210 	bic.w	r2, r2, #16
 80037e4:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80037e6:	8a7b      	ldrh	r3, [r7, #18]
 80037e8:	4619      	mov	r1, r3
 80037ea:	6878      	ldr	r0, [r7, #4]
 80037ec:	f000 f846 	bl	800387c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80037f0:	e01f      	b.n	8003832 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80037f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d008      	beq.n	800380e <HAL_UART_IRQHandler+0x326>
 80037fc:	6a3b      	ldr	r3, [r7, #32]
 80037fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003802:	2b00      	cmp	r3, #0
 8003804:	d003      	beq.n	800380e <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 8003806:	6878      	ldr	r0, [r7, #4]
 8003808:	f000 f8cf 	bl	80039aa <UART_Transmit_IT>
    return;
 800380c:	e012      	b.n	8003834 <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800380e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003810:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003814:	2b00      	cmp	r3, #0
 8003816:	d00d      	beq.n	8003834 <HAL_UART_IRQHandler+0x34c>
 8003818:	6a3b      	ldr	r3, [r7, #32]
 800381a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800381e:	2b00      	cmp	r3, #0
 8003820:	d008      	beq.n	8003834 <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 8003822:	6878      	ldr	r0, [r7, #4]
 8003824:	f000 f911 	bl	8003a4a <UART_EndTransmit_IT>
    return;
 8003828:	e004      	b.n	8003834 <HAL_UART_IRQHandler+0x34c>
    return;
 800382a:	bf00      	nop
 800382c:	e002      	b.n	8003834 <HAL_UART_IRQHandler+0x34c>
      return;
 800382e:	bf00      	nop
 8003830:	e000      	b.n	8003834 <HAL_UART_IRQHandler+0x34c>
      return;
 8003832:	bf00      	nop
  }
}
 8003834:	3728      	adds	r7, #40	; 0x28
 8003836:	46bd      	mov	sp, r7
 8003838:	bd80      	pop	{r7, pc}
 800383a:	bf00      	nop
 800383c:	08003983 	.word	0x08003983

08003840 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003840:	b480      	push	{r7}
 8003842:	b083      	sub	sp, #12
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003848:	bf00      	nop
 800384a:	370c      	adds	r7, #12
 800384c:	46bd      	mov	sp, r7
 800384e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003852:	4770      	bx	lr

08003854 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003854:	b480      	push	{r7}
 8003856:	b083      	sub	sp, #12
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800385c:	bf00      	nop
 800385e:	370c      	adds	r7, #12
 8003860:	46bd      	mov	sp, r7
 8003862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003866:	4770      	bx	lr

08003868 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003868:	b480      	push	{r7}
 800386a:	b083      	sub	sp, #12
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003870:	bf00      	nop
 8003872:	370c      	adds	r7, #12
 8003874:	46bd      	mov	sp, r7
 8003876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387a:	4770      	bx	lr

0800387c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800387c:	b480      	push	{r7}
 800387e:	b083      	sub	sp, #12
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
 8003884:	460b      	mov	r3, r1
 8003886:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003888:	bf00      	nop
 800388a:	370c      	adds	r7, #12
 800388c:	46bd      	mov	sp, r7
 800388e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003892:	4770      	bx	lr

08003894 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	b084      	sub	sp, #16
 8003898:	af00      	add	r7, sp, #0
 800389a:	60f8      	str	r0, [r7, #12]
 800389c:	60b9      	str	r1, [r7, #8]
 800389e:	603b      	str	r3, [r7, #0]
 80038a0:	4613      	mov	r3, r2
 80038a2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80038a4:	e02c      	b.n	8003900 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038a6:	69bb      	ldr	r3, [r7, #24]
 80038a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038ac:	d028      	beq.n	8003900 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80038ae:	69bb      	ldr	r3, [r7, #24]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d007      	beq.n	80038c4 <UART_WaitOnFlagUntilTimeout+0x30>
 80038b4:	f7fd fb70 	bl	8000f98 <HAL_GetTick>
 80038b8:	4602      	mov	r2, r0
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	1ad3      	subs	r3, r2, r3
 80038be:	69ba      	ldr	r2, [r7, #24]
 80038c0:	429a      	cmp	r2, r3
 80038c2:	d21d      	bcs.n	8003900 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	68da      	ldr	r2, [r3, #12]
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80038d2:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	695a      	ldr	r2, [r3, #20]
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f022 0201 	bic.w	r2, r2, #1
 80038e2:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	2220      	movs	r2, #32
 80038e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	2220      	movs	r2, #32
 80038f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	2200      	movs	r2, #0
 80038f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80038fc:	2303      	movs	r3, #3
 80038fe:	e00f      	b.n	8003920 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	681a      	ldr	r2, [r3, #0]
 8003906:	68bb      	ldr	r3, [r7, #8]
 8003908:	4013      	ands	r3, r2
 800390a:	68ba      	ldr	r2, [r7, #8]
 800390c:	429a      	cmp	r2, r3
 800390e:	bf0c      	ite	eq
 8003910:	2301      	moveq	r3, #1
 8003912:	2300      	movne	r3, #0
 8003914:	b2db      	uxtb	r3, r3
 8003916:	461a      	mov	r2, r3
 8003918:	79fb      	ldrb	r3, [r7, #7]
 800391a:	429a      	cmp	r2, r3
 800391c:	d0c3      	beq.n	80038a6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800391e:	2300      	movs	r3, #0
}
 8003920:	4618      	mov	r0, r3
 8003922:	3710      	adds	r7, #16
 8003924:	46bd      	mov	sp, r7
 8003926:	bd80      	pop	{r7, pc}

08003928 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003928:	b480      	push	{r7}
 800392a:	b083      	sub	sp, #12
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	68da      	ldr	r2, [r3, #12]
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800393e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	695a      	ldr	r2, [r3, #20]
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f022 0201 	bic.w	r2, r2, #1
 800394e:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003954:	2b01      	cmp	r3, #1
 8003956:	d107      	bne.n	8003968 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	68da      	ldr	r2, [r3, #12]
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f022 0210 	bic.w	r2, r2, #16
 8003966:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2220      	movs	r2, #32
 800396c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2200      	movs	r2, #0
 8003974:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003976:	bf00      	nop
 8003978:	370c      	adds	r7, #12
 800397a:	46bd      	mov	sp, r7
 800397c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003980:	4770      	bx	lr

08003982 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003982:	b580      	push	{r7, lr}
 8003984:	b084      	sub	sp, #16
 8003986:	af00      	add	r7, sp, #0
 8003988:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800398e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	2200      	movs	r2, #0
 8003994:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	2200      	movs	r2, #0
 800399a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800399c:	68f8      	ldr	r0, [r7, #12]
 800399e:	f7ff ff63 	bl	8003868 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80039a2:	bf00      	nop
 80039a4:	3710      	adds	r7, #16
 80039a6:	46bd      	mov	sp, r7
 80039a8:	bd80      	pop	{r7, pc}

080039aa <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80039aa:	b480      	push	{r7}
 80039ac:	b085      	sub	sp, #20
 80039ae:	af00      	add	r7, sp, #0
 80039b0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039b8:	b2db      	uxtb	r3, r3
 80039ba:	2b21      	cmp	r3, #33	; 0x21
 80039bc:	d13e      	bne.n	8003a3c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	689b      	ldr	r3, [r3, #8]
 80039c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039c6:	d114      	bne.n	80039f2 <UART_Transmit_IT+0x48>
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	691b      	ldr	r3, [r3, #16]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d110      	bne.n	80039f2 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6a1b      	ldr	r3, [r3, #32]
 80039d4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	881b      	ldrh	r3, [r3, #0]
 80039da:	461a      	mov	r2, r3
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80039e4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6a1b      	ldr	r3, [r3, #32]
 80039ea:	1c9a      	adds	r2, r3, #2
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	621a      	str	r2, [r3, #32]
 80039f0:	e008      	b.n	8003a04 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6a1b      	ldr	r3, [r3, #32]
 80039f6:	1c59      	adds	r1, r3, #1
 80039f8:	687a      	ldr	r2, [r7, #4]
 80039fa:	6211      	str	r1, [r2, #32]
 80039fc:	781a      	ldrb	r2, [r3, #0]
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003a08:	b29b      	uxth	r3, r3
 8003a0a:	3b01      	subs	r3, #1
 8003a0c:	b29b      	uxth	r3, r3
 8003a0e:	687a      	ldr	r2, [r7, #4]
 8003a10:	4619      	mov	r1, r3
 8003a12:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d10f      	bne.n	8003a38 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	68da      	ldr	r2, [r3, #12]
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003a26:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	68da      	ldr	r2, [r3, #12]
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003a36:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003a38:	2300      	movs	r3, #0
 8003a3a:	e000      	b.n	8003a3e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003a3c:	2302      	movs	r3, #2
  }
}
 8003a3e:	4618      	mov	r0, r3
 8003a40:	3714      	adds	r7, #20
 8003a42:	46bd      	mov	sp, r7
 8003a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a48:	4770      	bx	lr

08003a4a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003a4a:	b580      	push	{r7, lr}
 8003a4c:	b082      	sub	sp, #8
 8003a4e:	af00      	add	r7, sp, #0
 8003a50:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	68da      	ldr	r2, [r3, #12]
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a60:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2220      	movs	r2, #32
 8003a66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003a6a:	6878      	ldr	r0, [r7, #4]
 8003a6c:	f7ff fee8 	bl	8003840 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003a70:	2300      	movs	r3, #0
}
 8003a72:	4618      	mov	r0, r3
 8003a74:	3708      	adds	r7, #8
 8003a76:	46bd      	mov	sp, r7
 8003a78:	bd80      	pop	{r7, pc}

08003a7a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003a7a:	b580      	push	{r7, lr}
 8003a7c:	b084      	sub	sp, #16
 8003a7e:	af00      	add	r7, sp, #0
 8003a80:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003a88:	b2db      	uxtb	r3, r3
 8003a8a:	2b22      	cmp	r3, #34	; 0x22
 8003a8c:	f040 8087 	bne.w	8003b9e <UART_Receive_IT+0x124>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	689b      	ldr	r3, [r3, #8]
 8003a94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a98:	d117      	bne.n	8003aca <UART_Receive_IT+0x50>
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	691b      	ldr	r3, [r3, #16]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d113      	bne.n	8003aca <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aaa:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	685b      	ldr	r3, [r3, #4]
 8003ab2:	b29b      	uxth	r3, r3
 8003ab4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ab8:	b29a      	uxth	r2, r3
 8003aba:	68bb      	ldr	r3, [r7, #8]
 8003abc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ac2:	1c9a      	adds	r2, r3, #2
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	629a      	str	r2, [r3, #40]	; 0x28
 8003ac8:	e026      	b.n	8003b18 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ace:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	689b      	ldr	r3, [r3, #8]
 8003ad8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003adc:	d007      	beq.n	8003aee <UART_Receive_IT+0x74>
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	689b      	ldr	r3, [r3, #8]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d10a      	bne.n	8003afc <UART_Receive_IT+0x82>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	691b      	ldr	r3, [r3, #16]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d106      	bne.n	8003afc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	685b      	ldr	r3, [r3, #4]
 8003af4:	b2da      	uxtb	r2, r3
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	701a      	strb	r2, [r3, #0]
 8003afa:	e008      	b.n	8003b0e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	685b      	ldr	r3, [r3, #4]
 8003b02:	b2db      	uxtb	r3, r3
 8003b04:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003b08:	b2da      	uxtb	r2, r3
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b12:	1c5a      	adds	r2, r3, #1
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003b1c:	b29b      	uxth	r3, r3
 8003b1e:	3b01      	subs	r3, #1
 8003b20:	b29b      	uxth	r3, r3
 8003b22:	687a      	ldr	r2, [r7, #4]
 8003b24:	4619      	mov	r1, r3
 8003b26:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d136      	bne.n	8003b9a <UART_Receive_IT+0x120>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	68da      	ldr	r2, [r3, #12]
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f022 0220 	bic.w	r2, r2, #32
 8003b3a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	68da      	ldr	r2, [r3, #12]
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003b4a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	695a      	ldr	r2, [r3, #20]
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f022 0201 	bic.w	r2, r2, #1
 8003b5a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2220      	movs	r2, #32
 8003b60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b68:	2b01      	cmp	r3, #1
 8003b6a:	d10e      	bne.n	8003b8a <UART_Receive_IT+0x110>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	68da      	ldr	r2, [r3, #12]
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f022 0210 	bic.w	r2, r2, #16
 8003b7a:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003b80:	4619      	mov	r1, r3
 8003b82:	6878      	ldr	r0, [r7, #4]
 8003b84:	f7ff fe7a 	bl	800387c <HAL_UARTEx_RxEventCallback>
 8003b88:	e002      	b.n	8003b90 <UART_Receive_IT+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8003b8a:	6878      	ldr	r0, [r7, #4]
 8003b8c:	f7ff fe62 	bl	8003854 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2200      	movs	r2, #0
 8003b94:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_OK;
 8003b96:	2300      	movs	r3, #0
 8003b98:	e002      	b.n	8003ba0 <UART_Receive_IT+0x126>
    }
    return HAL_OK;
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	e000      	b.n	8003ba0 <UART_Receive_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
 8003b9e:	2302      	movs	r3, #2
  }
}
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	3710      	adds	r7, #16
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	bd80      	pop	{r7, pc}

08003ba8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ba8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003bac:	b09f      	sub	sp, #124	; 0x7c
 8003bae:	af00      	add	r7, sp, #0
 8003bb0:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003bb2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	691b      	ldr	r3, [r3, #16]
 8003bb8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003bbc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003bbe:	68d9      	ldr	r1, [r3, #12]
 8003bc0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003bc2:	681a      	ldr	r2, [r3, #0]
 8003bc4:	ea40 0301 	orr.w	r3, r0, r1
 8003bc8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003bca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003bcc:	689a      	ldr	r2, [r3, #8]
 8003bce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003bd0:	691b      	ldr	r3, [r3, #16]
 8003bd2:	431a      	orrs	r2, r3
 8003bd4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003bd6:	695b      	ldr	r3, [r3, #20]
 8003bd8:	431a      	orrs	r2, r3
 8003bda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003bdc:	69db      	ldr	r3, [r3, #28]
 8003bde:	4313      	orrs	r3, r2
 8003be0:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8003be2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	68db      	ldr	r3, [r3, #12]
 8003be8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003bec:	f021 010c 	bic.w	r1, r1, #12
 8003bf0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003bf2:	681a      	ldr	r2, [r3, #0]
 8003bf4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003bf6:	430b      	orrs	r3, r1
 8003bf8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003bfa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	695b      	ldr	r3, [r3, #20]
 8003c00:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003c04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c06:	6999      	ldr	r1, [r3, #24]
 8003c08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c0a:	681a      	ldr	r2, [r3, #0]
 8003c0c:	ea40 0301 	orr.w	r3, r0, r1
 8003c10:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003c12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c14:	681a      	ldr	r2, [r3, #0]
 8003c16:	4bc5      	ldr	r3, [pc, #788]	; (8003f2c <UART_SetConfig+0x384>)
 8003c18:	429a      	cmp	r2, r3
 8003c1a:	d004      	beq.n	8003c26 <UART_SetConfig+0x7e>
 8003c1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c1e:	681a      	ldr	r2, [r3, #0]
 8003c20:	4bc3      	ldr	r3, [pc, #780]	; (8003f30 <UART_SetConfig+0x388>)
 8003c22:	429a      	cmp	r2, r3
 8003c24:	d103      	bne.n	8003c2e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003c26:	f7fe fba7 	bl	8002378 <HAL_RCC_GetPCLK2Freq>
 8003c2a:	6778      	str	r0, [r7, #116]	; 0x74
 8003c2c:	e002      	b.n	8003c34 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003c2e:	f7fe fb8f 	bl	8002350 <HAL_RCC_GetPCLK1Freq>
 8003c32:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003c34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c36:	69db      	ldr	r3, [r3, #28]
 8003c38:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c3c:	f040 80b6 	bne.w	8003dac <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003c40:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c42:	461c      	mov	r4, r3
 8003c44:	f04f 0500 	mov.w	r5, #0
 8003c48:	4622      	mov	r2, r4
 8003c4a:	462b      	mov	r3, r5
 8003c4c:	1891      	adds	r1, r2, r2
 8003c4e:	6439      	str	r1, [r7, #64]	; 0x40
 8003c50:	415b      	adcs	r3, r3
 8003c52:	647b      	str	r3, [r7, #68]	; 0x44
 8003c54:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003c58:	1912      	adds	r2, r2, r4
 8003c5a:	eb45 0303 	adc.w	r3, r5, r3
 8003c5e:	f04f 0000 	mov.w	r0, #0
 8003c62:	f04f 0100 	mov.w	r1, #0
 8003c66:	00d9      	lsls	r1, r3, #3
 8003c68:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003c6c:	00d0      	lsls	r0, r2, #3
 8003c6e:	4602      	mov	r2, r0
 8003c70:	460b      	mov	r3, r1
 8003c72:	1911      	adds	r1, r2, r4
 8003c74:	6639      	str	r1, [r7, #96]	; 0x60
 8003c76:	416b      	adcs	r3, r5
 8003c78:	667b      	str	r3, [r7, #100]	; 0x64
 8003c7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c7c:	685b      	ldr	r3, [r3, #4]
 8003c7e:	461a      	mov	r2, r3
 8003c80:	f04f 0300 	mov.w	r3, #0
 8003c84:	1891      	adds	r1, r2, r2
 8003c86:	63b9      	str	r1, [r7, #56]	; 0x38
 8003c88:	415b      	adcs	r3, r3
 8003c8a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c8c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003c90:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8003c94:	f7fc faa4 	bl	80001e0 <__aeabi_uldivmod>
 8003c98:	4602      	mov	r2, r0
 8003c9a:	460b      	mov	r3, r1
 8003c9c:	4ba5      	ldr	r3, [pc, #660]	; (8003f34 <UART_SetConfig+0x38c>)
 8003c9e:	fba3 2302 	umull	r2, r3, r3, r2
 8003ca2:	095b      	lsrs	r3, r3, #5
 8003ca4:	011e      	lsls	r6, r3, #4
 8003ca6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003ca8:	461c      	mov	r4, r3
 8003caa:	f04f 0500 	mov.w	r5, #0
 8003cae:	4622      	mov	r2, r4
 8003cb0:	462b      	mov	r3, r5
 8003cb2:	1891      	adds	r1, r2, r2
 8003cb4:	6339      	str	r1, [r7, #48]	; 0x30
 8003cb6:	415b      	adcs	r3, r3
 8003cb8:	637b      	str	r3, [r7, #52]	; 0x34
 8003cba:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003cbe:	1912      	adds	r2, r2, r4
 8003cc0:	eb45 0303 	adc.w	r3, r5, r3
 8003cc4:	f04f 0000 	mov.w	r0, #0
 8003cc8:	f04f 0100 	mov.w	r1, #0
 8003ccc:	00d9      	lsls	r1, r3, #3
 8003cce:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003cd2:	00d0      	lsls	r0, r2, #3
 8003cd4:	4602      	mov	r2, r0
 8003cd6:	460b      	mov	r3, r1
 8003cd8:	1911      	adds	r1, r2, r4
 8003cda:	65b9      	str	r1, [r7, #88]	; 0x58
 8003cdc:	416b      	adcs	r3, r5
 8003cde:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003ce0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ce2:	685b      	ldr	r3, [r3, #4]
 8003ce4:	461a      	mov	r2, r3
 8003ce6:	f04f 0300 	mov.w	r3, #0
 8003cea:	1891      	adds	r1, r2, r2
 8003cec:	62b9      	str	r1, [r7, #40]	; 0x28
 8003cee:	415b      	adcs	r3, r3
 8003cf0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003cf2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003cf6:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8003cfa:	f7fc fa71 	bl	80001e0 <__aeabi_uldivmod>
 8003cfe:	4602      	mov	r2, r0
 8003d00:	460b      	mov	r3, r1
 8003d02:	4b8c      	ldr	r3, [pc, #560]	; (8003f34 <UART_SetConfig+0x38c>)
 8003d04:	fba3 1302 	umull	r1, r3, r3, r2
 8003d08:	095b      	lsrs	r3, r3, #5
 8003d0a:	2164      	movs	r1, #100	; 0x64
 8003d0c:	fb01 f303 	mul.w	r3, r1, r3
 8003d10:	1ad3      	subs	r3, r2, r3
 8003d12:	00db      	lsls	r3, r3, #3
 8003d14:	3332      	adds	r3, #50	; 0x32
 8003d16:	4a87      	ldr	r2, [pc, #540]	; (8003f34 <UART_SetConfig+0x38c>)
 8003d18:	fba2 2303 	umull	r2, r3, r2, r3
 8003d1c:	095b      	lsrs	r3, r3, #5
 8003d1e:	005b      	lsls	r3, r3, #1
 8003d20:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003d24:	441e      	add	r6, r3
 8003d26:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003d28:	4618      	mov	r0, r3
 8003d2a:	f04f 0100 	mov.w	r1, #0
 8003d2e:	4602      	mov	r2, r0
 8003d30:	460b      	mov	r3, r1
 8003d32:	1894      	adds	r4, r2, r2
 8003d34:	623c      	str	r4, [r7, #32]
 8003d36:	415b      	adcs	r3, r3
 8003d38:	627b      	str	r3, [r7, #36]	; 0x24
 8003d3a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003d3e:	1812      	adds	r2, r2, r0
 8003d40:	eb41 0303 	adc.w	r3, r1, r3
 8003d44:	f04f 0400 	mov.w	r4, #0
 8003d48:	f04f 0500 	mov.w	r5, #0
 8003d4c:	00dd      	lsls	r5, r3, #3
 8003d4e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003d52:	00d4      	lsls	r4, r2, #3
 8003d54:	4622      	mov	r2, r4
 8003d56:	462b      	mov	r3, r5
 8003d58:	1814      	adds	r4, r2, r0
 8003d5a:	653c      	str	r4, [r7, #80]	; 0x50
 8003d5c:	414b      	adcs	r3, r1
 8003d5e:	657b      	str	r3, [r7, #84]	; 0x54
 8003d60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d62:	685b      	ldr	r3, [r3, #4]
 8003d64:	461a      	mov	r2, r3
 8003d66:	f04f 0300 	mov.w	r3, #0
 8003d6a:	1891      	adds	r1, r2, r2
 8003d6c:	61b9      	str	r1, [r7, #24]
 8003d6e:	415b      	adcs	r3, r3
 8003d70:	61fb      	str	r3, [r7, #28]
 8003d72:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003d76:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8003d7a:	f7fc fa31 	bl	80001e0 <__aeabi_uldivmod>
 8003d7e:	4602      	mov	r2, r0
 8003d80:	460b      	mov	r3, r1
 8003d82:	4b6c      	ldr	r3, [pc, #432]	; (8003f34 <UART_SetConfig+0x38c>)
 8003d84:	fba3 1302 	umull	r1, r3, r3, r2
 8003d88:	095b      	lsrs	r3, r3, #5
 8003d8a:	2164      	movs	r1, #100	; 0x64
 8003d8c:	fb01 f303 	mul.w	r3, r1, r3
 8003d90:	1ad3      	subs	r3, r2, r3
 8003d92:	00db      	lsls	r3, r3, #3
 8003d94:	3332      	adds	r3, #50	; 0x32
 8003d96:	4a67      	ldr	r2, [pc, #412]	; (8003f34 <UART_SetConfig+0x38c>)
 8003d98:	fba2 2303 	umull	r2, r3, r2, r3
 8003d9c:	095b      	lsrs	r3, r3, #5
 8003d9e:	f003 0207 	and.w	r2, r3, #7
 8003da2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	4432      	add	r2, r6
 8003da8:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003daa:	e0b9      	b.n	8003f20 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003dac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003dae:	461c      	mov	r4, r3
 8003db0:	f04f 0500 	mov.w	r5, #0
 8003db4:	4622      	mov	r2, r4
 8003db6:	462b      	mov	r3, r5
 8003db8:	1891      	adds	r1, r2, r2
 8003dba:	6139      	str	r1, [r7, #16]
 8003dbc:	415b      	adcs	r3, r3
 8003dbe:	617b      	str	r3, [r7, #20]
 8003dc0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003dc4:	1912      	adds	r2, r2, r4
 8003dc6:	eb45 0303 	adc.w	r3, r5, r3
 8003dca:	f04f 0000 	mov.w	r0, #0
 8003dce:	f04f 0100 	mov.w	r1, #0
 8003dd2:	00d9      	lsls	r1, r3, #3
 8003dd4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003dd8:	00d0      	lsls	r0, r2, #3
 8003dda:	4602      	mov	r2, r0
 8003ddc:	460b      	mov	r3, r1
 8003dde:	eb12 0804 	adds.w	r8, r2, r4
 8003de2:	eb43 0905 	adc.w	r9, r3, r5
 8003de6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003de8:	685b      	ldr	r3, [r3, #4]
 8003dea:	4618      	mov	r0, r3
 8003dec:	f04f 0100 	mov.w	r1, #0
 8003df0:	f04f 0200 	mov.w	r2, #0
 8003df4:	f04f 0300 	mov.w	r3, #0
 8003df8:	008b      	lsls	r3, r1, #2
 8003dfa:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003dfe:	0082      	lsls	r2, r0, #2
 8003e00:	4640      	mov	r0, r8
 8003e02:	4649      	mov	r1, r9
 8003e04:	f7fc f9ec 	bl	80001e0 <__aeabi_uldivmod>
 8003e08:	4602      	mov	r2, r0
 8003e0a:	460b      	mov	r3, r1
 8003e0c:	4b49      	ldr	r3, [pc, #292]	; (8003f34 <UART_SetConfig+0x38c>)
 8003e0e:	fba3 2302 	umull	r2, r3, r3, r2
 8003e12:	095b      	lsrs	r3, r3, #5
 8003e14:	011e      	lsls	r6, r3, #4
 8003e16:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e18:	4618      	mov	r0, r3
 8003e1a:	f04f 0100 	mov.w	r1, #0
 8003e1e:	4602      	mov	r2, r0
 8003e20:	460b      	mov	r3, r1
 8003e22:	1894      	adds	r4, r2, r2
 8003e24:	60bc      	str	r4, [r7, #8]
 8003e26:	415b      	adcs	r3, r3
 8003e28:	60fb      	str	r3, [r7, #12]
 8003e2a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003e2e:	1812      	adds	r2, r2, r0
 8003e30:	eb41 0303 	adc.w	r3, r1, r3
 8003e34:	f04f 0400 	mov.w	r4, #0
 8003e38:	f04f 0500 	mov.w	r5, #0
 8003e3c:	00dd      	lsls	r5, r3, #3
 8003e3e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003e42:	00d4      	lsls	r4, r2, #3
 8003e44:	4622      	mov	r2, r4
 8003e46:	462b      	mov	r3, r5
 8003e48:	1814      	adds	r4, r2, r0
 8003e4a:	64bc      	str	r4, [r7, #72]	; 0x48
 8003e4c:	414b      	adcs	r3, r1
 8003e4e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003e50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e52:	685b      	ldr	r3, [r3, #4]
 8003e54:	4618      	mov	r0, r3
 8003e56:	f04f 0100 	mov.w	r1, #0
 8003e5a:	f04f 0200 	mov.w	r2, #0
 8003e5e:	f04f 0300 	mov.w	r3, #0
 8003e62:	008b      	lsls	r3, r1, #2
 8003e64:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003e68:	0082      	lsls	r2, r0, #2
 8003e6a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8003e6e:	f7fc f9b7 	bl	80001e0 <__aeabi_uldivmod>
 8003e72:	4602      	mov	r2, r0
 8003e74:	460b      	mov	r3, r1
 8003e76:	4b2f      	ldr	r3, [pc, #188]	; (8003f34 <UART_SetConfig+0x38c>)
 8003e78:	fba3 1302 	umull	r1, r3, r3, r2
 8003e7c:	095b      	lsrs	r3, r3, #5
 8003e7e:	2164      	movs	r1, #100	; 0x64
 8003e80:	fb01 f303 	mul.w	r3, r1, r3
 8003e84:	1ad3      	subs	r3, r2, r3
 8003e86:	011b      	lsls	r3, r3, #4
 8003e88:	3332      	adds	r3, #50	; 0x32
 8003e8a:	4a2a      	ldr	r2, [pc, #168]	; (8003f34 <UART_SetConfig+0x38c>)
 8003e8c:	fba2 2303 	umull	r2, r3, r2, r3
 8003e90:	095b      	lsrs	r3, r3, #5
 8003e92:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e96:	441e      	add	r6, r3
 8003e98:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	f04f 0100 	mov.w	r1, #0
 8003ea0:	4602      	mov	r2, r0
 8003ea2:	460b      	mov	r3, r1
 8003ea4:	1894      	adds	r4, r2, r2
 8003ea6:	603c      	str	r4, [r7, #0]
 8003ea8:	415b      	adcs	r3, r3
 8003eaa:	607b      	str	r3, [r7, #4]
 8003eac:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003eb0:	1812      	adds	r2, r2, r0
 8003eb2:	eb41 0303 	adc.w	r3, r1, r3
 8003eb6:	f04f 0400 	mov.w	r4, #0
 8003eba:	f04f 0500 	mov.w	r5, #0
 8003ebe:	00dd      	lsls	r5, r3, #3
 8003ec0:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003ec4:	00d4      	lsls	r4, r2, #3
 8003ec6:	4622      	mov	r2, r4
 8003ec8:	462b      	mov	r3, r5
 8003eca:	eb12 0a00 	adds.w	sl, r2, r0
 8003ece:	eb43 0b01 	adc.w	fp, r3, r1
 8003ed2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ed4:	685b      	ldr	r3, [r3, #4]
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	f04f 0100 	mov.w	r1, #0
 8003edc:	f04f 0200 	mov.w	r2, #0
 8003ee0:	f04f 0300 	mov.w	r3, #0
 8003ee4:	008b      	lsls	r3, r1, #2
 8003ee6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003eea:	0082      	lsls	r2, r0, #2
 8003eec:	4650      	mov	r0, sl
 8003eee:	4659      	mov	r1, fp
 8003ef0:	f7fc f976 	bl	80001e0 <__aeabi_uldivmod>
 8003ef4:	4602      	mov	r2, r0
 8003ef6:	460b      	mov	r3, r1
 8003ef8:	4b0e      	ldr	r3, [pc, #56]	; (8003f34 <UART_SetConfig+0x38c>)
 8003efa:	fba3 1302 	umull	r1, r3, r3, r2
 8003efe:	095b      	lsrs	r3, r3, #5
 8003f00:	2164      	movs	r1, #100	; 0x64
 8003f02:	fb01 f303 	mul.w	r3, r1, r3
 8003f06:	1ad3      	subs	r3, r2, r3
 8003f08:	011b      	lsls	r3, r3, #4
 8003f0a:	3332      	adds	r3, #50	; 0x32
 8003f0c:	4a09      	ldr	r2, [pc, #36]	; (8003f34 <UART_SetConfig+0x38c>)
 8003f0e:	fba2 2303 	umull	r2, r3, r2, r3
 8003f12:	095b      	lsrs	r3, r3, #5
 8003f14:	f003 020f 	and.w	r2, r3, #15
 8003f18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	4432      	add	r2, r6
 8003f1e:	609a      	str	r2, [r3, #8]
}
 8003f20:	bf00      	nop
 8003f22:	377c      	adds	r7, #124	; 0x7c
 8003f24:	46bd      	mov	sp, r7
 8003f26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f2a:	bf00      	nop
 8003f2c:	40011000 	.word	0x40011000
 8003f30:	40011400 	.word	0x40011400
 8003f34:	51eb851f 	.word	0x51eb851f

08003f38 <__NVIC_SetPriority>:
{
 8003f38:	b480      	push	{r7}
 8003f3a:	b083      	sub	sp, #12
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	4603      	mov	r3, r0
 8003f40:	6039      	str	r1, [r7, #0]
 8003f42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003f44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	db0a      	blt.n	8003f62 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	b2da      	uxtb	r2, r3
 8003f50:	490c      	ldr	r1, [pc, #48]	; (8003f84 <__NVIC_SetPriority+0x4c>)
 8003f52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f56:	0112      	lsls	r2, r2, #4
 8003f58:	b2d2      	uxtb	r2, r2
 8003f5a:	440b      	add	r3, r1
 8003f5c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003f60:	e00a      	b.n	8003f78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	b2da      	uxtb	r2, r3
 8003f66:	4908      	ldr	r1, [pc, #32]	; (8003f88 <__NVIC_SetPriority+0x50>)
 8003f68:	79fb      	ldrb	r3, [r7, #7]
 8003f6a:	f003 030f 	and.w	r3, r3, #15
 8003f6e:	3b04      	subs	r3, #4
 8003f70:	0112      	lsls	r2, r2, #4
 8003f72:	b2d2      	uxtb	r2, r2
 8003f74:	440b      	add	r3, r1
 8003f76:	761a      	strb	r2, [r3, #24]
}
 8003f78:	bf00      	nop
 8003f7a:	370c      	adds	r7, #12
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f82:	4770      	bx	lr
 8003f84:	e000e100 	.word	0xe000e100
 8003f88:	e000ed00 	.word	0xe000ed00

08003f8c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8003f90:	4b05      	ldr	r3, [pc, #20]	; (8003fa8 <SysTick_Handler+0x1c>)
 8003f92:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8003f94:	f001 fcfe 	bl	8005994 <xTaskGetSchedulerState>
 8003f98:	4603      	mov	r3, r0
 8003f9a:	2b01      	cmp	r3, #1
 8003f9c:	d001      	beq.n	8003fa2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8003f9e:	f002 fae3 	bl	8006568 <xPortSysTickHandler>
  }
}
 8003fa2:	bf00      	nop
 8003fa4:	bd80      	pop	{r7, pc}
 8003fa6:	bf00      	nop
 8003fa8:	e000e010 	.word	0xe000e010

08003fac <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003fac:	b580      	push	{r7, lr}
 8003fae:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8003fb0:	2100      	movs	r1, #0
 8003fb2:	f06f 0004 	mvn.w	r0, #4
 8003fb6:	f7ff ffbf 	bl	8003f38 <__NVIC_SetPriority>
#endif
}
 8003fba:	bf00      	nop
 8003fbc:	bd80      	pop	{r7, pc}
	...

08003fc0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003fc0:	b480      	push	{r7}
 8003fc2:	b083      	sub	sp, #12
 8003fc4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003fc6:	f3ef 8305 	mrs	r3, IPSR
 8003fca:	603b      	str	r3, [r7, #0]
  return(result);
 8003fcc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d003      	beq.n	8003fda <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8003fd2:	f06f 0305 	mvn.w	r3, #5
 8003fd6:	607b      	str	r3, [r7, #4]
 8003fd8:	e00c      	b.n	8003ff4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003fda:	4b0a      	ldr	r3, [pc, #40]	; (8004004 <osKernelInitialize+0x44>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d105      	bne.n	8003fee <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8003fe2:	4b08      	ldr	r3, [pc, #32]	; (8004004 <osKernelInitialize+0x44>)
 8003fe4:	2201      	movs	r2, #1
 8003fe6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003fe8:	2300      	movs	r3, #0
 8003fea:	607b      	str	r3, [r7, #4]
 8003fec:	e002      	b.n	8003ff4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8003fee:	f04f 33ff 	mov.w	r3, #4294967295
 8003ff2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003ff4:	687b      	ldr	r3, [r7, #4]
}
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	370c      	adds	r7, #12
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004000:	4770      	bx	lr
 8004002:	bf00      	nop
 8004004:	2000002c 	.word	0x2000002c

08004008 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004008:	b580      	push	{r7, lr}
 800400a:	b082      	sub	sp, #8
 800400c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800400e:	f3ef 8305 	mrs	r3, IPSR
 8004012:	603b      	str	r3, [r7, #0]
  return(result);
 8004014:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004016:	2b00      	cmp	r3, #0
 8004018:	d003      	beq.n	8004022 <osKernelStart+0x1a>
    stat = osErrorISR;
 800401a:	f06f 0305 	mvn.w	r3, #5
 800401e:	607b      	str	r3, [r7, #4]
 8004020:	e010      	b.n	8004044 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8004022:	4b0b      	ldr	r3, [pc, #44]	; (8004050 <osKernelStart+0x48>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	2b01      	cmp	r3, #1
 8004028:	d109      	bne.n	800403e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800402a:	f7ff ffbf 	bl	8003fac <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800402e:	4b08      	ldr	r3, [pc, #32]	; (8004050 <osKernelStart+0x48>)
 8004030:	2202      	movs	r2, #2
 8004032:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004034:	f001 f866 	bl	8005104 <vTaskStartScheduler>
      stat = osOK;
 8004038:	2300      	movs	r3, #0
 800403a:	607b      	str	r3, [r7, #4]
 800403c:	e002      	b.n	8004044 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800403e:	f04f 33ff 	mov.w	r3, #4294967295
 8004042:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004044:	687b      	ldr	r3, [r7, #4]
}
 8004046:	4618      	mov	r0, r3
 8004048:	3708      	adds	r7, #8
 800404a:	46bd      	mov	sp, r7
 800404c:	bd80      	pop	{r7, pc}
 800404e:	bf00      	nop
 8004050:	2000002c 	.word	0x2000002c

08004054 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004054:	b580      	push	{r7, lr}
 8004056:	b08e      	sub	sp, #56	; 0x38
 8004058:	af04      	add	r7, sp, #16
 800405a:	60f8      	str	r0, [r7, #12]
 800405c:	60b9      	str	r1, [r7, #8]
 800405e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004060:	2300      	movs	r3, #0
 8004062:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004064:	f3ef 8305 	mrs	r3, IPSR
 8004068:	617b      	str	r3, [r7, #20]
  return(result);
 800406a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800406c:	2b00      	cmp	r3, #0
 800406e:	d17e      	bne.n	800416e <osThreadNew+0x11a>
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	2b00      	cmp	r3, #0
 8004074:	d07b      	beq.n	800416e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8004076:	2380      	movs	r3, #128	; 0x80
 8004078:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800407a:	2318      	movs	r3, #24
 800407c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800407e:	2300      	movs	r3, #0
 8004080:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8004082:	f04f 33ff 	mov.w	r3, #4294967295
 8004086:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d045      	beq.n	800411a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d002      	beq.n	800409c <osThreadNew+0x48>
        name = attr->name;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	699b      	ldr	r3, [r3, #24]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d002      	beq.n	80040aa <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	699b      	ldr	r3, [r3, #24]
 80040a8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80040aa:	69fb      	ldr	r3, [r7, #28]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d008      	beq.n	80040c2 <osThreadNew+0x6e>
 80040b0:	69fb      	ldr	r3, [r7, #28]
 80040b2:	2b38      	cmp	r3, #56	; 0x38
 80040b4:	d805      	bhi.n	80040c2 <osThreadNew+0x6e>
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	685b      	ldr	r3, [r3, #4]
 80040ba:	f003 0301 	and.w	r3, r3, #1
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d001      	beq.n	80040c6 <osThreadNew+0x72>
        return (NULL);
 80040c2:	2300      	movs	r3, #0
 80040c4:	e054      	b.n	8004170 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	695b      	ldr	r3, [r3, #20]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d003      	beq.n	80040d6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	695b      	ldr	r3, [r3, #20]
 80040d2:	089b      	lsrs	r3, r3, #2
 80040d4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	689b      	ldr	r3, [r3, #8]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d00e      	beq.n	80040fc <osThreadNew+0xa8>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	68db      	ldr	r3, [r3, #12]
 80040e2:	2b5b      	cmp	r3, #91	; 0x5b
 80040e4:	d90a      	bls.n	80040fc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d006      	beq.n	80040fc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	695b      	ldr	r3, [r3, #20]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d002      	beq.n	80040fc <osThreadNew+0xa8>
        mem = 1;
 80040f6:	2301      	movs	r3, #1
 80040f8:	61bb      	str	r3, [r7, #24]
 80040fa:	e010      	b.n	800411e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	689b      	ldr	r3, [r3, #8]
 8004100:	2b00      	cmp	r3, #0
 8004102:	d10c      	bne.n	800411e <osThreadNew+0xca>
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	68db      	ldr	r3, [r3, #12]
 8004108:	2b00      	cmp	r3, #0
 800410a:	d108      	bne.n	800411e <osThreadNew+0xca>
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	691b      	ldr	r3, [r3, #16]
 8004110:	2b00      	cmp	r3, #0
 8004112:	d104      	bne.n	800411e <osThreadNew+0xca>
          mem = 0;
 8004114:	2300      	movs	r3, #0
 8004116:	61bb      	str	r3, [r7, #24]
 8004118:	e001      	b.n	800411e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800411a:	2300      	movs	r3, #0
 800411c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800411e:	69bb      	ldr	r3, [r7, #24]
 8004120:	2b01      	cmp	r3, #1
 8004122:	d110      	bne.n	8004146 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8004128:	687a      	ldr	r2, [r7, #4]
 800412a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800412c:	9202      	str	r2, [sp, #8]
 800412e:	9301      	str	r3, [sp, #4]
 8004130:	69fb      	ldr	r3, [r7, #28]
 8004132:	9300      	str	r3, [sp, #0]
 8004134:	68bb      	ldr	r3, [r7, #8]
 8004136:	6a3a      	ldr	r2, [r7, #32]
 8004138:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800413a:	68f8      	ldr	r0, [r7, #12]
 800413c:	f000 fe0c 	bl	8004d58 <xTaskCreateStatic>
 8004140:	4603      	mov	r3, r0
 8004142:	613b      	str	r3, [r7, #16]
 8004144:	e013      	b.n	800416e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8004146:	69bb      	ldr	r3, [r7, #24]
 8004148:	2b00      	cmp	r3, #0
 800414a:	d110      	bne.n	800416e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800414c:	6a3b      	ldr	r3, [r7, #32]
 800414e:	b29a      	uxth	r2, r3
 8004150:	f107 0310 	add.w	r3, r7, #16
 8004154:	9301      	str	r3, [sp, #4]
 8004156:	69fb      	ldr	r3, [r7, #28]
 8004158:	9300      	str	r3, [sp, #0]
 800415a:	68bb      	ldr	r3, [r7, #8]
 800415c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800415e:	68f8      	ldr	r0, [r7, #12]
 8004160:	f000 fe57 	bl	8004e12 <xTaskCreate>
 8004164:	4603      	mov	r3, r0
 8004166:	2b01      	cmp	r3, #1
 8004168:	d001      	beq.n	800416e <osThreadNew+0x11a>
            hTask = NULL;
 800416a:	2300      	movs	r3, #0
 800416c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800416e:	693b      	ldr	r3, [r7, #16]
}
 8004170:	4618      	mov	r0, r3
 8004172:	3728      	adds	r7, #40	; 0x28
 8004174:	46bd      	mov	sp, r7
 8004176:	bd80      	pop	{r7, pc}

08004178 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8004178:	b580      	push	{r7, lr}
 800417a:	b084      	sub	sp, #16
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004180:	f3ef 8305 	mrs	r3, IPSR
 8004184:	60bb      	str	r3, [r7, #8]
  return(result);
 8004186:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004188:	2b00      	cmp	r3, #0
 800418a:	d003      	beq.n	8004194 <osDelay+0x1c>
    stat = osErrorISR;
 800418c:	f06f 0305 	mvn.w	r3, #5
 8004190:	60fb      	str	r3, [r7, #12]
 8004192:	e007      	b.n	80041a4 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8004194:	2300      	movs	r3, #0
 8004196:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d002      	beq.n	80041a4 <osDelay+0x2c>
      vTaskDelay(ticks);
 800419e:	6878      	ldr	r0, [r7, #4]
 80041a0:	f000 ff7c 	bl	800509c <vTaskDelay>
    }
  }

  return (stat);
 80041a4:	68fb      	ldr	r3, [r7, #12]
}
 80041a6:	4618      	mov	r0, r3
 80041a8:	3710      	adds	r7, #16
 80041aa:	46bd      	mov	sp, r7
 80041ac:	bd80      	pop	{r7, pc}
	...

080041b0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80041b0:	b480      	push	{r7}
 80041b2:	b085      	sub	sp, #20
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	60f8      	str	r0, [r7, #12]
 80041b8:	60b9      	str	r1, [r7, #8]
 80041ba:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	4a07      	ldr	r2, [pc, #28]	; (80041dc <vApplicationGetIdleTaskMemory+0x2c>)
 80041c0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80041c2:	68bb      	ldr	r3, [r7, #8]
 80041c4:	4a06      	ldr	r2, [pc, #24]	; (80041e0 <vApplicationGetIdleTaskMemory+0x30>)
 80041c6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2280      	movs	r2, #128	; 0x80
 80041cc:	601a      	str	r2, [r3, #0]
}
 80041ce:	bf00      	nop
 80041d0:	3714      	adds	r7, #20
 80041d2:	46bd      	mov	sp, r7
 80041d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d8:	4770      	bx	lr
 80041da:	bf00      	nop
 80041dc:	20000030 	.word	0x20000030
 80041e0:	2000008c 	.word	0x2000008c

080041e4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80041e4:	b480      	push	{r7}
 80041e6:	b085      	sub	sp, #20
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	60f8      	str	r0, [r7, #12]
 80041ec:	60b9      	str	r1, [r7, #8]
 80041ee:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	4a07      	ldr	r2, [pc, #28]	; (8004210 <vApplicationGetTimerTaskMemory+0x2c>)
 80041f4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80041f6:	68bb      	ldr	r3, [r7, #8]
 80041f8:	4a06      	ldr	r2, [pc, #24]	; (8004214 <vApplicationGetTimerTaskMemory+0x30>)
 80041fa:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004202:	601a      	str	r2, [r3, #0]
}
 8004204:	bf00      	nop
 8004206:	3714      	adds	r7, #20
 8004208:	46bd      	mov	sp, r7
 800420a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420e:	4770      	bx	lr
 8004210:	2000028c 	.word	0x2000028c
 8004214:	200002e8 	.word	0x200002e8

08004218 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004218:	b480      	push	{r7}
 800421a:	b083      	sub	sp, #12
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	f103 0208 	add.w	r2, r3, #8
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	f04f 32ff 	mov.w	r2, #4294967295
 8004230:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	f103 0208 	add.w	r2, r3, #8
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	f103 0208 	add.w	r2, r3, #8
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2200      	movs	r2, #0
 800424a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800424c:	bf00      	nop
 800424e:	370c      	adds	r7, #12
 8004250:	46bd      	mov	sp, r7
 8004252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004256:	4770      	bx	lr

08004258 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004258:	b480      	push	{r7}
 800425a:	b083      	sub	sp, #12
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2200      	movs	r2, #0
 8004264:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004266:	bf00      	nop
 8004268:	370c      	adds	r7, #12
 800426a:	46bd      	mov	sp, r7
 800426c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004270:	4770      	bx	lr

08004272 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004272:	b480      	push	{r7}
 8004274:	b085      	sub	sp, #20
 8004276:	af00      	add	r7, sp, #0
 8004278:	6078      	str	r0, [r7, #4]
 800427a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	685b      	ldr	r3, [r3, #4]
 8004280:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004282:	683b      	ldr	r3, [r7, #0]
 8004284:	68fa      	ldr	r2, [r7, #12]
 8004286:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	689a      	ldr	r2, [r3, #8]
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	689b      	ldr	r3, [r3, #8]
 8004294:	683a      	ldr	r2, [r7, #0]
 8004296:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	683a      	ldr	r2, [r7, #0]
 800429c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800429e:	683b      	ldr	r3, [r7, #0]
 80042a0:	687a      	ldr	r2, [r7, #4]
 80042a2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	1c5a      	adds	r2, r3, #1
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	601a      	str	r2, [r3, #0]
}
 80042ae:	bf00      	nop
 80042b0:	3714      	adds	r7, #20
 80042b2:	46bd      	mov	sp, r7
 80042b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b8:	4770      	bx	lr

080042ba <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80042ba:	b480      	push	{r7}
 80042bc:	b085      	sub	sp, #20
 80042be:	af00      	add	r7, sp, #0
 80042c0:	6078      	str	r0, [r7, #4]
 80042c2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80042ca:	68bb      	ldr	r3, [r7, #8]
 80042cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042d0:	d103      	bne.n	80042da <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	691b      	ldr	r3, [r3, #16]
 80042d6:	60fb      	str	r3, [r7, #12]
 80042d8:	e00c      	b.n	80042f4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	3308      	adds	r3, #8
 80042de:	60fb      	str	r3, [r7, #12]
 80042e0:	e002      	b.n	80042e8 <vListInsert+0x2e>
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	685b      	ldr	r3, [r3, #4]
 80042e6:	60fb      	str	r3, [r7, #12]
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	685b      	ldr	r3, [r3, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	68ba      	ldr	r2, [r7, #8]
 80042f0:	429a      	cmp	r2, r3
 80042f2:	d2f6      	bcs.n	80042e2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	685a      	ldr	r2, [r3, #4]
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	685b      	ldr	r3, [r3, #4]
 8004300:	683a      	ldr	r2, [r7, #0]
 8004302:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	68fa      	ldr	r2, [r7, #12]
 8004308:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	683a      	ldr	r2, [r7, #0]
 800430e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	687a      	ldr	r2, [r7, #4]
 8004314:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	1c5a      	adds	r2, r3, #1
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	601a      	str	r2, [r3, #0]
}
 8004320:	bf00      	nop
 8004322:	3714      	adds	r7, #20
 8004324:	46bd      	mov	sp, r7
 8004326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432a:	4770      	bx	lr

0800432c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800432c:	b480      	push	{r7}
 800432e:	b085      	sub	sp, #20
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	691b      	ldr	r3, [r3, #16]
 8004338:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	685b      	ldr	r3, [r3, #4]
 800433e:	687a      	ldr	r2, [r7, #4]
 8004340:	6892      	ldr	r2, [r2, #8]
 8004342:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	689b      	ldr	r3, [r3, #8]
 8004348:	687a      	ldr	r2, [r7, #4]
 800434a:	6852      	ldr	r2, [r2, #4]
 800434c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	685b      	ldr	r3, [r3, #4]
 8004352:	687a      	ldr	r2, [r7, #4]
 8004354:	429a      	cmp	r2, r3
 8004356:	d103      	bne.n	8004360 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	689a      	ldr	r2, [r3, #8]
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2200      	movs	r2, #0
 8004364:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	1e5a      	subs	r2, r3, #1
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	681b      	ldr	r3, [r3, #0]
}
 8004374:	4618      	mov	r0, r3
 8004376:	3714      	adds	r7, #20
 8004378:	46bd      	mov	sp, r7
 800437a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437e:	4770      	bx	lr

08004380 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004380:	b580      	push	{r7, lr}
 8004382:	b084      	sub	sp, #16
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
 8004388:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	2b00      	cmp	r3, #0
 8004392:	d10a      	bne.n	80043aa <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004394:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004398:	f383 8811 	msr	BASEPRI, r3
 800439c:	f3bf 8f6f 	isb	sy
 80043a0:	f3bf 8f4f 	dsb	sy
 80043a4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80043a6:	bf00      	nop
 80043a8:	e7fe      	b.n	80043a8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80043aa:	f002 f84b 	bl	8006444 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	681a      	ldr	r2, [r3, #0]
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043b6:	68f9      	ldr	r1, [r7, #12]
 80043b8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80043ba:	fb01 f303 	mul.w	r3, r1, r3
 80043be:	441a      	add	r2, r3
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	2200      	movs	r2, #0
 80043c8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	681a      	ldr	r2, [r3, #0]
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	681a      	ldr	r2, [r3, #0]
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043da:	3b01      	subs	r3, #1
 80043dc:	68f9      	ldr	r1, [r7, #12]
 80043de:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80043e0:	fb01 f303 	mul.w	r3, r1, r3
 80043e4:	441a      	add	r2, r3
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	22ff      	movs	r2, #255	; 0xff
 80043ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	22ff      	movs	r2, #255	; 0xff
 80043f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d114      	bne.n	800442a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	691b      	ldr	r3, [r3, #16]
 8004404:	2b00      	cmp	r3, #0
 8004406:	d01a      	beq.n	800443e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	3310      	adds	r3, #16
 800440c:	4618      	mov	r0, r3
 800440e:	f001 f903 	bl	8005618 <xTaskRemoveFromEventList>
 8004412:	4603      	mov	r3, r0
 8004414:	2b00      	cmp	r3, #0
 8004416:	d012      	beq.n	800443e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004418:	4b0c      	ldr	r3, [pc, #48]	; (800444c <xQueueGenericReset+0xcc>)
 800441a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800441e:	601a      	str	r2, [r3, #0]
 8004420:	f3bf 8f4f 	dsb	sy
 8004424:	f3bf 8f6f 	isb	sy
 8004428:	e009      	b.n	800443e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	3310      	adds	r3, #16
 800442e:	4618      	mov	r0, r3
 8004430:	f7ff fef2 	bl	8004218 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	3324      	adds	r3, #36	; 0x24
 8004438:	4618      	mov	r0, r3
 800443a:	f7ff feed 	bl	8004218 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800443e:	f002 f831 	bl	80064a4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004442:	2301      	movs	r3, #1
}
 8004444:	4618      	mov	r0, r3
 8004446:	3710      	adds	r7, #16
 8004448:	46bd      	mov	sp, r7
 800444a:	bd80      	pop	{r7, pc}
 800444c:	e000ed04 	.word	0xe000ed04

08004450 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004450:	b580      	push	{r7, lr}
 8004452:	b08e      	sub	sp, #56	; 0x38
 8004454:	af02      	add	r7, sp, #8
 8004456:	60f8      	str	r0, [r7, #12]
 8004458:	60b9      	str	r1, [r7, #8]
 800445a:	607a      	str	r2, [r7, #4]
 800445c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	2b00      	cmp	r3, #0
 8004462:	d10a      	bne.n	800447a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8004464:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004468:	f383 8811 	msr	BASEPRI, r3
 800446c:	f3bf 8f6f 	isb	sy
 8004470:	f3bf 8f4f 	dsb	sy
 8004474:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004476:	bf00      	nop
 8004478:	e7fe      	b.n	8004478 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	2b00      	cmp	r3, #0
 800447e:	d10a      	bne.n	8004496 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8004480:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004484:	f383 8811 	msr	BASEPRI, r3
 8004488:	f3bf 8f6f 	isb	sy
 800448c:	f3bf 8f4f 	dsb	sy
 8004490:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004492:	bf00      	nop
 8004494:	e7fe      	b.n	8004494 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2b00      	cmp	r3, #0
 800449a:	d002      	beq.n	80044a2 <xQueueGenericCreateStatic+0x52>
 800449c:	68bb      	ldr	r3, [r7, #8]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d001      	beq.n	80044a6 <xQueueGenericCreateStatic+0x56>
 80044a2:	2301      	movs	r3, #1
 80044a4:	e000      	b.n	80044a8 <xQueueGenericCreateStatic+0x58>
 80044a6:	2300      	movs	r3, #0
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d10a      	bne.n	80044c2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80044ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044b0:	f383 8811 	msr	BASEPRI, r3
 80044b4:	f3bf 8f6f 	isb	sy
 80044b8:	f3bf 8f4f 	dsb	sy
 80044bc:	623b      	str	r3, [r7, #32]
}
 80044be:	bf00      	nop
 80044c0:	e7fe      	b.n	80044c0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d102      	bne.n	80044ce <xQueueGenericCreateStatic+0x7e>
 80044c8:	68bb      	ldr	r3, [r7, #8]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d101      	bne.n	80044d2 <xQueueGenericCreateStatic+0x82>
 80044ce:	2301      	movs	r3, #1
 80044d0:	e000      	b.n	80044d4 <xQueueGenericCreateStatic+0x84>
 80044d2:	2300      	movs	r3, #0
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d10a      	bne.n	80044ee <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80044d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044dc:	f383 8811 	msr	BASEPRI, r3
 80044e0:	f3bf 8f6f 	isb	sy
 80044e4:	f3bf 8f4f 	dsb	sy
 80044e8:	61fb      	str	r3, [r7, #28]
}
 80044ea:	bf00      	nop
 80044ec:	e7fe      	b.n	80044ec <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80044ee:	2350      	movs	r3, #80	; 0x50
 80044f0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80044f2:	697b      	ldr	r3, [r7, #20]
 80044f4:	2b50      	cmp	r3, #80	; 0x50
 80044f6:	d00a      	beq.n	800450e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80044f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044fc:	f383 8811 	msr	BASEPRI, r3
 8004500:	f3bf 8f6f 	isb	sy
 8004504:	f3bf 8f4f 	dsb	sy
 8004508:	61bb      	str	r3, [r7, #24]
}
 800450a:	bf00      	nop
 800450c:	e7fe      	b.n	800450c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800450e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004514:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004516:	2b00      	cmp	r3, #0
 8004518:	d00d      	beq.n	8004536 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800451a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800451c:	2201      	movs	r2, #1
 800451e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004522:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004526:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004528:	9300      	str	r3, [sp, #0]
 800452a:	4613      	mov	r3, r2
 800452c:	687a      	ldr	r2, [r7, #4]
 800452e:	68b9      	ldr	r1, [r7, #8]
 8004530:	68f8      	ldr	r0, [r7, #12]
 8004532:	f000 f805 	bl	8004540 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004536:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004538:	4618      	mov	r0, r3
 800453a:	3730      	adds	r7, #48	; 0x30
 800453c:	46bd      	mov	sp, r7
 800453e:	bd80      	pop	{r7, pc}

08004540 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004540:	b580      	push	{r7, lr}
 8004542:	b084      	sub	sp, #16
 8004544:	af00      	add	r7, sp, #0
 8004546:	60f8      	str	r0, [r7, #12]
 8004548:	60b9      	str	r1, [r7, #8]
 800454a:	607a      	str	r2, [r7, #4]
 800454c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800454e:	68bb      	ldr	r3, [r7, #8]
 8004550:	2b00      	cmp	r3, #0
 8004552:	d103      	bne.n	800455c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004554:	69bb      	ldr	r3, [r7, #24]
 8004556:	69ba      	ldr	r2, [r7, #24]
 8004558:	601a      	str	r2, [r3, #0]
 800455a:	e002      	b.n	8004562 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800455c:	69bb      	ldr	r3, [r7, #24]
 800455e:	687a      	ldr	r2, [r7, #4]
 8004560:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004562:	69bb      	ldr	r3, [r7, #24]
 8004564:	68fa      	ldr	r2, [r7, #12]
 8004566:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004568:	69bb      	ldr	r3, [r7, #24]
 800456a:	68ba      	ldr	r2, [r7, #8]
 800456c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800456e:	2101      	movs	r1, #1
 8004570:	69b8      	ldr	r0, [r7, #24]
 8004572:	f7ff ff05 	bl	8004380 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004576:	69bb      	ldr	r3, [r7, #24]
 8004578:	78fa      	ldrb	r2, [r7, #3]
 800457a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800457e:	bf00      	nop
 8004580:	3710      	adds	r7, #16
 8004582:	46bd      	mov	sp, r7
 8004584:	bd80      	pop	{r7, pc}
	...

08004588 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004588:	b580      	push	{r7, lr}
 800458a:	b08e      	sub	sp, #56	; 0x38
 800458c:	af00      	add	r7, sp, #0
 800458e:	60f8      	str	r0, [r7, #12]
 8004590:	60b9      	str	r1, [r7, #8]
 8004592:	607a      	str	r2, [r7, #4]
 8004594:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004596:	2300      	movs	r3, #0
 8004598:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800459e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d10a      	bne.n	80045ba <xQueueGenericSend+0x32>
	__asm volatile
 80045a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045a8:	f383 8811 	msr	BASEPRI, r3
 80045ac:	f3bf 8f6f 	isb	sy
 80045b0:	f3bf 8f4f 	dsb	sy
 80045b4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80045b6:	bf00      	nop
 80045b8:	e7fe      	b.n	80045b8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80045ba:	68bb      	ldr	r3, [r7, #8]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d103      	bne.n	80045c8 <xQueueGenericSend+0x40>
 80045c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d101      	bne.n	80045cc <xQueueGenericSend+0x44>
 80045c8:	2301      	movs	r3, #1
 80045ca:	e000      	b.n	80045ce <xQueueGenericSend+0x46>
 80045cc:	2300      	movs	r3, #0
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d10a      	bne.n	80045e8 <xQueueGenericSend+0x60>
	__asm volatile
 80045d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045d6:	f383 8811 	msr	BASEPRI, r3
 80045da:	f3bf 8f6f 	isb	sy
 80045de:	f3bf 8f4f 	dsb	sy
 80045e2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80045e4:	bf00      	nop
 80045e6:	e7fe      	b.n	80045e6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	2b02      	cmp	r3, #2
 80045ec:	d103      	bne.n	80045f6 <xQueueGenericSend+0x6e>
 80045ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045f2:	2b01      	cmp	r3, #1
 80045f4:	d101      	bne.n	80045fa <xQueueGenericSend+0x72>
 80045f6:	2301      	movs	r3, #1
 80045f8:	e000      	b.n	80045fc <xQueueGenericSend+0x74>
 80045fa:	2300      	movs	r3, #0
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d10a      	bne.n	8004616 <xQueueGenericSend+0x8e>
	__asm volatile
 8004600:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004604:	f383 8811 	msr	BASEPRI, r3
 8004608:	f3bf 8f6f 	isb	sy
 800460c:	f3bf 8f4f 	dsb	sy
 8004610:	623b      	str	r3, [r7, #32]
}
 8004612:	bf00      	nop
 8004614:	e7fe      	b.n	8004614 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004616:	f001 f9bd 	bl	8005994 <xTaskGetSchedulerState>
 800461a:	4603      	mov	r3, r0
 800461c:	2b00      	cmp	r3, #0
 800461e:	d102      	bne.n	8004626 <xQueueGenericSend+0x9e>
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d101      	bne.n	800462a <xQueueGenericSend+0xa2>
 8004626:	2301      	movs	r3, #1
 8004628:	e000      	b.n	800462c <xQueueGenericSend+0xa4>
 800462a:	2300      	movs	r3, #0
 800462c:	2b00      	cmp	r3, #0
 800462e:	d10a      	bne.n	8004646 <xQueueGenericSend+0xbe>
	__asm volatile
 8004630:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004634:	f383 8811 	msr	BASEPRI, r3
 8004638:	f3bf 8f6f 	isb	sy
 800463c:	f3bf 8f4f 	dsb	sy
 8004640:	61fb      	str	r3, [r7, #28]
}
 8004642:	bf00      	nop
 8004644:	e7fe      	b.n	8004644 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004646:	f001 fefd 	bl	8006444 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800464a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800464c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800464e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004650:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004652:	429a      	cmp	r2, r3
 8004654:	d302      	bcc.n	800465c <xQueueGenericSend+0xd4>
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	2b02      	cmp	r3, #2
 800465a:	d129      	bne.n	80046b0 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800465c:	683a      	ldr	r2, [r7, #0]
 800465e:	68b9      	ldr	r1, [r7, #8]
 8004660:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004662:	f000 fa0b 	bl	8004a7c <prvCopyDataToQueue>
 8004666:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004668:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800466a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800466c:	2b00      	cmp	r3, #0
 800466e:	d010      	beq.n	8004692 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004670:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004672:	3324      	adds	r3, #36	; 0x24
 8004674:	4618      	mov	r0, r3
 8004676:	f000 ffcf 	bl	8005618 <xTaskRemoveFromEventList>
 800467a:	4603      	mov	r3, r0
 800467c:	2b00      	cmp	r3, #0
 800467e:	d013      	beq.n	80046a8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004680:	4b3f      	ldr	r3, [pc, #252]	; (8004780 <xQueueGenericSend+0x1f8>)
 8004682:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004686:	601a      	str	r2, [r3, #0]
 8004688:	f3bf 8f4f 	dsb	sy
 800468c:	f3bf 8f6f 	isb	sy
 8004690:	e00a      	b.n	80046a8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004692:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004694:	2b00      	cmp	r3, #0
 8004696:	d007      	beq.n	80046a8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004698:	4b39      	ldr	r3, [pc, #228]	; (8004780 <xQueueGenericSend+0x1f8>)
 800469a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800469e:	601a      	str	r2, [r3, #0]
 80046a0:	f3bf 8f4f 	dsb	sy
 80046a4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80046a8:	f001 fefc 	bl	80064a4 <vPortExitCritical>
				return pdPASS;
 80046ac:	2301      	movs	r3, #1
 80046ae:	e063      	b.n	8004778 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d103      	bne.n	80046be <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80046b6:	f001 fef5 	bl	80064a4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80046ba:	2300      	movs	r3, #0
 80046bc:	e05c      	b.n	8004778 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80046be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d106      	bne.n	80046d2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80046c4:	f107 0314 	add.w	r3, r7, #20
 80046c8:	4618      	mov	r0, r3
 80046ca:	f001 f809 	bl	80056e0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80046ce:	2301      	movs	r3, #1
 80046d0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80046d2:	f001 fee7 	bl	80064a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80046d6:	f000 fd7b 	bl	80051d0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80046da:	f001 feb3 	bl	8006444 <vPortEnterCritical>
 80046de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046e0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80046e4:	b25b      	sxtb	r3, r3
 80046e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046ea:	d103      	bne.n	80046f4 <xQueueGenericSend+0x16c>
 80046ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046ee:	2200      	movs	r2, #0
 80046f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80046f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046f6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80046fa:	b25b      	sxtb	r3, r3
 80046fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004700:	d103      	bne.n	800470a <xQueueGenericSend+0x182>
 8004702:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004704:	2200      	movs	r2, #0
 8004706:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800470a:	f001 fecb 	bl	80064a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800470e:	1d3a      	adds	r2, r7, #4
 8004710:	f107 0314 	add.w	r3, r7, #20
 8004714:	4611      	mov	r1, r2
 8004716:	4618      	mov	r0, r3
 8004718:	f000 fff8 	bl	800570c <xTaskCheckForTimeOut>
 800471c:	4603      	mov	r3, r0
 800471e:	2b00      	cmp	r3, #0
 8004720:	d124      	bne.n	800476c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004722:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004724:	f000 faa2 	bl	8004c6c <prvIsQueueFull>
 8004728:	4603      	mov	r3, r0
 800472a:	2b00      	cmp	r3, #0
 800472c:	d018      	beq.n	8004760 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800472e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004730:	3310      	adds	r3, #16
 8004732:	687a      	ldr	r2, [r7, #4]
 8004734:	4611      	mov	r1, r2
 8004736:	4618      	mov	r0, r3
 8004738:	f000 ff1e 	bl	8005578 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800473c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800473e:	f000 fa2d 	bl	8004b9c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004742:	f000 fd53 	bl	80051ec <xTaskResumeAll>
 8004746:	4603      	mov	r3, r0
 8004748:	2b00      	cmp	r3, #0
 800474a:	f47f af7c 	bne.w	8004646 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800474e:	4b0c      	ldr	r3, [pc, #48]	; (8004780 <xQueueGenericSend+0x1f8>)
 8004750:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004754:	601a      	str	r2, [r3, #0]
 8004756:	f3bf 8f4f 	dsb	sy
 800475a:	f3bf 8f6f 	isb	sy
 800475e:	e772      	b.n	8004646 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004760:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004762:	f000 fa1b 	bl	8004b9c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004766:	f000 fd41 	bl	80051ec <xTaskResumeAll>
 800476a:	e76c      	b.n	8004646 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800476c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800476e:	f000 fa15 	bl	8004b9c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004772:	f000 fd3b 	bl	80051ec <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004776:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004778:	4618      	mov	r0, r3
 800477a:	3738      	adds	r7, #56	; 0x38
 800477c:	46bd      	mov	sp, r7
 800477e:	bd80      	pop	{r7, pc}
 8004780:	e000ed04 	.word	0xe000ed04

08004784 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004784:	b580      	push	{r7, lr}
 8004786:	b090      	sub	sp, #64	; 0x40
 8004788:	af00      	add	r7, sp, #0
 800478a:	60f8      	str	r0, [r7, #12]
 800478c:	60b9      	str	r1, [r7, #8]
 800478e:	607a      	str	r2, [r7, #4]
 8004790:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8004796:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004798:	2b00      	cmp	r3, #0
 800479a:	d10a      	bne.n	80047b2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800479c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047a0:	f383 8811 	msr	BASEPRI, r3
 80047a4:	f3bf 8f6f 	isb	sy
 80047a8:	f3bf 8f4f 	dsb	sy
 80047ac:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80047ae:	bf00      	nop
 80047b0:	e7fe      	b.n	80047b0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80047b2:	68bb      	ldr	r3, [r7, #8]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d103      	bne.n	80047c0 <xQueueGenericSendFromISR+0x3c>
 80047b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d101      	bne.n	80047c4 <xQueueGenericSendFromISR+0x40>
 80047c0:	2301      	movs	r3, #1
 80047c2:	e000      	b.n	80047c6 <xQueueGenericSendFromISR+0x42>
 80047c4:	2300      	movs	r3, #0
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d10a      	bne.n	80047e0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80047ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047ce:	f383 8811 	msr	BASEPRI, r3
 80047d2:	f3bf 8f6f 	isb	sy
 80047d6:	f3bf 8f4f 	dsb	sy
 80047da:	627b      	str	r3, [r7, #36]	; 0x24
}
 80047dc:	bf00      	nop
 80047de:	e7fe      	b.n	80047de <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	2b02      	cmp	r3, #2
 80047e4:	d103      	bne.n	80047ee <xQueueGenericSendFromISR+0x6a>
 80047e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047ea:	2b01      	cmp	r3, #1
 80047ec:	d101      	bne.n	80047f2 <xQueueGenericSendFromISR+0x6e>
 80047ee:	2301      	movs	r3, #1
 80047f0:	e000      	b.n	80047f4 <xQueueGenericSendFromISR+0x70>
 80047f2:	2300      	movs	r3, #0
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d10a      	bne.n	800480e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80047f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047fc:	f383 8811 	msr	BASEPRI, r3
 8004800:	f3bf 8f6f 	isb	sy
 8004804:	f3bf 8f4f 	dsb	sy
 8004808:	623b      	str	r3, [r7, #32]
}
 800480a:	bf00      	nop
 800480c:	e7fe      	b.n	800480c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800480e:	f001 fefb 	bl	8006608 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004812:	f3ef 8211 	mrs	r2, BASEPRI
 8004816:	f04f 0350 	mov.w	r3, #80	; 0x50
 800481a:	f383 8811 	msr	BASEPRI, r3
 800481e:	f3bf 8f6f 	isb	sy
 8004822:	f3bf 8f4f 	dsb	sy
 8004826:	61fa      	str	r2, [r7, #28]
 8004828:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800482a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800482c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800482e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004830:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004832:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004834:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004836:	429a      	cmp	r2, r3
 8004838:	d302      	bcc.n	8004840 <xQueueGenericSendFromISR+0xbc>
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	2b02      	cmp	r3, #2
 800483e:	d12f      	bne.n	80048a0 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004840:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004842:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004846:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800484a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800484c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800484e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004850:	683a      	ldr	r2, [r7, #0]
 8004852:	68b9      	ldr	r1, [r7, #8]
 8004854:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004856:	f000 f911 	bl	8004a7c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800485a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800485e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004862:	d112      	bne.n	800488a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004864:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004868:	2b00      	cmp	r3, #0
 800486a:	d016      	beq.n	800489a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800486c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800486e:	3324      	adds	r3, #36	; 0x24
 8004870:	4618      	mov	r0, r3
 8004872:	f000 fed1 	bl	8005618 <xTaskRemoveFromEventList>
 8004876:	4603      	mov	r3, r0
 8004878:	2b00      	cmp	r3, #0
 800487a:	d00e      	beq.n	800489a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2b00      	cmp	r3, #0
 8004880:	d00b      	beq.n	800489a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	2201      	movs	r2, #1
 8004886:	601a      	str	r2, [r3, #0]
 8004888:	e007      	b.n	800489a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800488a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800488e:	3301      	adds	r3, #1
 8004890:	b2db      	uxtb	r3, r3
 8004892:	b25a      	sxtb	r2, r3
 8004894:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004896:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800489a:	2301      	movs	r3, #1
 800489c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800489e:	e001      	b.n	80048a4 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80048a0:	2300      	movs	r3, #0
 80048a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80048a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048a6:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80048a8:	697b      	ldr	r3, [r7, #20]
 80048aa:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80048ae:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80048b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80048b2:	4618      	mov	r0, r3
 80048b4:	3740      	adds	r7, #64	; 0x40
 80048b6:	46bd      	mov	sp, r7
 80048b8:	bd80      	pop	{r7, pc}
	...

080048bc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80048bc:	b580      	push	{r7, lr}
 80048be:	b08c      	sub	sp, #48	; 0x30
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	60f8      	str	r0, [r7, #12]
 80048c4:	60b9      	str	r1, [r7, #8]
 80048c6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80048c8:	2300      	movs	r3, #0
 80048ca:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80048d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d10a      	bne.n	80048ec <xQueueReceive+0x30>
	__asm volatile
 80048d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048da:	f383 8811 	msr	BASEPRI, r3
 80048de:	f3bf 8f6f 	isb	sy
 80048e2:	f3bf 8f4f 	dsb	sy
 80048e6:	623b      	str	r3, [r7, #32]
}
 80048e8:	bf00      	nop
 80048ea:	e7fe      	b.n	80048ea <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80048ec:	68bb      	ldr	r3, [r7, #8]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d103      	bne.n	80048fa <xQueueReceive+0x3e>
 80048f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d101      	bne.n	80048fe <xQueueReceive+0x42>
 80048fa:	2301      	movs	r3, #1
 80048fc:	e000      	b.n	8004900 <xQueueReceive+0x44>
 80048fe:	2300      	movs	r3, #0
 8004900:	2b00      	cmp	r3, #0
 8004902:	d10a      	bne.n	800491a <xQueueReceive+0x5e>
	__asm volatile
 8004904:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004908:	f383 8811 	msr	BASEPRI, r3
 800490c:	f3bf 8f6f 	isb	sy
 8004910:	f3bf 8f4f 	dsb	sy
 8004914:	61fb      	str	r3, [r7, #28]
}
 8004916:	bf00      	nop
 8004918:	e7fe      	b.n	8004918 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800491a:	f001 f83b 	bl	8005994 <xTaskGetSchedulerState>
 800491e:	4603      	mov	r3, r0
 8004920:	2b00      	cmp	r3, #0
 8004922:	d102      	bne.n	800492a <xQueueReceive+0x6e>
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2b00      	cmp	r3, #0
 8004928:	d101      	bne.n	800492e <xQueueReceive+0x72>
 800492a:	2301      	movs	r3, #1
 800492c:	e000      	b.n	8004930 <xQueueReceive+0x74>
 800492e:	2300      	movs	r3, #0
 8004930:	2b00      	cmp	r3, #0
 8004932:	d10a      	bne.n	800494a <xQueueReceive+0x8e>
	__asm volatile
 8004934:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004938:	f383 8811 	msr	BASEPRI, r3
 800493c:	f3bf 8f6f 	isb	sy
 8004940:	f3bf 8f4f 	dsb	sy
 8004944:	61bb      	str	r3, [r7, #24]
}
 8004946:	bf00      	nop
 8004948:	e7fe      	b.n	8004948 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800494a:	f001 fd7b 	bl	8006444 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800494e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004950:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004952:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004956:	2b00      	cmp	r3, #0
 8004958:	d01f      	beq.n	800499a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800495a:	68b9      	ldr	r1, [r7, #8]
 800495c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800495e:	f000 f8f7 	bl	8004b50 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004964:	1e5a      	subs	r2, r3, #1
 8004966:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004968:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800496a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800496c:	691b      	ldr	r3, [r3, #16]
 800496e:	2b00      	cmp	r3, #0
 8004970:	d00f      	beq.n	8004992 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004972:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004974:	3310      	adds	r3, #16
 8004976:	4618      	mov	r0, r3
 8004978:	f000 fe4e 	bl	8005618 <xTaskRemoveFromEventList>
 800497c:	4603      	mov	r3, r0
 800497e:	2b00      	cmp	r3, #0
 8004980:	d007      	beq.n	8004992 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004982:	4b3d      	ldr	r3, [pc, #244]	; (8004a78 <xQueueReceive+0x1bc>)
 8004984:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004988:	601a      	str	r2, [r3, #0]
 800498a:	f3bf 8f4f 	dsb	sy
 800498e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004992:	f001 fd87 	bl	80064a4 <vPortExitCritical>
				return pdPASS;
 8004996:	2301      	movs	r3, #1
 8004998:	e069      	b.n	8004a6e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	2b00      	cmp	r3, #0
 800499e:	d103      	bne.n	80049a8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80049a0:	f001 fd80 	bl	80064a4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80049a4:	2300      	movs	r3, #0
 80049a6:	e062      	b.n	8004a6e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80049a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d106      	bne.n	80049bc <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80049ae:	f107 0310 	add.w	r3, r7, #16
 80049b2:	4618      	mov	r0, r3
 80049b4:	f000 fe94 	bl	80056e0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80049b8:	2301      	movs	r3, #1
 80049ba:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80049bc:	f001 fd72 	bl	80064a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80049c0:	f000 fc06 	bl	80051d0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80049c4:	f001 fd3e 	bl	8006444 <vPortEnterCritical>
 80049c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049ca:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80049ce:	b25b      	sxtb	r3, r3
 80049d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049d4:	d103      	bne.n	80049de <xQueueReceive+0x122>
 80049d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049d8:	2200      	movs	r2, #0
 80049da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80049de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049e0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80049e4:	b25b      	sxtb	r3, r3
 80049e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049ea:	d103      	bne.n	80049f4 <xQueueReceive+0x138>
 80049ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049ee:	2200      	movs	r2, #0
 80049f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80049f4:	f001 fd56 	bl	80064a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80049f8:	1d3a      	adds	r2, r7, #4
 80049fa:	f107 0310 	add.w	r3, r7, #16
 80049fe:	4611      	mov	r1, r2
 8004a00:	4618      	mov	r0, r3
 8004a02:	f000 fe83 	bl	800570c <xTaskCheckForTimeOut>
 8004a06:	4603      	mov	r3, r0
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d123      	bne.n	8004a54 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004a0c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004a0e:	f000 f917 	bl	8004c40 <prvIsQueueEmpty>
 8004a12:	4603      	mov	r3, r0
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d017      	beq.n	8004a48 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004a18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a1a:	3324      	adds	r3, #36	; 0x24
 8004a1c:	687a      	ldr	r2, [r7, #4]
 8004a1e:	4611      	mov	r1, r2
 8004a20:	4618      	mov	r0, r3
 8004a22:	f000 fda9 	bl	8005578 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004a26:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004a28:	f000 f8b8 	bl	8004b9c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004a2c:	f000 fbde 	bl	80051ec <xTaskResumeAll>
 8004a30:	4603      	mov	r3, r0
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d189      	bne.n	800494a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8004a36:	4b10      	ldr	r3, [pc, #64]	; (8004a78 <xQueueReceive+0x1bc>)
 8004a38:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a3c:	601a      	str	r2, [r3, #0]
 8004a3e:	f3bf 8f4f 	dsb	sy
 8004a42:	f3bf 8f6f 	isb	sy
 8004a46:	e780      	b.n	800494a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004a48:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004a4a:	f000 f8a7 	bl	8004b9c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004a4e:	f000 fbcd 	bl	80051ec <xTaskResumeAll>
 8004a52:	e77a      	b.n	800494a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004a54:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004a56:	f000 f8a1 	bl	8004b9c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004a5a:	f000 fbc7 	bl	80051ec <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004a5e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004a60:	f000 f8ee 	bl	8004c40 <prvIsQueueEmpty>
 8004a64:	4603      	mov	r3, r0
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	f43f af6f 	beq.w	800494a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004a6c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004a6e:	4618      	mov	r0, r3
 8004a70:	3730      	adds	r7, #48	; 0x30
 8004a72:	46bd      	mov	sp, r7
 8004a74:	bd80      	pop	{r7, pc}
 8004a76:	bf00      	nop
 8004a78:	e000ed04 	.word	0xe000ed04

08004a7c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b086      	sub	sp, #24
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	60f8      	str	r0, [r7, #12]
 8004a84:	60b9      	str	r1, [r7, #8]
 8004a86:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004a88:	2300      	movs	r3, #0
 8004a8a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a90:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d10d      	bne.n	8004ab6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d14d      	bne.n	8004b3e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	689b      	ldr	r3, [r3, #8]
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	f000 ff92 	bl	80059d0 <xTaskPriorityDisinherit>
 8004aac:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	609a      	str	r2, [r3, #8]
 8004ab4:	e043      	b.n	8004b3e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d119      	bne.n	8004af0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	6858      	ldr	r0, [r3, #4]
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ac4:	461a      	mov	r2, r3
 8004ac6:	68b9      	ldr	r1, [r7, #8]
 8004ac8:	f002 f806 	bl	8006ad8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	685a      	ldr	r2, [r3, #4]
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ad4:	441a      	add	r2, r3
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	685a      	ldr	r2, [r3, #4]
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	689b      	ldr	r3, [r3, #8]
 8004ae2:	429a      	cmp	r2, r3
 8004ae4:	d32b      	bcc.n	8004b3e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	681a      	ldr	r2, [r3, #0]
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	605a      	str	r2, [r3, #4]
 8004aee:	e026      	b.n	8004b3e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	68d8      	ldr	r0, [r3, #12]
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004af8:	461a      	mov	r2, r3
 8004afa:	68b9      	ldr	r1, [r7, #8]
 8004afc:	f001 ffec 	bl	8006ad8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	68da      	ldr	r2, [r3, #12]
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b08:	425b      	negs	r3, r3
 8004b0a:	441a      	add	r2, r3
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	68da      	ldr	r2, [r3, #12]
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	429a      	cmp	r2, r3
 8004b1a:	d207      	bcs.n	8004b2c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	689a      	ldr	r2, [r3, #8]
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b24:	425b      	negs	r3, r3
 8004b26:	441a      	add	r2, r3
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2b02      	cmp	r3, #2
 8004b30:	d105      	bne.n	8004b3e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004b32:	693b      	ldr	r3, [r7, #16]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d002      	beq.n	8004b3e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004b38:	693b      	ldr	r3, [r7, #16]
 8004b3a:	3b01      	subs	r3, #1
 8004b3c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004b3e:	693b      	ldr	r3, [r7, #16]
 8004b40:	1c5a      	adds	r2, r3, #1
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004b46:	697b      	ldr	r3, [r7, #20]
}
 8004b48:	4618      	mov	r0, r3
 8004b4a:	3718      	adds	r7, #24
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	bd80      	pop	{r7, pc}

08004b50 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b082      	sub	sp, #8
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
 8004b58:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d018      	beq.n	8004b94 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	68da      	ldr	r2, [r3, #12]
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b6a:	441a      	add	r2, r3
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	68da      	ldr	r2, [r3, #12]
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	689b      	ldr	r3, [r3, #8]
 8004b78:	429a      	cmp	r2, r3
 8004b7a:	d303      	bcc.n	8004b84 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681a      	ldr	r2, [r3, #0]
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	68d9      	ldr	r1, [r3, #12]
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b8c:	461a      	mov	r2, r3
 8004b8e:	6838      	ldr	r0, [r7, #0]
 8004b90:	f001 ffa2 	bl	8006ad8 <memcpy>
	}
}
 8004b94:	bf00      	nop
 8004b96:	3708      	adds	r7, #8
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	bd80      	pop	{r7, pc}

08004b9c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b084      	sub	sp, #16
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004ba4:	f001 fc4e 	bl	8006444 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004bae:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004bb0:	e011      	b.n	8004bd6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d012      	beq.n	8004be0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	3324      	adds	r3, #36	; 0x24
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	f000 fd2a 	bl	8005618 <xTaskRemoveFromEventList>
 8004bc4:	4603      	mov	r3, r0
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d001      	beq.n	8004bce <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004bca:	f000 fe01 	bl	80057d0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004bce:	7bfb      	ldrb	r3, [r7, #15]
 8004bd0:	3b01      	subs	r3, #1
 8004bd2:	b2db      	uxtb	r3, r3
 8004bd4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004bd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	dce9      	bgt.n	8004bb2 <prvUnlockQueue+0x16>
 8004bde:	e000      	b.n	8004be2 <prvUnlockQueue+0x46>
					break;
 8004be0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	22ff      	movs	r2, #255	; 0xff
 8004be6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004bea:	f001 fc5b 	bl	80064a4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004bee:	f001 fc29 	bl	8006444 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004bf8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004bfa:	e011      	b.n	8004c20 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	691b      	ldr	r3, [r3, #16]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d012      	beq.n	8004c2a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	3310      	adds	r3, #16
 8004c08:	4618      	mov	r0, r3
 8004c0a:	f000 fd05 	bl	8005618 <xTaskRemoveFromEventList>
 8004c0e:	4603      	mov	r3, r0
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d001      	beq.n	8004c18 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004c14:	f000 fddc 	bl	80057d0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004c18:	7bbb      	ldrb	r3, [r7, #14]
 8004c1a:	3b01      	subs	r3, #1
 8004c1c:	b2db      	uxtb	r3, r3
 8004c1e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004c20:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	dce9      	bgt.n	8004bfc <prvUnlockQueue+0x60>
 8004c28:	e000      	b.n	8004c2c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004c2a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	22ff      	movs	r2, #255	; 0xff
 8004c30:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004c34:	f001 fc36 	bl	80064a4 <vPortExitCritical>
}
 8004c38:	bf00      	nop
 8004c3a:	3710      	adds	r7, #16
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	bd80      	pop	{r7, pc}

08004c40 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004c40:	b580      	push	{r7, lr}
 8004c42:	b084      	sub	sp, #16
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004c48:	f001 fbfc 	bl	8006444 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d102      	bne.n	8004c5a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004c54:	2301      	movs	r3, #1
 8004c56:	60fb      	str	r3, [r7, #12]
 8004c58:	e001      	b.n	8004c5e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004c5e:	f001 fc21 	bl	80064a4 <vPortExitCritical>

	return xReturn;
 8004c62:	68fb      	ldr	r3, [r7, #12]
}
 8004c64:	4618      	mov	r0, r3
 8004c66:	3710      	adds	r7, #16
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	bd80      	pop	{r7, pc}

08004c6c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	b084      	sub	sp, #16
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004c74:	f001 fbe6 	bl	8006444 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c80:	429a      	cmp	r2, r3
 8004c82:	d102      	bne.n	8004c8a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004c84:	2301      	movs	r3, #1
 8004c86:	60fb      	str	r3, [r7, #12]
 8004c88:	e001      	b.n	8004c8e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004c8a:	2300      	movs	r3, #0
 8004c8c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004c8e:	f001 fc09 	bl	80064a4 <vPortExitCritical>

	return xReturn;
 8004c92:	68fb      	ldr	r3, [r7, #12]
}
 8004c94:	4618      	mov	r0, r3
 8004c96:	3710      	adds	r7, #16
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	bd80      	pop	{r7, pc}

08004c9c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004c9c:	b480      	push	{r7}
 8004c9e:	b085      	sub	sp, #20
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
 8004ca4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	60fb      	str	r3, [r7, #12]
 8004caa:	e014      	b.n	8004cd6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004cac:	4a0f      	ldr	r2, [pc, #60]	; (8004cec <vQueueAddToRegistry+0x50>)
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d10b      	bne.n	8004cd0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004cb8:	490c      	ldr	r1, [pc, #48]	; (8004cec <vQueueAddToRegistry+0x50>)
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	683a      	ldr	r2, [r7, #0]
 8004cbe:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004cc2:	4a0a      	ldr	r2, [pc, #40]	; (8004cec <vQueueAddToRegistry+0x50>)
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	00db      	lsls	r3, r3, #3
 8004cc8:	4413      	add	r3, r2
 8004cca:	687a      	ldr	r2, [r7, #4]
 8004ccc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004cce:	e006      	b.n	8004cde <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	3301      	adds	r3, #1
 8004cd4:	60fb      	str	r3, [r7, #12]
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	2b07      	cmp	r3, #7
 8004cda:	d9e7      	bls.n	8004cac <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004cdc:	bf00      	nop
 8004cde:	bf00      	nop
 8004ce0:	3714      	adds	r7, #20
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce8:	4770      	bx	lr
 8004cea:	bf00      	nop
 8004cec:	20004acc 	.word	0x20004acc

08004cf0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	b086      	sub	sp, #24
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	60f8      	str	r0, [r7, #12]
 8004cf8:	60b9      	str	r1, [r7, #8]
 8004cfa:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004d00:	f001 fba0 	bl	8006444 <vPortEnterCritical>
 8004d04:	697b      	ldr	r3, [r7, #20]
 8004d06:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004d0a:	b25b      	sxtb	r3, r3
 8004d0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d10:	d103      	bne.n	8004d1a <vQueueWaitForMessageRestricted+0x2a>
 8004d12:	697b      	ldr	r3, [r7, #20]
 8004d14:	2200      	movs	r2, #0
 8004d16:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004d1a:	697b      	ldr	r3, [r7, #20]
 8004d1c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004d20:	b25b      	sxtb	r3, r3
 8004d22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d26:	d103      	bne.n	8004d30 <vQueueWaitForMessageRestricted+0x40>
 8004d28:	697b      	ldr	r3, [r7, #20]
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004d30:	f001 fbb8 	bl	80064a4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004d34:	697b      	ldr	r3, [r7, #20]
 8004d36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d106      	bne.n	8004d4a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004d3c:	697b      	ldr	r3, [r7, #20]
 8004d3e:	3324      	adds	r3, #36	; 0x24
 8004d40:	687a      	ldr	r2, [r7, #4]
 8004d42:	68b9      	ldr	r1, [r7, #8]
 8004d44:	4618      	mov	r0, r3
 8004d46:	f000 fc3b 	bl	80055c0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004d4a:	6978      	ldr	r0, [r7, #20]
 8004d4c:	f7ff ff26 	bl	8004b9c <prvUnlockQueue>
	}
 8004d50:	bf00      	nop
 8004d52:	3718      	adds	r7, #24
 8004d54:	46bd      	mov	sp, r7
 8004d56:	bd80      	pop	{r7, pc}

08004d58 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	b08e      	sub	sp, #56	; 0x38
 8004d5c:	af04      	add	r7, sp, #16
 8004d5e:	60f8      	str	r0, [r7, #12]
 8004d60:	60b9      	str	r1, [r7, #8]
 8004d62:	607a      	str	r2, [r7, #4]
 8004d64:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004d66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d10a      	bne.n	8004d82 <xTaskCreateStatic+0x2a>
	__asm volatile
 8004d6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d70:	f383 8811 	msr	BASEPRI, r3
 8004d74:	f3bf 8f6f 	isb	sy
 8004d78:	f3bf 8f4f 	dsb	sy
 8004d7c:	623b      	str	r3, [r7, #32]
}
 8004d7e:	bf00      	nop
 8004d80:	e7fe      	b.n	8004d80 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004d82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d10a      	bne.n	8004d9e <xTaskCreateStatic+0x46>
	__asm volatile
 8004d88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d8c:	f383 8811 	msr	BASEPRI, r3
 8004d90:	f3bf 8f6f 	isb	sy
 8004d94:	f3bf 8f4f 	dsb	sy
 8004d98:	61fb      	str	r3, [r7, #28]
}
 8004d9a:	bf00      	nop
 8004d9c:	e7fe      	b.n	8004d9c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004d9e:	235c      	movs	r3, #92	; 0x5c
 8004da0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004da2:	693b      	ldr	r3, [r7, #16]
 8004da4:	2b5c      	cmp	r3, #92	; 0x5c
 8004da6:	d00a      	beq.n	8004dbe <xTaskCreateStatic+0x66>
	__asm volatile
 8004da8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dac:	f383 8811 	msr	BASEPRI, r3
 8004db0:	f3bf 8f6f 	isb	sy
 8004db4:	f3bf 8f4f 	dsb	sy
 8004db8:	61bb      	str	r3, [r7, #24]
}
 8004dba:	bf00      	nop
 8004dbc:	e7fe      	b.n	8004dbc <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004dbe:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004dc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d01e      	beq.n	8004e04 <xTaskCreateStatic+0xac>
 8004dc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d01b      	beq.n	8004e04 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004dcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dce:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dd2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004dd4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dd8:	2202      	movs	r2, #2
 8004dda:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004dde:	2300      	movs	r3, #0
 8004de0:	9303      	str	r3, [sp, #12]
 8004de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004de4:	9302      	str	r3, [sp, #8]
 8004de6:	f107 0314 	add.w	r3, r7, #20
 8004dea:	9301      	str	r3, [sp, #4]
 8004dec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dee:	9300      	str	r3, [sp, #0]
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	687a      	ldr	r2, [r7, #4]
 8004df4:	68b9      	ldr	r1, [r7, #8]
 8004df6:	68f8      	ldr	r0, [r7, #12]
 8004df8:	f000 f850 	bl	8004e9c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004dfc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004dfe:	f000 f8dd 	bl	8004fbc <prvAddNewTaskToReadyList>
 8004e02:	e001      	b.n	8004e08 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8004e04:	2300      	movs	r3, #0
 8004e06:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004e08:	697b      	ldr	r3, [r7, #20]
	}
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	3728      	adds	r7, #40	; 0x28
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	bd80      	pop	{r7, pc}

08004e12 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004e12:	b580      	push	{r7, lr}
 8004e14:	b08c      	sub	sp, #48	; 0x30
 8004e16:	af04      	add	r7, sp, #16
 8004e18:	60f8      	str	r0, [r7, #12]
 8004e1a:	60b9      	str	r1, [r7, #8]
 8004e1c:	603b      	str	r3, [r7, #0]
 8004e1e:	4613      	mov	r3, r2
 8004e20:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004e22:	88fb      	ldrh	r3, [r7, #6]
 8004e24:	009b      	lsls	r3, r3, #2
 8004e26:	4618      	mov	r0, r3
 8004e28:	f001 fc2e 	bl	8006688 <pvPortMalloc>
 8004e2c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004e2e:	697b      	ldr	r3, [r7, #20]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d00e      	beq.n	8004e52 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004e34:	205c      	movs	r0, #92	; 0x5c
 8004e36:	f001 fc27 	bl	8006688 <pvPortMalloc>
 8004e3a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004e3c:	69fb      	ldr	r3, [r7, #28]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d003      	beq.n	8004e4a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004e42:	69fb      	ldr	r3, [r7, #28]
 8004e44:	697a      	ldr	r2, [r7, #20]
 8004e46:	631a      	str	r2, [r3, #48]	; 0x30
 8004e48:	e005      	b.n	8004e56 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004e4a:	6978      	ldr	r0, [r7, #20]
 8004e4c:	f001 fce8 	bl	8006820 <vPortFree>
 8004e50:	e001      	b.n	8004e56 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004e52:	2300      	movs	r3, #0
 8004e54:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004e56:	69fb      	ldr	r3, [r7, #28]
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d017      	beq.n	8004e8c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004e5c:	69fb      	ldr	r3, [r7, #28]
 8004e5e:	2200      	movs	r2, #0
 8004e60:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004e64:	88fa      	ldrh	r2, [r7, #6]
 8004e66:	2300      	movs	r3, #0
 8004e68:	9303      	str	r3, [sp, #12]
 8004e6a:	69fb      	ldr	r3, [r7, #28]
 8004e6c:	9302      	str	r3, [sp, #8]
 8004e6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e70:	9301      	str	r3, [sp, #4]
 8004e72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e74:	9300      	str	r3, [sp, #0]
 8004e76:	683b      	ldr	r3, [r7, #0]
 8004e78:	68b9      	ldr	r1, [r7, #8]
 8004e7a:	68f8      	ldr	r0, [r7, #12]
 8004e7c:	f000 f80e 	bl	8004e9c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004e80:	69f8      	ldr	r0, [r7, #28]
 8004e82:	f000 f89b 	bl	8004fbc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004e86:	2301      	movs	r3, #1
 8004e88:	61bb      	str	r3, [r7, #24]
 8004e8a:	e002      	b.n	8004e92 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004e8c:	f04f 33ff 	mov.w	r3, #4294967295
 8004e90:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004e92:	69bb      	ldr	r3, [r7, #24]
	}
 8004e94:	4618      	mov	r0, r3
 8004e96:	3720      	adds	r7, #32
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	bd80      	pop	{r7, pc}

08004e9c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004e9c:	b580      	push	{r7, lr}
 8004e9e:	b088      	sub	sp, #32
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	60f8      	str	r0, [r7, #12]
 8004ea4:	60b9      	str	r1, [r7, #8]
 8004ea6:	607a      	str	r2, [r7, #4]
 8004ea8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004eaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eac:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	009b      	lsls	r3, r3, #2
 8004eb2:	461a      	mov	r2, r3
 8004eb4:	21a5      	movs	r1, #165	; 0xa5
 8004eb6:	f001 fe1d 	bl	8006af4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004eba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ebc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004ec4:	3b01      	subs	r3, #1
 8004ec6:	009b      	lsls	r3, r3, #2
 8004ec8:	4413      	add	r3, r2
 8004eca:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004ecc:	69bb      	ldr	r3, [r7, #24]
 8004ece:	f023 0307 	bic.w	r3, r3, #7
 8004ed2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004ed4:	69bb      	ldr	r3, [r7, #24]
 8004ed6:	f003 0307 	and.w	r3, r3, #7
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d00a      	beq.n	8004ef4 <prvInitialiseNewTask+0x58>
	__asm volatile
 8004ede:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ee2:	f383 8811 	msr	BASEPRI, r3
 8004ee6:	f3bf 8f6f 	isb	sy
 8004eea:	f3bf 8f4f 	dsb	sy
 8004eee:	617b      	str	r3, [r7, #20]
}
 8004ef0:	bf00      	nop
 8004ef2:	e7fe      	b.n	8004ef2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004ef4:	68bb      	ldr	r3, [r7, #8]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d01f      	beq.n	8004f3a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004efa:	2300      	movs	r3, #0
 8004efc:	61fb      	str	r3, [r7, #28]
 8004efe:	e012      	b.n	8004f26 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004f00:	68ba      	ldr	r2, [r7, #8]
 8004f02:	69fb      	ldr	r3, [r7, #28]
 8004f04:	4413      	add	r3, r2
 8004f06:	7819      	ldrb	r1, [r3, #0]
 8004f08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f0a:	69fb      	ldr	r3, [r7, #28]
 8004f0c:	4413      	add	r3, r2
 8004f0e:	3334      	adds	r3, #52	; 0x34
 8004f10:	460a      	mov	r2, r1
 8004f12:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004f14:	68ba      	ldr	r2, [r7, #8]
 8004f16:	69fb      	ldr	r3, [r7, #28]
 8004f18:	4413      	add	r3, r2
 8004f1a:	781b      	ldrb	r3, [r3, #0]
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d006      	beq.n	8004f2e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004f20:	69fb      	ldr	r3, [r7, #28]
 8004f22:	3301      	adds	r3, #1
 8004f24:	61fb      	str	r3, [r7, #28]
 8004f26:	69fb      	ldr	r3, [r7, #28]
 8004f28:	2b0f      	cmp	r3, #15
 8004f2a:	d9e9      	bls.n	8004f00 <prvInitialiseNewTask+0x64>
 8004f2c:	e000      	b.n	8004f30 <prvInitialiseNewTask+0x94>
			{
				break;
 8004f2e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004f30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f32:	2200      	movs	r2, #0
 8004f34:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004f38:	e003      	b.n	8004f42 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004f3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004f42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f44:	2b37      	cmp	r3, #55	; 0x37
 8004f46:	d901      	bls.n	8004f4c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004f48:	2337      	movs	r3, #55	; 0x37
 8004f4a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004f4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f4e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004f50:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004f52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f54:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004f56:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004f58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004f5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f60:	3304      	adds	r3, #4
 8004f62:	4618      	mov	r0, r3
 8004f64:	f7ff f978 	bl	8004258 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004f68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f6a:	3318      	adds	r3, #24
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	f7ff f973 	bl	8004258 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004f72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f76:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004f78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f7a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004f7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f80:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004f82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f86:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004f88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004f8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f90:	2200      	movs	r2, #0
 8004f92:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004f96:	683a      	ldr	r2, [r7, #0]
 8004f98:	68f9      	ldr	r1, [r7, #12]
 8004f9a:	69b8      	ldr	r0, [r7, #24]
 8004f9c:	f001 f928 	bl	80061f0 <pxPortInitialiseStack>
 8004fa0:	4602      	mov	r2, r0
 8004fa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fa4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004fa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d002      	beq.n	8004fb2 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004fac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004fb0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004fb2:	bf00      	nop
 8004fb4:	3720      	adds	r7, #32
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	bd80      	pop	{r7, pc}
	...

08004fbc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004fbc:	b580      	push	{r7, lr}
 8004fbe:	b082      	sub	sp, #8
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004fc4:	f001 fa3e 	bl	8006444 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004fc8:	4b2d      	ldr	r3, [pc, #180]	; (8005080 <prvAddNewTaskToReadyList+0xc4>)
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	3301      	adds	r3, #1
 8004fce:	4a2c      	ldr	r2, [pc, #176]	; (8005080 <prvAddNewTaskToReadyList+0xc4>)
 8004fd0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004fd2:	4b2c      	ldr	r3, [pc, #176]	; (8005084 <prvAddNewTaskToReadyList+0xc8>)
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d109      	bne.n	8004fee <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004fda:	4a2a      	ldr	r2, [pc, #168]	; (8005084 <prvAddNewTaskToReadyList+0xc8>)
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004fe0:	4b27      	ldr	r3, [pc, #156]	; (8005080 <prvAddNewTaskToReadyList+0xc4>)
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	2b01      	cmp	r3, #1
 8004fe6:	d110      	bne.n	800500a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004fe8:	f000 fc16 	bl	8005818 <prvInitialiseTaskLists>
 8004fec:	e00d      	b.n	800500a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004fee:	4b26      	ldr	r3, [pc, #152]	; (8005088 <prvAddNewTaskToReadyList+0xcc>)
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d109      	bne.n	800500a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004ff6:	4b23      	ldr	r3, [pc, #140]	; (8005084 <prvAddNewTaskToReadyList+0xc8>)
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005000:	429a      	cmp	r2, r3
 8005002:	d802      	bhi.n	800500a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005004:	4a1f      	ldr	r2, [pc, #124]	; (8005084 <prvAddNewTaskToReadyList+0xc8>)
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800500a:	4b20      	ldr	r3, [pc, #128]	; (800508c <prvAddNewTaskToReadyList+0xd0>)
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	3301      	adds	r3, #1
 8005010:	4a1e      	ldr	r2, [pc, #120]	; (800508c <prvAddNewTaskToReadyList+0xd0>)
 8005012:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005014:	4b1d      	ldr	r3, [pc, #116]	; (800508c <prvAddNewTaskToReadyList+0xd0>)
 8005016:	681a      	ldr	r2, [r3, #0]
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005020:	4b1b      	ldr	r3, [pc, #108]	; (8005090 <prvAddNewTaskToReadyList+0xd4>)
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	429a      	cmp	r2, r3
 8005026:	d903      	bls.n	8005030 <prvAddNewTaskToReadyList+0x74>
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800502c:	4a18      	ldr	r2, [pc, #96]	; (8005090 <prvAddNewTaskToReadyList+0xd4>)
 800502e:	6013      	str	r3, [r2, #0]
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005034:	4613      	mov	r3, r2
 8005036:	009b      	lsls	r3, r3, #2
 8005038:	4413      	add	r3, r2
 800503a:	009b      	lsls	r3, r3, #2
 800503c:	4a15      	ldr	r2, [pc, #84]	; (8005094 <prvAddNewTaskToReadyList+0xd8>)
 800503e:	441a      	add	r2, r3
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	3304      	adds	r3, #4
 8005044:	4619      	mov	r1, r3
 8005046:	4610      	mov	r0, r2
 8005048:	f7ff f913 	bl	8004272 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800504c:	f001 fa2a 	bl	80064a4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005050:	4b0d      	ldr	r3, [pc, #52]	; (8005088 <prvAddNewTaskToReadyList+0xcc>)
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	2b00      	cmp	r3, #0
 8005056:	d00e      	beq.n	8005076 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005058:	4b0a      	ldr	r3, [pc, #40]	; (8005084 <prvAddNewTaskToReadyList+0xc8>)
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005062:	429a      	cmp	r2, r3
 8005064:	d207      	bcs.n	8005076 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005066:	4b0c      	ldr	r3, [pc, #48]	; (8005098 <prvAddNewTaskToReadyList+0xdc>)
 8005068:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800506c:	601a      	str	r2, [r3, #0]
 800506e:	f3bf 8f4f 	dsb	sy
 8005072:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005076:	bf00      	nop
 8005078:	3708      	adds	r7, #8
 800507a:	46bd      	mov	sp, r7
 800507c:	bd80      	pop	{r7, pc}
 800507e:	bf00      	nop
 8005080:	20000bbc 	.word	0x20000bbc
 8005084:	200006e8 	.word	0x200006e8
 8005088:	20000bc8 	.word	0x20000bc8
 800508c:	20000bd8 	.word	0x20000bd8
 8005090:	20000bc4 	.word	0x20000bc4
 8005094:	200006ec 	.word	0x200006ec
 8005098:	e000ed04 	.word	0xe000ed04

0800509c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800509c:	b580      	push	{r7, lr}
 800509e:	b084      	sub	sp, #16
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80050a4:	2300      	movs	r3, #0
 80050a6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d017      	beq.n	80050de <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80050ae:	4b13      	ldr	r3, [pc, #76]	; (80050fc <vTaskDelay+0x60>)
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d00a      	beq.n	80050cc <vTaskDelay+0x30>
	__asm volatile
 80050b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050ba:	f383 8811 	msr	BASEPRI, r3
 80050be:	f3bf 8f6f 	isb	sy
 80050c2:	f3bf 8f4f 	dsb	sy
 80050c6:	60bb      	str	r3, [r7, #8]
}
 80050c8:	bf00      	nop
 80050ca:	e7fe      	b.n	80050ca <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80050cc:	f000 f880 	bl	80051d0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80050d0:	2100      	movs	r1, #0
 80050d2:	6878      	ldr	r0, [r7, #4]
 80050d4:	f000 fcea 	bl	8005aac <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80050d8:	f000 f888 	bl	80051ec <xTaskResumeAll>
 80050dc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d107      	bne.n	80050f4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80050e4:	4b06      	ldr	r3, [pc, #24]	; (8005100 <vTaskDelay+0x64>)
 80050e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80050ea:	601a      	str	r2, [r3, #0]
 80050ec:	f3bf 8f4f 	dsb	sy
 80050f0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80050f4:	bf00      	nop
 80050f6:	3710      	adds	r7, #16
 80050f8:	46bd      	mov	sp, r7
 80050fa:	bd80      	pop	{r7, pc}
 80050fc:	20000be4 	.word	0x20000be4
 8005100:	e000ed04 	.word	0xe000ed04

08005104 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005104:	b580      	push	{r7, lr}
 8005106:	b08a      	sub	sp, #40	; 0x28
 8005108:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800510a:	2300      	movs	r3, #0
 800510c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800510e:	2300      	movs	r3, #0
 8005110:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005112:	463a      	mov	r2, r7
 8005114:	1d39      	adds	r1, r7, #4
 8005116:	f107 0308 	add.w	r3, r7, #8
 800511a:	4618      	mov	r0, r3
 800511c:	f7ff f848 	bl	80041b0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005120:	6839      	ldr	r1, [r7, #0]
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	68ba      	ldr	r2, [r7, #8]
 8005126:	9202      	str	r2, [sp, #8]
 8005128:	9301      	str	r3, [sp, #4]
 800512a:	2300      	movs	r3, #0
 800512c:	9300      	str	r3, [sp, #0]
 800512e:	2300      	movs	r3, #0
 8005130:	460a      	mov	r2, r1
 8005132:	4921      	ldr	r1, [pc, #132]	; (80051b8 <vTaskStartScheduler+0xb4>)
 8005134:	4821      	ldr	r0, [pc, #132]	; (80051bc <vTaskStartScheduler+0xb8>)
 8005136:	f7ff fe0f 	bl	8004d58 <xTaskCreateStatic>
 800513a:	4603      	mov	r3, r0
 800513c:	4a20      	ldr	r2, [pc, #128]	; (80051c0 <vTaskStartScheduler+0xbc>)
 800513e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005140:	4b1f      	ldr	r3, [pc, #124]	; (80051c0 <vTaskStartScheduler+0xbc>)
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	2b00      	cmp	r3, #0
 8005146:	d002      	beq.n	800514e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005148:	2301      	movs	r3, #1
 800514a:	617b      	str	r3, [r7, #20]
 800514c:	e001      	b.n	8005152 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800514e:	2300      	movs	r3, #0
 8005150:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005152:	697b      	ldr	r3, [r7, #20]
 8005154:	2b01      	cmp	r3, #1
 8005156:	d102      	bne.n	800515e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005158:	f000 fcfc 	bl	8005b54 <xTimerCreateTimerTask>
 800515c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800515e:	697b      	ldr	r3, [r7, #20]
 8005160:	2b01      	cmp	r3, #1
 8005162:	d116      	bne.n	8005192 <vTaskStartScheduler+0x8e>
	__asm volatile
 8005164:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005168:	f383 8811 	msr	BASEPRI, r3
 800516c:	f3bf 8f6f 	isb	sy
 8005170:	f3bf 8f4f 	dsb	sy
 8005174:	613b      	str	r3, [r7, #16]
}
 8005176:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005178:	4b12      	ldr	r3, [pc, #72]	; (80051c4 <vTaskStartScheduler+0xc0>)
 800517a:	f04f 32ff 	mov.w	r2, #4294967295
 800517e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005180:	4b11      	ldr	r3, [pc, #68]	; (80051c8 <vTaskStartScheduler+0xc4>)
 8005182:	2201      	movs	r2, #1
 8005184:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005186:	4b11      	ldr	r3, [pc, #68]	; (80051cc <vTaskStartScheduler+0xc8>)
 8005188:	2200      	movs	r2, #0
 800518a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800518c:	f001 f8b8 	bl	8006300 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005190:	e00e      	b.n	80051b0 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005192:	697b      	ldr	r3, [r7, #20]
 8005194:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005198:	d10a      	bne.n	80051b0 <vTaskStartScheduler+0xac>
	__asm volatile
 800519a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800519e:	f383 8811 	msr	BASEPRI, r3
 80051a2:	f3bf 8f6f 	isb	sy
 80051a6:	f3bf 8f4f 	dsb	sy
 80051aa:	60fb      	str	r3, [r7, #12]
}
 80051ac:	bf00      	nop
 80051ae:	e7fe      	b.n	80051ae <vTaskStartScheduler+0xaa>
}
 80051b0:	bf00      	nop
 80051b2:	3718      	adds	r7, #24
 80051b4:	46bd      	mov	sp, r7
 80051b6:	bd80      	pop	{r7, pc}
 80051b8:	08006bbc 	.word	0x08006bbc
 80051bc:	080057e9 	.word	0x080057e9
 80051c0:	20000be0 	.word	0x20000be0
 80051c4:	20000bdc 	.word	0x20000bdc
 80051c8:	20000bc8 	.word	0x20000bc8
 80051cc:	20000bc0 	.word	0x20000bc0

080051d0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80051d0:	b480      	push	{r7}
 80051d2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80051d4:	4b04      	ldr	r3, [pc, #16]	; (80051e8 <vTaskSuspendAll+0x18>)
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	3301      	adds	r3, #1
 80051da:	4a03      	ldr	r2, [pc, #12]	; (80051e8 <vTaskSuspendAll+0x18>)
 80051dc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80051de:	bf00      	nop
 80051e0:	46bd      	mov	sp, r7
 80051e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e6:	4770      	bx	lr
 80051e8:	20000be4 	.word	0x20000be4

080051ec <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80051ec:	b580      	push	{r7, lr}
 80051ee:	b084      	sub	sp, #16
 80051f0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80051f2:	2300      	movs	r3, #0
 80051f4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80051f6:	2300      	movs	r3, #0
 80051f8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80051fa:	4b42      	ldr	r3, [pc, #264]	; (8005304 <xTaskResumeAll+0x118>)
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d10a      	bne.n	8005218 <xTaskResumeAll+0x2c>
	__asm volatile
 8005202:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005206:	f383 8811 	msr	BASEPRI, r3
 800520a:	f3bf 8f6f 	isb	sy
 800520e:	f3bf 8f4f 	dsb	sy
 8005212:	603b      	str	r3, [r7, #0]
}
 8005214:	bf00      	nop
 8005216:	e7fe      	b.n	8005216 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005218:	f001 f914 	bl	8006444 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800521c:	4b39      	ldr	r3, [pc, #228]	; (8005304 <xTaskResumeAll+0x118>)
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	3b01      	subs	r3, #1
 8005222:	4a38      	ldr	r2, [pc, #224]	; (8005304 <xTaskResumeAll+0x118>)
 8005224:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005226:	4b37      	ldr	r3, [pc, #220]	; (8005304 <xTaskResumeAll+0x118>)
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	2b00      	cmp	r3, #0
 800522c:	d162      	bne.n	80052f4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800522e:	4b36      	ldr	r3, [pc, #216]	; (8005308 <xTaskResumeAll+0x11c>)
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	2b00      	cmp	r3, #0
 8005234:	d05e      	beq.n	80052f4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005236:	e02f      	b.n	8005298 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005238:	4b34      	ldr	r3, [pc, #208]	; (800530c <xTaskResumeAll+0x120>)
 800523a:	68db      	ldr	r3, [r3, #12]
 800523c:	68db      	ldr	r3, [r3, #12]
 800523e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	3318      	adds	r3, #24
 8005244:	4618      	mov	r0, r3
 8005246:	f7ff f871 	bl	800432c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	3304      	adds	r3, #4
 800524e:	4618      	mov	r0, r3
 8005250:	f7ff f86c 	bl	800432c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005258:	4b2d      	ldr	r3, [pc, #180]	; (8005310 <xTaskResumeAll+0x124>)
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	429a      	cmp	r2, r3
 800525e:	d903      	bls.n	8005268 <xTaskResumeAll+0x7c>
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005264:	4a2a      	ldr	r2, [pc, #168]	; (8005310 <xTaskResumeAll+0x124>)
 8005266:	6013      	str	r3, [r2, #0]
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800526c:	4613      	mov	r3, r2
 800526e:	009b      	lsls	r3, r3, #2
 8005270:	4413      	add	r3, r2
 8005272:	009b      	lsls	r3, r3, #2
 8005274:	4a27      	ldr	r2, [pc, #156]	; (8005314 <xTaskResumeAll+0x128>)
 8005276:	441a      	add	r2, r3
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	3304      	adds	r3, #4
 800527c:	4619      	mov	r1, r3
 800527e:	4610      	mov	r0, r2
 8005280:	f7fe fff7 	bl	8004272 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005288:	4b23      	ldr	r3, [pc, #140]	; (8005318 <xTaskResumeAll+0x12c>)
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800528e:	429a      	cmp	r2, r3
 8005290:	d302      	bcc.n	8005298 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8005292:	4b22      	ldr	r3, [pc, #136]	; (800531c <xTaskResumeAll+0x130>)
 8005294:	2201      	movs	r2, #1
 8005296:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005298:	4b1c      	ldr	r3, [pc, #112]	; (800530c <xTaskResumeAll+0x120>)
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	2b00      	cmp	r3, #0
 800529e:	d1cb      	bne.n	8005238 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d001      	beq.n	80052aa <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80052a6:	f000 fb55 	bl	8005954 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80052aa:	4b1d      	ldr	r3, [pc, #116]	; (8005320 <xTaskResumeAll+0x134>)
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d010      	beq.n	80052d8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80052b6:	f000 f847 	bl	8005348 <xTaskIncrementTick>
 80052ba:	4603      	mov	r3, r0
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d002      	beq.n	80052c6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80052c0:	4b16      	ldr	r3, [pc, #88]	; (800531c <xTaskResumeAll+0x130>)
 80052c2:	2201      	movs	r2, #1
 80052c4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	3b01      	subs	r3, #1
 80052ca:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d1f1      	bne.n	80052b6 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80052d2:	4b13      	ldr	r3, [pc, #76]	; (8005320 <xTaskResumeAll+0x134>)
 80052d4:	2200      	movs	r2, #0
 80052d6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80052d8:	4b10      	ldr	r3, [pc, #64]	; (800531c <xTaskResumeAll+0x130>)
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d009      	beq.n	80052f4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80052e0:	2301      	movs	r3, #1
 80052e2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80052e4:	4b0f      	ldr	r3, [pc, #60]	; (8005324 <xTaskResumeAll+0x138>)
 80052e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80052ea:	601a      	str	r2, [r3, #0]
 80052ec:	f3bf 8f4f 	dsb	sy
 80052f0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80052f4:	f001 f8d6 	bl	80064a4 <vPortExitCritical>

	return xAlreadyYielded;
 80052f8:	68bb      	ldr	r3, [r7, #8]
}
 80052fa:	4618      	mov	r0, r3
 80052fc:	3710      	adds	r7, #16
 80052fe:	46bd      	mov	sp, r7
 8005300:	bd80      	pop	{r7, pc}
 8005302:	bf00      	nop
 8005304:	20000be4 	.word	0x20000be4
 8005308:	20000bbc 	.word	0x20000bbc
 800530c:	20000b7c 	.word	0x20000b7c
 8005310:	20000bc4 	.word	0x20000bc4
 8005314:	200006ec 	.word	0x200006ec
 8005318:	200006e8 	.word	0x200006e8
 800531c:	20000bd0 	.word	0x20000bd0
 8005320:	20000bcc 	.word	0x20000bcc
 8005324:	e000ed04 	.word	0xe000ed04

08005328 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005328:	b480      	push	{r7}
 800532a:	b083      	sub	sp, #12
 800532c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800532e:	4b05      	ldr	r3, [pc, #20]	; (8005344 <xTaskGetTickCount+0x1c>)
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005334:	687b      	ldr	r3, [r7, #4]
}
 8005336:	4618      	mov	r0, r3
 8005338:	370c      	adds	r7, #12
 800533a:	46bd      	mov	sp, r7
 800533c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005340:	4770      	bx	lr
 8005342:	bf00      	nop
 8005344:	20000bc0 	.word	0x20000bc0

08005348 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005348:	b580      	push	{r7, lr}
 800534a:	b086      	sub	sp, #24
 800534c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800534e:	2300      	movs	r3, #0
 8005350:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005352:	4b4f      	ldr	r3, [pc, #316]	; (8005490 <xTaskIncrementTick+0x148>)
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	2b00      	cmp	r3, #0
 8005358:	f040 808f 	bne.w	800547a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800535c:	4b4d      	ldr	r3, [pc, #308]	; (8005494 <xTaskIncrementTick+0x14c>)
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	3301      	adds	r3, #1
 8005362:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005364:	4a4b      	ldr	r2, [pc, #300]	; (8005494 <xTaskIncrementTick+0x14c>)
 8005366:	693b      	ldr	r3, [r7, #16]
 8005368:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800536a:	693b      	ldr	r3, [r7, #16]
 800536c:	2b00      	cmp	r3, #0
 800536e:	d120      	bne.n	80053b2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005370:	4b49      	ldr	r3, [pc, #292]	; (8005498 <xTaskIncrementTick+0x150>)
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	2b00      	cmp	r3, #0
 8005378:	d00a      	beq.n	8005390 <xTaskIncrementTick+0x48>
	__asm volatile
 800537a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800537e:	f383 8811 	msr	BASEPRI, r3
 8005382:	f3bf 8f6f 	isb	sy
 8005386:	f3bf 8f4f 	dsb	sy
 800538a:	603b      	str	r3, [r7, #0]
}
 800538c:	bf00      	nop
 800538e:	e7fe      	b.n	800538e <xTaskIncrementTick+0x46>
 8005390:	4b41      	ldr	r3, [pc, #260]	; (8005498 <xTaskIncrementTick+0x150>)
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	60fb      	str	r3, [r7, #12]
 8005396:	4b41      	ldr	r3, [pc, #260]	; (800549c <xTaskIncrementTick+0x154>)
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	4a3f      	ldr	r2, [pc, #252]	; (8005498 <xTaskIncrementTick+0x150>)
 800539c:	6013      	str	r3, [r2, #0]
 800539e:	4a3f      	ldr	r2, [pc, #252]	; (800549c <xTaskIncrementTick+0x154>)
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	6013      	str	r3, [r2, #0]
 80053a4:	4b3e      	ldr	r3, [pc, #248]	; (80054a0 <xTaskIncrementTick+0x158>)
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	3301      	adds	r3, #1
 80053aa:	4a3d      	ldr	r2, [pc, #244]	; (80054a0 <xTaskIncrementTick+0x158>)
 80053ac:	6013      	str	r3, [r2, #0]
 80053ae:	f000 fad1 	bl	8005954 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80053b2:	4b3c      	ldr	r3, [pc, #240]	; (80054a4 <xTaskIncrementTick+0x15c>)
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	693a      	ldr	r2, [r7, #16]
 80053b8:	429a      	cmp	r2, r3
 80053ba:	d349      	bcc.n	8005450 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80053bc:	4b36      	ldr	r3, [pc, #216]	; (8005498 <xTaskIncrementTick+0x150>)
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d104      	bne.n	80053d0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80053c6:	4b37      	ldr	r3, [pc, #220]	; (80054a4 <xTaskIncrementTick+0x15c>)
 80053c8:	f04f 32ff 	mov.w	r2, #4294967295
 80053cc:	601a      	str	r2, [r3, #0]
					break;
 80053ce:	e03f      	b.n	8005450 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80053d0:	4b31      	ldr	r3, [pc, #196]	; (8005498 <xTaskIncrementTick+0x150>)
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	68db      	ldr	r3, [r3, #12]
 80053d6:	68db      	ldr	r3, [r3, #12]
 80053d8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80053da:	68bb      	ldr	r3, [r7, #8]
 80053dc:	685b      	ldr	r3, [r3, #4]
 80053de:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80053e0:	693a      	ldr	r2, [r7, #16]
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	429a      	cmp	r2, r3
 80053e6:	d203      	bcs.n	80053f0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80053e8:	4a2e      	ldr	r2, [pc, #184]	; (80054a4 <xTaskIncrementTick+0x15c>)
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80053ee:	e02f      	b.n	8005450 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80053f0:	68bb      	ldr	r3, [r7, #8]
 80053f2:	3304      	adds	r3, #4
 80053f4:	4618      	mov	r0, r3
 80053f6:	f7fe ff99 	bl	800432c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80053fa:	68bb      	ldr	r3, [r7, #8]
 80053fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d004      	beq.n	800540c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005402:	68bb      	ldr	r3, [r7, #8]
 8005404:	3318      	adds	r3, #24
 8005406:	4618      	mov	r0, r3
 8005408:	f7fe ff90 	bl	800432c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800540c:	68bb      	ldr	r3, [r7, #8]
 800540e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005410:	4b25      	ldr	r3, [pc, #148]	; (80054a8 <xTaskIncrementTick+0x160>)
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	429a      	cmp	r2, r3
 8005416:	d903      	bls.n	8005420 <xTaskIncrementTick+0xd8>
 8005418:	68bb      	ldr	r3, [r7, #8]
 800541a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800541c:	4a22      	ldr	r2, [pc, #136]	; (80054a8 <xTaskIncrementTick+0x160>)
 800541e:	6013      	str	r3, [r2, #0]
 8005420:	68bb      	ldr	r3, [r7, #8]
 8005422:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005424:	4613      	mov	r3, r2
 8005426:	009b      	lsls	r3, r3, #2
 8005428:	4413      	add	r3, r2
 800542a:	009b      	lsls	r3, r3, #2
 800542c:	4a1f      	ldr	r2, [pc, #124]	; (80054ac <xTaskIncrementTick+0x164>)
 800542e:	441a      	add	r2, r3
 8005430:	68bb      	ldr	r3, [r7, #8]
 8005432:	3304      	adds	r3, #4
 8005434:	4619      	mov	r1, r3
 8005436:	4610      	mov	r0, r2
 8005438:	f7fe ff1b 	bl	8004272 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800543c:	68bb      	ldr	r3, [r7, #8]
 800543e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005440:	4b1b      	ldr	r3, [pc, #108]	; (80054b0 <xTaskIncrementTick+0x168>)
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005446:	429a      	cmp	r2, r3
 8005448:	d3b8      	bcc.n	80053bc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800544a:	2301      	movs	r3, #1
 800544c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800544e:	e7b5      	b.n	80053bc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005450:	4b17      	ldr	r3, [pc, #92]	; (80054b0 <xTaskIncrementTick+0x168>)
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005456:	4915      	ldr	r1, [pc, #84]	; (80054ac <xTaskIncrementTick+0x164>)
 8005458:	4613      	mov	r3, r2
 800545a:	009b      	lsls	r3, r3, #2
 800545c:	4413      	add	r3, r2
 800545e:	009b      	lsls	r3, r3, #2
 8005460:	440b      	add	r3, r1
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	2b01      	cmp	r3, #1
 8005466:	d901      	bls.n	800546c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8005468:	2301      	movs	r3, #1
 800546a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800546c:	4b11      	ldr	r3, [pc, #68]	; (80054b4 <xTaskIncrementTick+0x16c>)
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	2b00      	cmp	r3, #0
 8005472:	d007      	beq.n	8005484 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8005474:	2301      	movs	r3, #1
 8005476:	617b      	str	r3, [r7, #20]
 8005478:	e004      	b.n	8005484 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800547a:	4b0f      	ldr	r3, [pc, #60]	; (80054b8 <xTaskIncrementTick+0x170>)
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	3301      	adds	r3, #1
 8005480:	4a0d      	ldr	r2, [pc, #52]	; (80054b8 <xTaskIncrementTick+0x170>)
 8005482:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005484:	697b      	ldr	r3, [r7, #20]
}
 8005486:	4618      	mov	r0, r3
 8005488:	3718      	adds	r7, #24
 800548a:	46bd      	mov	sp, r7
 800548c:	bd80      	pop	{r7, pc}
 800548e:	bf00      	nop
 8005490:	20000be4 	.word	0x20000be4
 8005494:	20000bc0 	.word	0x20000bc0
 8005498:	20000b74 	.word	0x20000b74
 800549c:	20000b78 	.word	0x20000b78
 80054a0:	20000bd4 	.word	0x20000bd4
 80054a4:	20000bdc 	.word	0x20000bdc
 80054a8:	20000bc4 	.word	0x20000bc4
 80054ac:	200006ec 	.word	0x200006ec
 80054b0:	200006e8 	.word	0x200006e8
 80054b4:	20000bd0 	.word	0x20000bd0
 80054b8:	20000bcc 	.word	0x20000bcc

080054bc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80054bc:	b480      	push	{r7}
 80054be:	b085      	sub	sp, #20
 80054c0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80054c2:	4b28      	ldr	r3, [pc, #160]	; (8005564 <vTaskSwitchContext+0xa8>)
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d003      	beq.n	80054d2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80054ca:	4b27      	ldr	r3, [pc, #156]	; (8005568 <vTaskSwitchContext+0xac>)
 80054cc:	2201      	movs	r2, #1
 80054ce:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80054d0:	e041      	b.n	8005556 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 80054d2:	4b25      	ldr	r3, [pc, #148]	; (8005568 <vTaskSwitchContext+0xac>)
 80054d4:	2200      	movs	r2, #0
 80054d6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80054d8:	4b24      	ldr	r3, [pc, #144]	; (800556c <vTaskSwitchContext+0xb0>)
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	60fb      	str	r3, [r7, #12]
 80054de:	e010      	b.n	8005502 <vTaskSwitchContext+0x46>
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d10a      	bne.n	80054fc <vTaskSwitchContext+0x40>
	__asm volatile
 80054e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054ea:	f383 8811 	msr	BASEPRI, r3
 80054ee:	f3bf 8f6f 	isb	sy
 80054f2:	f3bf 8f4f 	dsb	sy
 80054f6:	607b      	str	r3, [r7, #4]
}
 80054f8:	bf00      	nop
 80054fa:	e7fe      	b.n	80054fa <vTaskSwitchContext+0x3e>
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	3b01      	subs	r3, #1
 8005500:	60fb      	str	r3, [r7, #12]
 8005502:	491b      	ldr	r1, [pc, #108]	; (8005570 <vTaskSwitchContext+0xb4>)
 8005504:	68fa      	ldr	r2, [r7, #12]
 8005506:	4613      	mov	r3, r2
 8005508:	009b      	lsls	r3, r3, #2
 800550a:	4413      	add	r3, r2
 800550c:	009b      	lsls	r3, r3, #2
 800550e:	440b      	add	r3, r1
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	2b00      	cmp	r3, #0
 8005514:	d0e4      	beq.n	80054e0 <vTaskSwitchContext+0x24>
 8005516:	68fa      	ldr	r2, [r7, #12]
 8005518:	4613      	mov	r3, r2
 800551a:	009b      	lsls	r3, r3, #2
 800551c:	4413      	add	r3, r2
 800551e:	009b      	lsls	r3, r3, #2
 8005520:	4a13      	ldr	r2, [pc, #76]	; (8005570 <vTaskSwitchContext+0xb4>)
 8005522:	4413      	add	r3, r2
 8005524:	60bb      	str	r3, [r7, #8]
 8005526:	68bb      	ldr	r3, [r7, #8]
 8005528:	685b      	ldr	r3, [r3, #4]
 800552a:	685a      	ldr	r2, [r3, #4]
 800552c:	68bb      	ldr	r3, [r7, #8]
 800552e:	605a      	str	r2, [r3, #4]
 8005530:	68bb      	ldr	r3, [r7, #8]
 8005532:	685a      	ldr	r2, [r3, #4]
 8005534:	68bb      	ldr	r3, [r7, #8]
 8005536:	3308      	adds	r3, #8
 8005538:	429a      	cmp	r2, r3
 800553a:	d104      	bne.n	8005546 <vTaskSwitchContext+0x8a>
 800553c:	68bb      	ldr	r3, [r7, #8]
 800553e:	685b      	ldr	r3, [r3, #4]
 8005540:	685a      	ldr	r2, [r3, #4]
 8005542:	68bb      	ldr	r3, [r7, #8]
 8005544:	605a      	str	r2, [r3, #4]
 8005546:	68bb      	ldr	r3, [r7, #8]
 8005548:	685b      	ldr	r3, [r3, #4]
 800554a:	68db      	ldr	r3, [r3, #12]
 800554c:	4a09      	ldr	r2, [pc, #36]	; (8005574 <vTaskSwitchContext+0xb8>)
 800554e:	6013      	str	r3, [r2, #0]
 8005550:	4a06      	ldr	r2, [pc, #24]	; (800556c <vTaskSwitchContext+0xb0>)
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	6013      	str	r3, [r2, #0]
}
 8005556:	bf00      	nop
 8005558:	3714      	adds	r7, #20
 800555a:	46bd      	mov	sp, r7
 800555c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005560:	4770      	bx	lr
 8005562:	bf00      	nop
 8005564:	20000be4 	.word	0x20000be4
 8005568:	20000bd0 	.word	0x20000bd0
 800556c:	20000bc4 	.word	0x20000bc4
 8005570:	200006ec 	.word	0x200006ec
 8005574:	200006e8 	.word	0x200006e8

08005578 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005578:	b580      	push	{r7, lr}
 800557a:	b084      	sub	sp, #16
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
 8005580:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	2b00      	cmp	r3, #0
 8005586:	d10a      	bne.n	800559e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8005588:	f04f 0350 	mov.w	r3, #80	; 0x50
 800558c:	f383 8811 	msr	BASEPRI, r3
 8005590:	f3bf 8f6f 	isb	sy
 8005594:	f3bf 8f4f 	dsb	sy
 8005598:	60fb      	str	r3, [r7, #12]
}
 800559a:	bf00      	nop
 800559c:	e7fe      	b.n	800559c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800559e:	4b07      	ldr	r3, [pc, #28]	; (80055bc <vTaskPlaceOnEventList+0x44>)
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	3318      	adds	r3, #24
 80055a4:	4619      	mov	r1, r3
 80055a6:	6878      	ldr	r0, [r7, #4]
 80055a8:	f7fe fe87 	bl	80042ba <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80055ac:	2101      	movs	r1, #1
 80055ae:	6838      	ldr	r0, [r7, #0]
 80055b0:	f000 fa7c 	bl	8005aac <prvAddCurrentTaskToDelayedList>
}
 80055b4:	bf00      	nop
 80055b6:	3710      	adds	r7, #16
 80055b8:	46bd      	mov	sp, r7
 80055ba:	bd80      	pop	{r7, pc}
 80055bc:	200006e8 	.word	0x200006e8

080055c0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80055c0:	b580      	push	{r7, lr}
 80055c2:	b086      	sub	sp, #24
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	60f8      	str	r0, [r7, #12]
 80055c8:	60b9      	str	r1, [r7, #8]
 80055ca:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d10a      	bne.n	80055e8 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80055d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055d6:	f383 8811 	msr	BASEPRI, r3
 80055da:	f3bf 8f6f 	isb	sy
 80055de:	f3bf 8f4f 	dsb	sy
 80055e2:	617b      	str	r3, [r7, #20]
}
 80055e4:	bf00      	nop
 80055e6:	e7fe      	b.n	80055e6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80055e8:	4b0a      	ldr	r3, [pc, #40]	; (8005614 <vTaskPlaceOnEventListRestricted+0x54>)
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	3318      	adds	r3, #24
 80055ee:	4619      	mov	r1, r3
 80055f0:	68f8      	ldr	r0, [r7, #12]
 80055f2:	f7fe fe3e 	bl	8004272 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d002      	beq.n	8005602 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80055fc:	f04f 33ff 	mov.w	r3, #4294967295
 8005600:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005602:	6879      	ldr	r1, [r7, #4]
 8005604:	68b8      	ldr	r0, [r7, #8]
 8005606:	f000 fa51 	bl	8005aac <prvAddCurrentTaskToDelayedList>
	}
 800560a:	bf00      	nop
 800560c:	3718      	adds	r7, #24
 800560e:	46bd      	mov	sp, r7
 8005610:	bd80      	pop	{r7, pc}
 8005612:	bf00      	nop
 8005614:	200006e8 	.word	0x200006e8

08005618 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005618:	b580      	push	{r7, lr}
 800561a:	b086      	sub	sp, #24
 800561c:	af00      	add	r7, sp, #0
 800561e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	68db      	ldr	r3, [r3, #12]
 8005624:	68db      	ldr	r3, [r3, #12]
 8005626:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005628:	693b      	ldr	r3, [r7, #16]
 800562a:	2b00      	cmp	r3, #0
 800562c:	d10a      	bne.n	8005644 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800562e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005632:	f383 8811 	msr	BASEPRI, r3
 8005636:	f3bf 8f6f 	isb	sy
 800563a:	f3bf 8f4f 	dsb	sy
 800563e:	60fb      	str	r3, [r7, #12]
}
 8005640:	bf00      	nop
 8005642:	e7fe      	b.n	8005642 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005644:	693b      	ldr	r3, [r7, #16]
 8005646:	3318      	adds	r3, #24
 8005648:	4618      	mov	r0, r3
 800564a:	f7fe fe6f 	bl	800432c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800564e:	4b1e      	ldr	r3, [pc, #120]	; (80056c8 <xTaskRemoveFromEventList+0xb0>)
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	2b00      	cmp	r3, #0
 8005654:	d11d      	bne.n	8005692 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005656:	693b      	ldr	r3, [r7, #16]
 8005658:	3304      	adds	r3, #4
 800565a:	4618      	mov	r0, r3
 800565c:	f7fe fe66 	bl	800432c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005660:	693b      	ldr	r3, [r7, #16]
 8005662:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005664:	4b19      	ldr	r3, [pc, #100]	; (80056cc <xTaskRemoveFromEventList+0xb4>)
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	429a      	cmp	r2, r3
 800566a:	d903      	bls.n	8005674 <xTaskRemoveFromEventList+0x5c>
 800566c:	693b      	ldr	r3, [r7, #16]
 800566e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005670:	4a16      	ldr	r2, [pc, #88]	; (80056cc <xTaskRemoveFromEventList+0xb4>)
 8005672:	6013      	str	r3, [r2, #0]
 8005674:	693b      	ldr	r3, [r7, #16]
 8005676:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005678:	4613      	mov	r3, r2
 800567a:	009b      	lsls	r3, r3, #2
 800567c:	4413      	add	r3, r2
 800567e:	009b      	lsls	r3, r3, #2
 8005680:	4a13      	ldr	r2, [pc, #76]	; (80056d0 <xTaskRemoveFromEventList+0xb8>)
 8005682:	441a      	add	r2, r3
 8005684:	693b      	ldr	r3, [r7, #16]
 8005686:	3304      	adds	r3, #4
 8005688:	4619      	mov	r1, r3
 800568a:	4610      	mov	r0, r2
 800568c:	f7fe fdf1 	bl	8004272 <vListInsertEnd>
 8005690:	e005      	b.n	800569e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005692:	693b      	ldr	r3, [r7, #16]
 8005694:	3318      	adds	r3, #24
 8005696:	4619      	mov	r1, r3
 8005698:	480e      	ldr	r0, [pc, #56]	; (80056d4 <xTaskRemoveFromEventList+0xbc>)
 800569a:	f7fe fdea 	bl	8004272 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800569e:	693b      	ldr	r3, [r7, #16]
 80056a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056a2:	4b0d      	ldr	r3, [pc, #52]	; (80056d8 <xTaskRemoveFromEventList+0xc0>)
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056a8:	429a      	cmp	r2, r3
 80056aa:	d905      	bls.n	80056b8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80056ac:	2301      	movs	r3, #1
 80056ae:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80056b0:	4b0a      	ldr	r3, [pc, #40]	; (80056dc <xTaskRemoveFromEventList+0xc4>)
 80056b2:	2201      	movs	r2, #1
 80056b4:	601a      	str	r2, [r3, #0]
 80056b6:	e001      	b.n	80056bc <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80056b8:	2300      	movs	r3, #0
 80056ba:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80056bc:	697b      	ldr	r3, [r7, #20]
}
 80056be:	4618      	mov	r0, r3
 80056c0:	3718      	adds	r7, #24
 80056c2:	46bd      	mov	sp, r7
 80056c4:	bd80      	pop	{r7, pc}
 80056c6:	bf00      	nop
 80056c8:	20000be4 	.word	0x20000be4
 80056cc:	20000bc4 	.word	0x20000bc4
 80056d0:	200006ec 	.word	0x200006ec
 80056d4:	20000b7c 	.word	0x20000b7c
 80056d8:	200006e8 	.word	0x200006e8
 80056dc:	20000bd0 	.word	0x20000bd0

080056e0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80056e0:	b480      	push	{r7}
 80056e2:	b083      	sub	sp, #12
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80056e8:	4b06      	ldr	r3, [pc, #24]	; (8005704 <vTaskInternalSetTimeOutState+0x24>)
 80056ea:	681a      	ldr	r2, [r3, #0]
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80056f0:	4b05      	ldr	r3, [pc, #20]	; (8005708 <vTaskInternalSetTimeOutState+0x28>)
 80056f2:	681a      	ldr	r2, [r3, #0]
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	605a      	str	r2, [r3, #4]
}
 80056f8:	bf00      	nop
 80056fa:	370c      	adds	r7, #12
 80056fc:	46bd      	mov	sp, r7
 80056fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005702:	4770      	bx	lr
 8005704:	20000bd4 	.word	0x20000bd4
 8005708:	20000bc0 	.word	0x20000bc0

0800570c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800570c:	b580      	push	{r7, lr}
 800570e:	b088      	sub	sp, #32
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]
 8005714:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	2b00      	cmp	r3, #0
 800571a:	d10a      	bne.n	8005732 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800571c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005720:	f383 8811 	msr	BASEPRI, r3
 8005724:	f3bf 8f6f 	isb	sy
 8005728:	f3bf 8f4f 	dsb	sy
 800572c:	613b      	str	r3, [r7, #16]
}
 800572e:	bf00      	nop
 8005730:	e7fe      	b.n	8005730 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005732:	683b      	ldr	r3, [r7, #0]
 8005734:	2b00      	cmp	r3, #0
 8005736:	d10a      	bne.n	800574e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8005738:	f04f 0350 	mov.w	r3, #80	; 0x50
 800573c:	f383 8811 	msr	BASEPRI, r3
 8005740:	f3bf 8f6f 	isb	sy
 8005744:	f3bf 8f4f 	dsb	sy
 8005748:	60fb      	str	r3, [r7, #12]
}
 800574a:	bf00      	nop
 800574c:	e7fe      	b.n	800574c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800574e:	f000 fe79 	bl	8006444 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005752:	4b1d      	ldr	r3, [pc, #116]	; (80057c8 <xTaskCheckForTimeOut+0xbc>)
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	685b      	ldr	r3, [r3, #4]
 800575c:	69ba      	ldr	r2, [r7, #24]
 800575e:	1ad3      	subs	r3, r2, r3
 8005760:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005762:	683b      	ldr	r3, [r7, #0]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	f1b3 3fff 	cmp.w	r3, #4294967295
 800576a:	d102      	bne.n	8005772 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800576c:	2300      	movs	r3, #0
 800576e:	61fb      	str	r3, [r7, #28]
 8005770:	e023      	b.n	80057ba <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681a      	ldr	r2, [r3, #0]
 8005776:	4b15      	ldr	r3, [pc, #84]	; (80057cc <xTaskCheckForTimeOut+0xc0>)
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	429a      	cmp	r2, r3
 800577c:	d007      	beq.n	800578e <xTaskCheckForTimeOut+0x82>
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	685b      	ldr	r3, [r3, #4]
 8005782:	69ba      	ldr	r2, [r7, #24]
 8005784:	429a      	cmp	r2, r3
 8005786:	d302      	bcc.n	800578e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005788:	2301      	movs	r3, #1
 800578a:	61fb      	str	r3, [r7, #28]
 800578c:	e015      	b.n	80057ba <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800578e:	683b      	ldr	r3, [r7, #0]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	697a      	ldr	r2, [r7, #20]
 8005794:	429a      	cmp	r2, r3
 8005796:	d20b      	bcs.n	80057b0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005798:	683b      	ldr	r3, [r7, #0]
 800579a:	681a      	ldr	r2, [r3, #0]
 800579c:	697b      	ldr	r3, [r7, #20]
 800579e:	1ad2      	subs	r2, r2, r3
 80057a0:	683b      	ldr	r3, [r7, #0]
 80057a2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80057a4:	6878      	ldr	r0, [r7, #4]
 80057a6:	f7ff ff9b 	bl	80056e0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80057aa:	2300      	movs	r3, #0
 80057ac:	61fb      	str	r3, [r7, #28]
 80057ae:	e004      	b.n	80057ba <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80057b0:	683b      	ldr	r3, [r7, #0]
 80057b2:	2200      	movs	r2, #0
 80057b4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80057b6:	2301      	movs	r3, #1
 80057b8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80057ba:	f000 fe73 	bl	80064a4 <vPortExitCritical>

	return xReturn;
 80057be:	69fb      	ldr	r3, [r7, #28]
}
 80057c0:	4618      	mov	r0, r3
 80057c2:	3720      	adds	r7, #32
 80057c4:	46bd      	mov	sp, r7
 80057c6:	bd80      	pop	{r7, pc}
 80057c8:	20000bc0 	.word	0x20000bc0
 80057cc:	20000bd4 	.word	0x20000bd4

080057d0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80057d0:	b480      	push	{r7}
 80057d2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80057d4:	4b03      	ldr	r3, [pc, #12]	; (80057e4 <vTaskMissedYield+0x14>)
 80057d6:	2201      	movs	r2, #1
 80057d8:	601a      	str	r2, [r3, #0]
}
 80057da:	bf00      	nop
 80057dc:	46bd      	mov	sp, r7
 80057de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e2:	4770      	bx	lr
 80057e4:	20000bd0 	.word	0x20000bd0

080057e8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80057e8:	b580      	push	{r7, lr}
 80057ea:	b082      	sub	sp, #8
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80057f0:	f000 f852 	bl	8005898 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80057f4:	4b06      	ldr	r3, [pc, #24]	; (8005810 <prvIdleTask+0x28>)
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	2b01      	cmp	r3, #1
 80057fa:	d9f9      	bls.n	80057f0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80057fc:	4b05      	ldr	r3, [pc, #20]	; (8005814 <prvIdleTask+0x2c>)
 80057fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005802:	601a      	str	r2, [r3, #0]
 8005804:	f3bf 8f4f 	dsb	sy
 8005808:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800580c:	e7f0      	b.n	80057f0 <prvIdleTask+0x8>
 800580e:	bf00      	nop
 8005810:	200006ec 	.word	0x200006ec
 8005814:	e000ed04 	.word	0xe000ed04

08005818 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005818:	b580      	push	{r7, lr}
 800581a:	b082      	sub	sp, #8
 800581c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800581e:	2300      	movs	r3, #0
 8005820:	607b      	str	r3, [r7, #4]
 8005822:	e00c      	b.n	800583e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005824:	687a      	ldr	r2, [r7, #4]
 8005826:	4613      	mov	r3, r2
 8005828:	009b      	lsls	r3, r3, #2
 800582a:	4413      	add	r3, r2
 800582c:	009b      	lsls	r3, r3, #2
 800582e:	4a12      	ldr	r2, [pc, #72]	; (8005878 <prvInitialiseTaskLists+0x60>)
 8005830:	4413      	add	r3, r2
 8005832:	4618      	mov	r0, r3
 8005834:	f7fe fcf0 	bl	8004218 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	3301      	adds	r3, #1
 800583c:	607b      	str	r3, [r7, #4]
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	2b37      	cmp	r3, #55	; 0x37
 8005842:	d9ef      	bls.n	8005824 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005844:	480d      	ldr	r0, [pc, #52]	; (800587c <prvInitialiseTaskLists+0x64>)
 8005846:	f7fe fce7 	bl	8004218 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800584a:	480d      	ldr	r0, [pc, #52]	; (8005880 <prvInitialiseTaskLists+0x68>)
 800584c:	f7fe fce4 	bl	8004218 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005850:	480c      	ldr	r0, [pc, #48]	; (8005884 <prvInitialiseTaskLists+0x6c>)
 8005852:	f7fe fce1 	bl	8004218 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005856:	480c      	ldr	r0, [pc, #48]	; (8005888 <prvInitialiseTaskLists+0x70>)
 8005858:	f7fe fcde 	bl	8004218 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800585c:	480b      	ldr	r0, [pc, #44]	; (800588c <prvInitialiseTaskLists+0x74>)
 800585e:	f7fe fcdb 	bl	8004218 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005862:	4b0b      	ldr	r3, [pc, #44]	; (8005890 <prvInitialiseTaskLists+0x78>)
 8005864:	4a05      	ldr	r2, [pc, #20]	; (800587c <prvInitialiseTaskLists+0x64>)
 8005866:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005868:	4b0a      	ldr	r3, [pc, #40]	; (8005894 <prvInitialiseTaskLists+0x7c>)
 800586a:	4a05      	ldr	r2, [pc, #20]	; (8005880 <prvInitialiseTaskLists+0x68>)
 800586c:	601a      	str	r2, [r3, #0]
}
 800586e:	bf00      	nop
 8005870:	3708      	adds	r7, #8
 8005872:	46bd      	mov	sp, r7
 8005874:	bd80      	pop	{r7, pc}
 8005876:	bf00      	nop
 8005878:	200006ec 	.word	0x200006ec
 800587c:	20000b4c 	.word	0x20000b4c
 8005880:	20000b60 	.word	0x20000b60
 8005884:	20000b7c 	.word	0x20000b7c
 8005888:	20000b90 	.word	0x20000b90
 800588c:	20000ba8 	.word	0x20000ba8
 8005890:	20000b74 	.word	0x20000b74
 8005894:	20000b78 	.word	0x20000b78

08005898 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005898:	b580      	push	{r7, lr}
 800589a:	b082      	sub	sp, #8
 800589c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800589e:	e019      	b.n	80058d4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80058a0:	f000 fdd0 	bl	8006444 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80058a4:	4b10      	ldr	r3, [pc, #64]	; (80058e8 <prvCheckTasksWaitingTermination+0x50>)
 80058a6:	68db      	ldr	r3, [r3, #12]
 80058a8:	68db      	ldr	r3, [r3, #12]
 80058aa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	3304      	adds	r3, #4
 80058b0:	4618      	mov	r0, r3
 80058b2:	f7fe fd3b 	bl	800432c <uxListRemove>
				--uxCurrentNumberOfTasks;
 80058b6:	4b0d      	ldr	r3, [pc, #52]	; (80058ec <prvCheckTasksWaitingTermination+0x54>)
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	3b01      	subs	r3, #1
 80058bc:	4a0b      	ldr	r2, [pc, #44]	; (80058ec <prvCheckTasksWaitingTermination+0x54>)
 80058be:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80058c0:	4b0b      	ldr	r3, [pc, #44]	; (80058f0 <prvCheckTasksWaitingTermination+0x58>)
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	3b01      	subs	r3, #1
 80058c6:	4a0a      	ldr	r2, [pc, #40]	; (80058f0 <prvCheckTasksWaitingTermination+0x58>)
 80058c8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80058ca:	f000 fdeb 	bl	80064a4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80058ce:	6878      	ldr	r0, [r7, #4]
 80058d0:	f000 f810 	bl	80058f4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80058d4:	4b06      	ldr	r3, [pc, #24]	; (80058f0 <prvCheckTasksWaitingTermination+0x58>)
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d1e1      	bne.n	80058a0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80058dc:	bf00      	nop
 80058de:	bf00      	nop
 80058e0:	3708      	adds	r7, #8
 80058e2:	46bd      	mov	sp, r7
 80058e4:	bd80      	pop	{r7, pc}
 80058e6:	bf00      	nop
 80058e8:	20000b90 	.word	0x20000b90
 80058ec:	20000bbc 	.word	0x20000bbc
 80058f0:	20000ba4 	.word	0x20000ba4

080058f4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80058f4:	b580      	push	{r7, lr}
 80058f6:	b084      	sub	sp, #16
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005902:	2b00      	cmp	r3, #0
 8005904:	d108      	bne.n	8005918 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800590a:	4618      	mov	r0, r3
 800590c:	f000 ff88 	bl	8006820 <vPortFree>
				vPortFree( pxTCB );
 8005910:	6878      	ldr	r0, [r7, #4]
 8005912:	f000 ff85 	bl	8006820 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005916:	e018      	b.n	800594a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800591e:	2b01      	cmp	r3, #1
 8005920:	d103      	bne.n	800592a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005922:	6878      	ldr	r0, [r7, #4]
 8005924:	f000 ff7c 	bl	8006820 <vPortFree>
	}
 8005928:	e00f      	b.n	800594a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005930:	2b02      	cmp	r3, #2
 8005932:	d00a      	beq.n	800594a <prvDeleteTCB+0x56>
	__asm volatile
 8005934:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005938:	f383 8811 	msr	BASEPRI, r3
 800593c:	f3bf 8f6f 	isb	sy
 8005940:	f3bf 8f4f 	dsb	sy
 8005944:	60fb      	str	r3, [r7, #12]
}
 8005946:	bf00      	nop
 8005948:	e7fe      	b.n	8005948 <prvDeleteTCB+0x54>
	}
 800594a:	bf00      	nop
 800594c:	3710      	adds	r7, #16
 800594e:	46bd      	mov	sp, r7
 8005950:	bd80      	pop	{r7, pc}
	...

08005954 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005954:	b480      	push	{r7}
 8005956:	b083      	sub	sp, #12
 8005958:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800595a:	4b0c      	ldr	r3, [pc, #48]	; (800598c <prvResetNextTaskUnblockTime+0x38>)
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	2b00      	cmp	r3, #0
 8005962:	d104      	bne.n	800596e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005964:	4b0a      	ldr	r3, [pc, #40]	; (8005990 <prvResetNextTaskUnblockTime+0x3c>)
 8005966:	f04f 32ff 	mov.w	r2, #4294967295
 800596a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800596c:	e008      	b.n	8005980 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800596e:	4b07      	ldr	r3, [pc, #28]	; (800598c <prvResetNextTaskUnblockTime+0x38>)
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	68db      	ldr	r3, [r3, #12]
 8005974:	68db      	ldr	r3, [r3, #12]
 8005976:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	685b      	ldr	r3, [r3, #4]
 800597c:	4a04      	ldr	r2, [pc, #16]	; (8005990 <prvResetNextTaskUnblockTime+0x3c>)
 800597e:	6013      	str	r3, [r2, #0]
}
 8005980:	bf00      	nop
 8005982:	370c      	adds	r7, #12
 8005984:	46bd      	mov	sp, r7
 8005986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598a:	4770      	bx	lr
 800598c:	20000b74 	.word	0x20000b74
 8005990:	20000bdc 	.word	0x20000bdc

08005994 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005994:	b480      	push	{r7}
 8005996:	b083      	sub	sp, #12
 8005998:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800599a:	4b0b      	ldr	r3, [pc, #44]	; (80059c8 <xTaskGetSchedulerState+0x34>)
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d102      	bne.n	80059a8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80059a2:	2301      	movs	r3, #1
 80059a4:	607b      	str	r3, [r7, #4]
 80059a6:	e008      	b.n	80059ba <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80059a8:	4b08      	ldr	r3, [pc, #32]	; (80059cc <xTaskGetSchedulerState+0x38>)
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d102      	bne.n	80059b6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80059b0:	2302      	movs	r3, #2
 80059b2:	607b      	str	r3, [r7, #4]
 80059b4:	e001      	b.n	80059ba <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80059b6:	2300      	movs	r3, #0
 80059b8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80059ba:	687b      	ldr	r3, [r7, #4]
	}
 80059bc:	4618      	mov	r0, r3
 80059be:	370c      	adds	r7, #12
 80059c0:	46bd      	mov	sp, r7
 80059c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c6:	4770      	bx	lr
 80059c8:	20000bc8 	.word	0x20000bc8
 80059cc:	20000be4 	.word	0x20000be4

080059d0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80059d0:	b580      	push	{r7, lr}
 80059d2:	b086      	sub	sp, #24
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80059dc:	2300      	movs	r3, #0
 80059de:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d056      	beq.n	8005a94 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80059e6:	4b2e      	ldr	r3, [pc, #184]	; (8005aa0 <xTaskPriorityDisinherit+0xd0>)
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	693a      	ldr	r2, [r7, #16]
 80059ec:	429a      	cmp	r2, r3
 80059ee:	d00a      	beq.n	8005a06 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80059f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059f4:	f383 8811 	msr	BASEPRI, r3
 80059f8:	f3bf 8f6f 	isb	sy
 80059fc:	f3bf 8f4f 	dsb	sy
 8005a00:	60fb      	str	r3, [r7, #12]
}
 8005a02:	bf00      	nop
 8005a04:	e7fe      	b.n	8005a04 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005a06:	693b      	ldr	r3, [r7, #16]
 8005a08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d10a      	bne.n	8005a24 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8005a0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a12:	f383 8811 	msr	BASEPRI, r3
 8005a16:	f3bf 8f6f 	isb	sy
 8005a1a:	f3bf 8f4f 	dsb	sy
 8005a1e:	60bb      	str	r3, [r7, #8]
}
 8005a20:	bf00      	nop
 8005a22:	e7fe      	b.n	8005a22 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8005a24:	693b      	ldr	r3, [r7, #16]
 8005a26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a28:	1e5a      	subs	r2, r3, #1
 8005a2a:	693b      	ldr	r3, [r7, #16]
 8005a2c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005a2e:	693b      	ldr	r3, [r7, #16]
 8005a30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a32:	693b      	ldr	r3, [r7, #16]
 8005a34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a36:	429a      	cmp	r2, r3
 8005a38:	d02c      	beq.n	8005a94 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005a3a:	693b      	ldr	r3, [r7, #16]
 8005a3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d128      	bne.n	8005a94 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005a42:	693b      	ldr	r3, [r7, #16]
 8005a44:	3304      	adds	r3, #4
 8005a46:	4618      	mov	r0, r3
 8005a48:	f7fe fc70 	bl	800432c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005a4c:	693b      	ldr	r3, [r7, #16]
 8005a4e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005a50:	693b      	ldr	r3, [r7, #16]
 8005a52:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005a54:	693b      	ldr	r3, [r7, #16]
 8005a56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a58:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005a5c:	693b      	ldr	r3, [r7, #16]
 8005a5e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005a60:	693b      	ldr	r3, [r7, #16]
 8005a62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a64:	4b0f      	ldr	r3, [pc, #60]	; (8005aa4 <xTaskPriorityDisinherit+0xd4>)
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	429a      	cmp	r2, r3
 8005a6a:	d903      	bls.n	8005a74 <xTaskPriorityDisinherit+0xa4>
 8005a6c:	693b      	ldr	r3, [r7, #16]
 8005a6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a70:	4a0c      	ldr	r2, [pc, #48]	; (8005aa4 <xTaskPriorityDisinherit+0xd4>)
 8005a72:	6013      	str	r3, [r2, #0]
 8005a74:	693b      	ldr	r3, [r7, #16]
 8005a76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a78:	4613      	mov	r3, r2
 8005a7a:	009b      	lsls	r3, r3, #2
 8005a7c:	4413      	add	r3, r2
 8005a7e:	009b      	lsls	r3, r3, #2
 8005a80:	4a09      	ldr	r2, [pc, #36]	; (8005aa8 <xTaskPriorityDisinherit+0xd8>)
 8005a82:	441a      	add	r2, r3
 8005a84:	693b      	ldr	r3, [r7, #16]
 8005a86:	3304      	adds	r3, #4
 8005a88:	4619      	mov	r1, r3
 8005a8a:	4610      	mov	r0, r2
 8005a8c:	f7fe fbf1 	bl	8004272 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005a90:	2301      	movs	r3, #1
 8005a92:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005a94:	697b      	ldr	r3, [r7, #20]
	}
 8005a96:	4618      	mov	r0, r3
 8005a98:	3718      	adds	r7, #24
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	bd80      	pop	{r7, pc}
 8005a9e:	bf00      	nop
 8005aa0:	200006e8 	.word	0x200006e8
 8005aa4:	20000bc4 	.word	0x20000bc4
 8005aa8:	200006ec 	.word	0x200006ec

08005aac <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005aac:	b580      	push	{r7, lr}
 8005aae:	b084      	sub	sp, #16
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	6078      	str	r0, [r7, #4]
 8005ab4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005ab6:	4b21      	ldr	r3, [pc, #132]	; (8005b3c <prvAddCurrentTaskToDelayedList+0x90>)
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005abc:	4b20      	ldr	r3, [pc, #128]	; (8005b40 <prvAddCurrentTaskToDelayedList+0x94>)
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	3304      	adds	r3, #4
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	f7fe fc32 	bl	800432c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ace:	d10a      	bne.n	8005ae6 <prvAddCurrentTaskToDelayedList+0x3a>
 8005ad0:	683b      	ldr	r3, [r7, #0]
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d007      	beq.n	8005ae6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005ad6:	4b1a      	ldr	r3, [pc, #104]	; (8005b40 <prvAddCurrentTaskToDelayedList+0x94>)
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	3304      	adds	r3, #4
 8005adc:	4619      	mov	r1, r3
 8005ade:	4819      	ldr	r0, [pc, #100]	; (8005b44 <prvAddCurrentTaskToDelayedList+0x98>)
 8005ae0:	f7fe fbc7 	bl	8004272 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005ae4:	e026      	b.n	8005b34 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005ae6:	68fa      	ldr	r2, [r7, #12]
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	4413      	add	r3, r2
 8005aec:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005aee:	4b14      	ldr	r3, [pc, #80]	; (8005b40 <prvAddCurrentTaskToDelayedList+0x94>)
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	68ba      	ldr	r2, [r7, #8]
 8005af4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005af6:	68ba      	ldr	r2, [r7, #8]
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	429a      	cmp	r2, r3
 8005afc:	d209      	bcs.n	8005b12 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005afe:	4b12      	ldr	r3, [pc, #72]	; (8005b48 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005b00:	681a      	ldr	r2, [r3, #0]
 8005b02:	4b0f      	ldr	r3, [pc, #60]	; (8005b40 <prvAddCurrentTaskToDelayedList+0x94>)
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	3304      	adds	r3, #4
 8005b08:	4619      	mov	r1, r3
 8005b0a:	4610      	mov	r0, r2
 8005b0c:	f7fe fbd5 	bl	80042ba <vListInsert>
}
 8005b10:	e010      	b.n	8005b34 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005b12:	4b0e      	ldr	r3, [pc, #56]	; (8005b4c <prvAddCurrentTaskToDelayedList+0xa0>)
 8005b14:	681a      	ldr	r2, [r3, #0]
 8005b16:	4b0a      	ldr	r3, [pc, #40]	; (8005b40 <prvAddCurrentTaskToDelayedList+0x94>)
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	3304      	adds	r3, #4
 8005b1c:	4619      	mov	r1, r3
 8005b1e:	4610      	mov	r0, r2
 8005b20:	f7fe fbcb 	bl	80042ba <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005b24:	4b0a      	ldr	r3, [pc, #40]	; (8005b50 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	68ba      	ldr	r2, [r7, #8]
 8005b2a:	429a      	cmp	r2, r3
 8005b2c:	d202      	bcs.n	8005b34 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005b2e:	4a08      	ldr	r2, [pc, #32]	; (8005b50 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005b30:	68bb      	ldr	r3, [r7, #8]
 8005b32:	6013      	str	r3, [r2, #0]
}
 8005b34:	bf00      	nop
 8005b36:	3710      	adds	r7, #16
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	bd80      	pop	{r7, pc}
 8005b3c:	20000bc0 	.word	0x20000bc0
 8005b40:	200006e8 	.word	0x200006e8
 8005b44:	20000ba8 	.word	0x20000ba8
 8005b48:	20000b78 	.word	0x20000b78
 8005b4c:	20000b74 	.word	0x20000b74
 8005b50:	20000bdc 	.word	0x20000bdc

08005b54 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005b54:	b580      	push	{r7, lr}
 8005b56:	b08a      	sub	sp, #40	; 0x28
 8005b58:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005b5a:	2300      	movs	r3, #0
 8005b5c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005b5e:	f000 fb07 	bl	8006170 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005b62:	4b1c      	ldr	r3, [pc, #112]	; (8005bd4 <xTimerCreateTimerTask+0x80>)
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d021      	beq.n	8005bae <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005b6a:	2300      	movs	r3, #0
 8005b6c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005b6e:	2300      	movs	r3, #0
 8005b70:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005b72:	1d3a      	adds	r2, r7, #4
 8005b74:	f107 0108 	add.w	r1, r7, #8
 8005b78:	f107 030c 	add.w	r3, r7, #12
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	f7fe fb31 	bl	80041e4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005b82:	6879      	ldr	r1, [r7, #4]
 8005b84:	68bb      	ldr	r3, [r7, #8]
 8005b86:	68fa      	ldr	r2, [r7, #12]
 8005b88:	9202      	str	r2, [sp, #8]
 8005b8a:	9301      	str	r3, [sp, #4]
 8005b8c:	2302      	movs	r3, #2
 8005b8e:	9300      	str	r3, [sp, #0]
 8005b90:	2300      	movs	r3, #0
 8005b92:	460a      	mov	r2, r1
 8005b94:	4910      	ldr	r1, [pc, #64]	; (8005bd8 <xTimerCreateTimerTask+0x84>)
 8005b96:	4811      	ldr	r0, [pc, #68]	; (8005bdc <xTimerCreateTimerTask+0x88>)
 8005b98:	f7ff f8de 	bl	8004d58 <xTaskCreateStatic>
 8005b9c:	4603      	mov	r3, r0
 8005b9e:	4a10      	ldr	r2, [pc, #64]	; (8005be0 <xTimerCreateTimerTask+0x8c>)
 8005ba0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005ba2:	4b0f      	ldr	r3, [pc, #60]	; (8005be0 <xTimerCreateTimerTask+0x8c>)
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d001      	beq.n	8005bae <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005baa:	2301      	movs	r3, #1
 8005bac:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005bae:	697b      	ldr	r3, [r7, #20]
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d10a      	bne.n	8005bca <xTimerCreateTimerTask+0x76>
	__asm volatile
 8005bb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bb8:	f383 8811 	msr	BASEPRI, r3
 8005bbc:	f3bf 8f6f 	isb	sy
 8005bc0:	f3bf 8f4f 	dsb	sy
 8005bc4:	613b      	str	r3, [r7, #16]
}
 8005bc6:	bf00      	nop
 8005bc8:	e7fe      	b.n	8005bc8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8005bca:	697b      	ldr	r3, [r7, #20]
}
 8005bcc:	4618      	mov	r0, r3
 8005bce:	3718      	adds	r7, #24
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	bd80      	pop	{r7, pc}
 8005bd4:	20000c18 	.word	0x20000c18
 8005bd8:	08006bc4 	.word	0x08006bc4
 8005bdc:	08005d19 	.word	0x08005d19
 8005be0:	20000c1c 	.word	0x20000c1c

08005be4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005be4:	b580      	push	{r7, lr}
 8005be6:	b08a      	sub	sp, #40	; 0x28
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	60f8      	str	r0, [r7, #12]
 8005bec:	60b9      	str	r1, [r7, #8]
 8005bee:	607a      	str	r2, [r7, #4]
 8005bf0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005bf2:	2300      	movs	r3, #0
 8005bf4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d10a      	bne.n	8005c12 <xTimerGenericCommand+0x2e>
	__asm volatile
 8005bfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c00:	f383 8811 	msr	BASEPRI, r3
 8005c04:	f3bf 8f6f 	isb	sy
 8005c08:	f3bf 8f4f 	dsb	sy
 8005c0c:	623b      	str	r3, [r7, #32]
}
 8005c0e:	bf00      	nop
 8005c10:	e7fe      	b.n	8005c10 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005c12:	4b1a      	ldr	r3, [pc, #104]	; (8005c7c <xTimerGenericCommand+0x98>)
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d02a      	beq.n	8005c70 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005c1a:	68bb      	ldr	r3, [r7, #8]
 8005c1c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005c26:	68bb      	ldr	r3, [r7, #8]
 8005c28:	2b05      	cmp	r3, #5
 8005c2a:	dc18      	bgt.n	8005c5e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005c2c:	f7ff feb2 	bl	8005994 <xTaskGetSchedulerState>
 8005c30:	4603      	mov	r3, r0
 8005c32:	2b02      	cmp	r3, #2
 8005c34:	d109      	bne.n	8005c4a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005c36:	4b11      	ldr	r3, [pc, #68]	; (8005c7c <xTimerGenericCommand+0x98>)
 8005c38:	6818      	ldr	r0, [r3, #0]
 8005c3a:	f107 0110 	add.w	r1, r7, #16
 8005c3e:	2300      	movs	r3, #0
 8005c40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c42:	f7fe fca1 	bl	8004588 <xQueueGenericSend>
 8005c46:	6278      	str	r0, [r7, #36]	; 0x24
 8005c48:	e012      	b.n	8005c70 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005c4a:	4b0c      	ldr	r3, [pc, #48]	; (8005c7c <xTimerGenericCommand+0x98>)
 8005c4c:	6818      	ldr	r0, [r3, #0]
 8005c4e:	f107 0110 	add.w	r1, r7, #16
 8005c52:	2300      	movs	r3, #0
 8005c54:	2200      	movs	r2, #0
 8005c56:	f7fe fc97 	bl	8004588 <xQueueGenericSend>
 8005c5a:	6278      	str	r0, [r7, #36]	; 0x24
 8005c5c:	e008      	b.n	8005c70 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005c5e:	4b07      	ldr	r3, [pc, #28]	; (8005c7c <xTimerGenericCommand+0x98>)
 8005c60:	6818      	ldr	r0, [r3, #0]
 8005c62:	f107 0110 	add.w	r1, r7, #16
 8005c66:	2300      	movs	r3, #0
 8005c68:	683a      	ldr	r2, [r7, #0]
 8005c6a:	f7fe fd8b 	bl	8004784 <xQueueGenericSendFromISR>
 8005c6e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005c72:	4618      	mov	r0, r3
 8005c74:	3728      	adds	r7, #40	; 0x28
 8005c76:	46bd      	mov	sp, r7
 8005c78:	bd80      	pop	{r7, pc}
 8005c7a:	bf00      	nop
 8005c7c:	20000c18 	.word	0x20000c18

08005c80 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005c80:	b580      	push	{r7, lr}
 8005c82:	b088      	sub	sp, #32
 8005c84:	af02      	add	r7, sp, #8
 8005c86:	6078      	str	r0, [r7, #4]
 8005c88:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c8a:	4b22      	ldr	r3, [pc, #136]	; (8005d14 <prvProcessExpiredTimer+0x94>)
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	68db      	ldr	r3, [r3, #12]
 8005c90:	68db      	ldr	r3, [r3, #12]
 8005c92:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005c94:	697b      	ldr	r3, [r7, #20]
 8005c96:	3304      	adds	r3, #4
 8005c98:	4618      	mov	r0, r3
 8005c9a:	f7fe fb47 	bl	800432c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005c9e:	697b      	ldr	r3, [r7, #20]
 8005ca0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005ca4:	f003 0304 	and.w	r3, r3, #4
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d022      	beq.n	8005cf2 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005cac:	697b      	ldr	r3, [r7, #20]
 8005cae:	699a      	ldr	r2, [r3, #24]
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	18d1      	adds	r1, r2, r3
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	683a      	ldr	r2, [r7, #0]
 8005cb8:	6978      	ldr	r0, [r7, #20]
 8005cba:	f000 f8d1 	bl	8005e60 <prvInsertTimerInActiveList>
 8005cbe:	4603      	mov	r3, r0
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d01f      	beq.n	8005d04 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005cc4:	2300      	movs	r3, #0
 8005cc6:	9300      	str	r3, [sp, #0]
 8005cc8:	2300      	movs	r3, #0
 8005cca:	687a      	ldr	r2, [r7, #4]
 8005ccc:	2100      	movs	r1, #0
 8005cce:	6978      	ldr	r0, [r7, #20]
 8005cd0:	f7ff ff88 	bl	8005be4 <xTimerGenericCommand>
 8005cd4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005cd6:	693b      	ldr	r3, [r7, #16]
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d113      	bne.n	8005d04 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8005cdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ce0:	f383 8811 	msr	BASEPRI, r3
 8005ce4:	f3bf 8f6f 	isb	sy
 8005ce8:	f3bf 8f4f 	dsb	sy
 8005cec:	60fb      	str	r3, [r7, #12]
}
 8005cee:	bf00      	nop
 8005cf0:	e7fe      	b.n	8005cf0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005cf2:	697b      	ldr	r3, [r7, #20]
 8005cf4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005cf8:	f023 0301 	bic.w	r3, r3, #1
 8005cfc:	b2da      	uxtb	r2, r3
 8005cfe:	697b      	ldr	r3, [r7, #20]
 8005d00:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005d04:	697b      	ldr	r3, [r7, #20]
 8005d06:	6a1b      	ldr	r3, [r3, #32]
 8005d08:	6978      	ldr	r0, [r7, #20]
 8005d0a:	4798      	blx	r3
}
 8005d0c:	bf00      	nop
 8005d0e:	3718      	adds	r7, #24
 8005d10:	46bd      	mov	sp, r7
 8005d12:	bd80      	pop	{r7, pc}
 8005d14:	20000c10 	.word	0x20000c10

08005d18 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005d18:	b580      	push	{r7, lr}
 8005d1a:	b084      	sub	sp, #16
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005d20:	f107 0308 	add.w	r3, r7, #8
 8005d24:	4618      	mov	r0, r3
 8005d26:	f000 f857 	bl	8005dd8 <prvGetNextExpireTime>
 8005d2a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005d2c:	68bb      	ldr	r3, [r7, #8]
 8005d2e:	4619      	mov	r1, r3
 8005d30:	68f8      	ldr	r0, [r7, #12]
 8005d32:	f000 f803 	bl	8005d3c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005d36:	f000 f8d5 	bl	8005ee4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005d3a:	e7f1      	b.n	8005d20 <prvTimerTask+0x8>

08005d3c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005d3c:	b580      	push	{r7, lr}
 8005d3e:	b084      	sub	sp, #16
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	6078      	str	r0, [r7, #4]
 8005d44:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005d46:	f7ff fa43 	bl	80051d0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005d4a:	f107 0308 	add.w	r3, r7, #8
 8005d4e:	4618      	mov	r0, r3
 8005d50:	f000 f866 	bl	8005e20 <prvSampleTimeNow>
 8005d54:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005d56:	68bb      	ldr	r3, [r7, #8]
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d130      	bne.n	8005dbe <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005d5c:	683b      	ldr	r3, [r7, #0]
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d10a      	bne.n	8005d78 <prvProcessTimerOrBlockTask+0x3c>
 8005d62:	687a      	ldr	r2, [r7, #4]
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	429a      	cmp	r2, r3
 8005d68:	d806      	bhi.n	8005d78 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005d6a:	f7ff fa3f 	bl	80051ec <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005d6e:	68f9      	ldr	r1, [r7, #12]
 8005d70:	6878      	ldr	r0, [r7, #4]
 8005d72:	f7ff ff85 	bl	8005c80 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005d76:	e024      	b.n	8005dc2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005d78:	683b      	ldr	r3, [r7, #0]
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d008      	beq.n	8005d90 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005d7e:	4b13      	ldr	r3, [pc, #76]	; (8005dcc <prvProcessTimerOrBlockTask+0x90>)
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d101      	bne.n	8005d8c <prvProcessTimerOrBlockTask+0x50>
 8005d88:	2301      	movs	r3, #1
 8005d8a:	e000      	b.n	8005d8e <prvProcessTimerOrBlockTask+0x52>
 8005d8c:	2300      	movs	r3, #0
 8005d8e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005d90:	4b0f      	ldr	r3, [pc, #60]	; (8005dd0 <prvProcessTimerOrBlockTask+0x94>)
 8005d92:	6818      	ldr	r0, [r3, #0]
 8005d94:	687a      	ldr	r2, [r7, #4]
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	1ad3      	subs	r3, r2, r3
 8005d9a:	683a      	ldr	r2, [r7, #0]
 8005d9c:	4619      	mov	r1, r3
 8005d9e:	f7fe ffa7 	bl	8004cf0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005da2:	f7ff fa23 	bl	80051ec <xTaskResumeAll>
 8005da6:	4603      	mov	r3, r0
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d10a      	bne.n	8005dc2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005dac:	4b09      	ldr	r3, [pc, #36]	; (8005dd4 <prvProcessTimerOrBlockTask+0x98>)
 8005dae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005db2:	601a      	str	r2, [r3, #0]
 8005db4:	f3bf 8f4f 	dsb	sy
 8005db8:	f3bf 8f6f 	isb	sy
}
 8005dbc:	e001      	b.n	8005dc2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005dbe:	f7ff fa15 	bl	80051ec <xTaskResumeAll>
}
 8005dc2:	bf00      	nop
 8005dc4:	3710      	adds	r7, #16
 8005dc6:	46bd      	mov	sp, r7
 8005dc8:	bd80      	pop	{r7, pc}
 8005dca:	bf00      	nop
 8005dcc:	20000c14 	.word	0x20000c14
 8005dd0:	20000c18 	.word	0x20000c18
 8005dd4:	e000ed04 	.word	0xe000ed04

08005dd8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005dd8:	b480      	push	{r7}
 8005dda:	b085      	sub	sp, #20
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005de0:	4b0e      	ldr	r3, [pc, #56]	; (8005e1c <prvGetNextExpireTime+0x44>)
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d101      	bne.n	8005dee <prvGetNextExpireTime+0x16>
 8005dea:	2201      	movs	r2, #1
 8005dec:	e000      	b.n	8005df0 <prvGetNextExpireTime+0x18>
 8005dee:	2200      	movs	r2, #0
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d105      	bne.n	8005e08 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005dfc:	4b07      	ldr	r3, [pc, #28]	; (8005e1c <prvGetNextExpireTime+0x44>)
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	68db      	ldr	r3, [r3, #12]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	60fb      	str	r3, [r7, #12]
 8005e06:	e001      	b.n	8005e0c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005e08:	2300      	movs	r3, #0
 8005e0a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005e0c:	68fb      	ldr	r3, [r7, #12]
}
 8005e0e:	4618      	mov	r0, r3
 8005e10:	3714      	adds	r7, #20
 8005e12:	46bd      	mov	sp, r7
 8005e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e18:	4770      	bx	lr
 8005e1a:	bf00      	nop
 8005e1c:	20000c10 	.word	0x20000c10

08005e20 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005e20:	b580      	push	{r7, lr}
 8005e22:	b084      	sub	sp, #16
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005e28:	f7ff fa7e 	bl	8005328 <xTaskGetTickCount>
 8005e2c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005e2e:	4b0b      	ldr	r3, [pc, #44]	; (8005e5c <prvSampleTimeNow+0x3c>)
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	68fa      	ldr	r2, [r7, #12]
 8005e34:	429a      	cmp	r2, r3
 8005e36:	d205      	bcs.n	8005e44 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005e38:	f000 f936 	bl	80060a8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	2201      	movs	r2, #1
 8005e40:	601a      	str	r2, [r3, #0]
 8005e42:	e002      	b.n	8005e4a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2200      	movs	r2, #0
 8005e48:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005e4a:	4a04      	ldr	r2, [pc, #16]	; (8005e5c <prvSampleTimeNow+0x3c>)
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005e50:	68fb      	ldr	r3, [r7, #12]
}
 8005e52:	4618      	mov	r0, r3
 8005e54:	3710      	adds	r7, #16
 8005e56:	46bd      	mov	sp, r7
 8005e58:	bd80      	pop	{r7, pc}
 8005e5a:	bf00      	nop
 8005e5c:	20000c20 	.word	0x20000c20

08005e60 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005e60:	b580      	push	{r7, lr}
 8005e62:	b086      	sub	sp, #24
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	60f8      	str	r0, [r7, #12]
 8005e68:	60b9      	str	r1, [r7, #8]
 8005e6a:	607a      	str	r2, [r7, #4]
 8005e6c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005e6e:	2300      	movs	r3, #0
 8005e70:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	68ba      	ldr	r2, [r7, #8]
 8005e76:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	68fa      	ldr	r2, [r7, #12]
 8005e7c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005e7e:	68ba      	ldr	r2, [r7, #8]
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	429a      	cmp	r2, r3
 8005e84:	d812      	bhi.n	8005eac <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005e86:	687a      	ldr	r2, [r7, #4]
 8005e88:	683b      	ldr	r3, [r7, #0]
 8005e8a:	1ad2      	subs	r2, r2, r3
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	699b      	ldr	r3, [r3, #24]
 8005e90:	429a      	cmp	r2, r3
 8005e92:	d302      	bcc.n	8005e9a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005e94:	2301      	movs	r3, #1
 8005e96:	617b      	str	r3, [r7, #20]
 8005e98:	e01b      	b.n	8005ed2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005e9a:	4b10      	ldr	r3, [pc, #64]	; (8005edc <prvInsertTimerInActiveList+0x7c>)
 8005e9c:	681a      	ldr	r2, [r3, #0]
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	3304      	adds	r3, #4
 8005ea2:	4619      	mov	r1, r3
 8005ea4:	4610      	mov	r0, r2
 8005ea6:	f7fe fa08 	bl	80042ba <vListInsert>
 8005eaa:	e012      	b.n	8005ed2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005eac:	687a      	ldr	r2, [r7, #4]
 8005eae:	683b      	ldr	r3, [r7, #0]
 8005eb0:	429a      	cmp	r2, r3
 8005eb2:	d206      	bcs.n	8005ec2 <prvInsertTimerInActiveList+0x62>
 8005eb4:	68ba      	ldr	r2, [r7, #8]
 8005eb6:	683b      	ldr	r3, [r7, #0]
 8005eb8:	429a      	cmp	r2, r3
 8005eba:	d302      	bcc.n	8005ec2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005ebc:	2301      	movs	r3, #1
 8005ebe:	617b      	str	r3, [r7, #20]
 8005ec0:	e007      	b.n	8005ed2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005ec2:	4b07      	ldr	r3, [pc, #28]	; (8005ee0 <prvInsertTimerInActiveList+0x80>)
 8005ec4:	681a      	ldr	r2, [r3, #0]
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	3304      	adds	r3, #4
 8005eca:	4619      	mov	r1, r3
 8005ecc:	4610      	mov	r0, r2
 8005ece:	f7fe f9f4 	bl	80042ba <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005ed2:	697b      	ldr	r3, [r7, #20]
}
 8005ed4:	4618      	mov	r0, r3
 8005ed6:	3718      	adds	r7, #24
 8005ed8:	46bd      	mov	sp, r7
 8005eda:	bd80      	pop	{r7, pc}
 8005edc:	20000c14 	.word	0x20000c14
 8005ee0:	20000c10 	.word	0x20000c10

08005ee4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005ee4:	b580      	push	{r7, lr}
 8005ee6:	b08e      	sub	sp, #56	; 0x38
 8005ee8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005eea:	e0ca      	b.n	8006082 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	da18      	bge.n	8005f24 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8005ef2:	1d3b      	adds	r3, r7, #4
 8005ef4:	3304      	adds	r3, #4
 8005ef6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005ef8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d10a      	bne.n	8005f14 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8005efe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f02:	f383 8811 	msr	BASEPRI, r3
 8005f06:	f3bf 8f6f 	isb	sy
 8005f0a:	f3bf 8f4f 	dsb	sy
 8005f0e:	61fb      	str	r3, [r7, #28]
}
 8005f10:	bf00      	nop
 8005f12:	e7fe      	b.n	8005f12 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005f14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005f1a:	6850      	ldr	r0, [r2, #4]
 8005f1c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005f1e:	6892      	ldr	r2, [r2, #8]
 8005f20:	4611      	mov	r1, r2
 8005f22:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	f2c0 80aa 	blt.w	8006080 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005f30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f32:	695b      	ldr	r3, [r3, #20]
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d004      	beq.n	8005f42 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005f38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f3a:	3304      	adds	r3, #4
 8005f3c:	4618      	mov	r0, r3
 8005f3e:	f7fe f9f5 	bl	800432c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005f42:	463b      	mov	r3, r7
 8005f44:	4618      	mov	r0, r3
 8005f46:	f7ff ff6b 	bl	8005e20 <prvSampleTimeNow>
 8005f4a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	2b09      	cmp	r3, #9
 8005f50:	f200 8097 	bhi.w	8006082 <prvProcessReceivedCommands+0x19e>
 8005f54:	a201      	add	r2, pc, #4	; (adr r2, 8005f5c <prvProcessReceivedCommands+0x78>)
 8005f56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f5a:	bf00      	nop
 8005f5c:	08005f85 	.word	0x08005f85
 8005f60:	08005f85 	.word	0x08005f85
 8005f64:	08005f85 	.word	0x08005f85
 8005f68:	08005ff9 	.word	0x08005ff9
 8005f6c:	0800600d 	.word	0x0800600d
 8005f70:	08006057 	.word	0x08006057
 8005f74:	08005f85 	.word	0x08005f85
 8005f78:	08005f85 	.word	0x08005f85
 8005f7c:	08005ff9 	.word	0x08005ff9
 8005f80:	0800600d 	.word	0x0800600d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005f84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f86:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005f8a:	f043 0301 	orr.w	r3, r3, #1
 8005f8e:	b2da      	uxtb	r2, r3
 8005f90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f92:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005f96:	68ba      	ldr	r2, [r7, #8]
 8005f98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f9a:	699b      	ldr	r3, [r3, #24]
 8005f9c:	18d1      	adds	r1, r2, r3
 8005f9e:	68bb      	ldr	r3, [r7, #8]
 8005fa0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005fa2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005fa4:	f7ff ff5c 	bl	8005e60 <prvInsertTimerInActiveList>
 8005fa8:	4603      	mov	r3, r0
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d069      	beq.n	8006082 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005fae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fb0:	6a1b      	ldr	r3, [r3, #32]
 8005fb2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005fb4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005fb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fb8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005fbc:	f003 0304 	and.w	r3, r3, #4
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d05e      	beq.n	8006082 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005fc4:	68ba      	ldr	r2, [r7, #8]
 8005fc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fc8:	699b      	ldr	r3, [r3, #24]
 8005fca:	441a      	add	r2, r3
 8005fcc:	2300      	movs	r3, #0
 8005fce:	9300      	str	r3, [sp, #0]
 8005fd0:	2300      	movs	r3, #0
 8005fd2:	2100      	movs	r1, #0
 8005fd4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005fd6:	f7ff fe05 	bl	8005be4 <xTimerGenericCommand>
 8005fda:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005fdc:	6a3b      	ldr	r3, [r7, #32]
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d14f      	bne.n	8006082 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8005fe2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fe6:	f383 8811 	msr	BASEPRI, r3
 8005fea:	f3bf 8f6f 	isb	sy
 8005fee:	f3bf 8f4f 	dsb	sy
 8005ff2:	61bb      	str	r3, [r7, #24]
}
 8005ff4:	bf00      	nop
 8005ff6:	e7fe      	b.n	8005ff6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005ff8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ffa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005ffe:	f023 0301 	bic.w	r3, r3, #1
 8006002:	b2da      	uxtb	r2, r3
 8006004:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006006:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800600a:	e03a      	b.n	8006082 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800600c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800600e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006012:	f043 0301 	orr.w	r3, r3, #1
 8006016:	b2da      	uxtb	r2, r3
 8006018:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800601a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800601e:	68ba      	ldr	r2, [r7, #8]
 8006020:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006022:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006024:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006026:	699b      	ldr	r3, [r3, #24]
 8006028:	2b00      	cmp	r3, #0
 800602a:	d10a      	bne.n	8006042 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800602c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006030:	f383 8811 	msr	BASEPRI, r3
 8006034:	f3bf 8f6f 	isb	sy
 8006038:	f3bf 8f4f 	dsb	sy
 800603c:	617b      	str	r3, [r7, #20]
}
 800603e:	bf00      	nop
 8006040:	e7fe      	b.n	8006040 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006042:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006044:	699a      	ldr	r2, [r3, #24]
 8006046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006048:	18d1      	adds	r1, r2, r3
 800604a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800604c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800604e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006050:	f7ff ff06 	bl	8005e60 <prvInsertTimerInActiveList>
					break;
 8006054:	e015      	b.n	8006082 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006056:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006058:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800605c:	f003 0302 	and.w	r3, r3, #2
 8006060:	2b00      	cmp	r3, #0
 8006062:	d103      	bne.n	800606c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8006064:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006066:	f000 fbdb 	bl	8006820 <vPortFree>
 800606a:	e00a      	b.n	8006082 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800606c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800606e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006072:	f023 0301 	bic.w	r3, r3, #1
 8006076:	b2da      	uxtb	r2, r3
 8006078:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800607a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800607e:	e000      	b.n	8006082 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8006080:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006082:	4b08      	ldr	r3, [pc, #32]	; (80060a4 <prvProcessReceivedCommands+0x1c0>)
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	1d39      	adds	r1, r7, #4
 8006088:	2200      	movs	r2, #0
 800608a:	4618      	mov	r0, r3
 800608c:	f7fe fc16 	bl	80048bc <xQueueReceive>
 8006090:	4603      	mov	r3, r0
 8006092:	2b00      	cmp	r3, #0
 8006094:	f47f af2a 	bne.w	8005eec <prvProcessReceivedCommands+0x8>
	}
}
 8006098:	bf00      	nop
 800609a:	bf00      	nop
 800609c:	3730      	adds	r7, #48	; 0x30
 800609e:	46bd      	mov	sp, r7
 80060a0:	bd80      	pop	{r7, pc}
 80060a2:	bf00      	nop
 80060a4:	20000c18 	.word	0x20000c18

080060a8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80060a8:	b580      	push	{r7, lr}
 80060aa:	b088      	sub	sp, #32
 80060ac:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80060ae:	e048      	b.n	8006142 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80060b0:	4b2d      	ldr	r3, [pc, #180]	; (8006168 <prvSwitchTimerLists+0xc0>)
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	68db      	ldr	r3, [r3, #12]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80060ba:	4b2b      	ldr	r3, [pc, #172]	; (8006168 <prvSwitchTimerLists+0xc0>)
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	68db      	ldr	r3, [r3, #12]
 80060c0:	68db      	ldr	r3, [r3, #12]
 80060c2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	3304      	adds	r3, #4
 80060c8:	4618      	mov	r0, r3
 80060ca:	f7fe f92f 	bl	800432c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	6a1b      	ldr	r3, [r3, #32]
 80060d2:	68f8      	ldr	r0, [r7, #12]
 80060d4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80060dc:	f003 0304 	and.w	r3, r3, #4
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d02e      	beq.n	8006142 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	699b      	ldr	r3, [r3, #24]
 80060e8:	693a      	ldr	r2, [r7, #16]
 80060ea:	4413      	add	r3, r2
 80060ec:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80060ee:	68ba      	ldr	r2, [r7, #8]
 80060f0:	693b      	ldr	r3, [r7, #16]
 80060f2:	429a      	cmp	r2, r3
 80060f4:	d90e      	bls.n	8006114 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	68ba      	ldr	r2, [r7, #8]
 80060fa:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	68fa      	ldr	r2, [r7, #12]
 8006100:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006102:	4b19      	ldr	r3, [pc, #100]	; (8006168 <prvSwitchTimerLists+0xc0>)
 8006104:	681a      	ldr	r2, [r3, #0]
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	3304      	adds	r3, #4
 800610a:	4619      	mov	r1, r3
 800610c:	4610      	mov	r0, r2
 800610e:	f7fe f8d4 	bl	80042ba <vListInsert>
 8006112:	e016      	b.n	8006142 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006114:	2300      	movs	r3, #0
 8006116:	9300      	str	r3, [sp, #0]
 8006118:	2300      	movs	r3, #0
 800611a:	693a      	ldr	r2, [r7, #16]
 800611c:	2100      	movs	r1, #0
 800611e:	68f8      	ldr	r0, [r7, #12]
 8006120:	f7ff fd60 	bl	8005be4 <xTimerGenericCommand>
 8006124:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	2b00      	cmp	r3, #0
 800612a:	d10a      	bne.n	8006142 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800612c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006130:	f383 8811 	msr	BASEPRI, r3
 8006134:	f3bf 8f6f 	isb	sy
 8006138:	f3bf 8f4f 	dsb	sy
 800613c:	603b      	str	r3, [r7, #0]
}
 800613e:	bf00      	nop
 8006140:	e7fe      	b.n	8006140 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006142:	4b09      	ldr	r3, [pc, #36]	; (8006168 <prvSwitchTimerLists+0xc0>)
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	2b00      	cmp	r3, #0
 800614a:	d1b1      	bne.n	80060b0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800614c:	4b06      	ldr	r3, [pc, #24]	; (8006168 <prvSwitchTimerLists+0xc0>)
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006152:	4b06      	ldr	r3, [pc, #24]	; (800616c <prvSwitchTimerLists+0xc4>)
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	4a04      	ldr	r2, [pc, #16]	; (8006168 <prvSwitchTimerLists+0xc0>)
 8006158:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800615a:	4a04      	ldr	r2, [pc, #16]	; (800616c <prvSwitchTimerLists+0xc4>)
 800615c:	697b      	ldr	r3, [r7, #20]
 800615e:	6013      	str	r3, [r2, #0]
}
 8006160:	bf00      	nop
 8006162:	3718      	adds	r7, #24
 8006164:	46bd      	mov	sp, r7
 8006166:	bd80      	pop	{r7, pc}
 8006168:	20000c10 	.word	0x20000c10
 800616c:	20000c14 	.word	0x20000c14

08006170 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006170:	b580      	push	{r7, lr}
 8006172:	b082      	sub	sp, #8
 8006174:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006176:	f000 f965 	bl	8006444 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800617a:	4b15      	ldr	r3, [pc, #84]	; (80061d0 <prvCheckForValidListAndQueue+0x60>)
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	2b00      	cmp	r3, #0
 8006180:	d120      	bne.n	80061c4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006182:	4814      	ldr	r0, [pc, #80]	; (80061d4 <prvCheckForValidListAndQueue+0x64>)
 8006184:	f7fe f848 	bl	8004218 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006188:	4813      	ldr	r0, [pc, #76]	; (80061d8 <prvCheckForValidListAndQueue+0x68>)
 800618a:	f7fe f845 	bl	8004218 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800618e:	4b13      	ldr	r3, [pc, #76]	; (80061dc <prvCheckForValidListAndQueue+0x6c>)
 8006190:	4a10      	ldr	r2, [pc, #64]	; (80061d4 <prvCheckForValidListAndQueue+0x64>)
 8006192:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006194:	4b12      	ldr	r3, [pc, #72]	; (80061e0 <prvCheckForValidListAndQueue+0x70>)
 8006196:	4a10      	ldr	r2, [pc, #64]	; (80061d8 <prvCheckForValidListAndQueue+0x68>)
 8006198:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800619a:	2300      	movs	r3, #0
 800619c:	9300      	str	r3, [sp, #0]
 800619e:	4b11      	ldr	r3, [pc, #68]	; (80061e4 <prvCheckForValidListAndQueue+0x74>)
 80061a0:	4a11      	ldr	r2, [pc, #68]	; (80061e8 <prvCheckForValidListAndQueue+0x78>)
 80061a2:	2110      	movs	r1, #16
 80061a4:	200a      	movs	r0, #10
 80061a6:	f7fe f953 	bl	8004450 <xQueueGenericCreateStatic>
 80061aa:	4603      	mov	r3, r0
 80061ac:	4a08      	ldr	r2, [pc, #32]	; (80061d0 <prvCheckForValidListAndQueue+0x60>)
 80061ae:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80061b0:	4b07      	ldr	r3, [pc, #28]	; (80061d0 <prvCheckForValidListAndQueue+0x60>)
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d005      	beq.n	80061c4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80061b8:	4b05      	ldr	r3, [pc, #20]	; (80061d0 <prvCheckForValidListAndQueue+0x60>)
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	490b      	ldr	r1, [pc, #44]	; (80061ec <prvCheckForValidListAndQueue+0x7c>)
 80061be:	4618      	mov	r0, r3
 80061c0:	f7fe fd6c 	bl	8004c9c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80061c4:	f000 f96e 	bl	80064a4 <vPortExitCritical>
}
 80061c8:	bf00      	nop
 80061ca:	46bd      	mov	sp, r7
 80061cc:	bd80      	pop	{r7, pc}
 80061ce:	bf00      	nop
 80061d0:	20000c18 	.word	0x20000c18
 80061d4:	20000be8 	.word	0x20000be8
 80061d8:	20000bfc 	.word	0x20000bfc
 80061dc:	20000c10 	.word	0x20000c10
 80061e0:	20000c14 	.word	0x20000c14
 80061e4:	20000cc4 	.word	0x20000cc4
 80061e8:	20000c24 	.word	0x20000c24
 80061ec:	08006bcc 	.word	0x08006bcc

080061f0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80061f0:	b480      	push	{r7}
 80061f2:	b085      	sub	sp, #20
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	60f8      	str	r0, [r7, #12]
 80061f8:	60b9      	str	r1, [r7, #8]
 80061fa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	3b04      	subs	r3, #4
 8006200:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006208:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	3b04      	subs	r3, #4
 800620e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006210:	68bb      	ldr	r3, [r7, #8]
 8006212:	f023 0201 	bic.w	r2, r3, #1
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	3b04      	subs	r3, #4
 800621e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006220:	4a0c      	ldr	r2, [pc, #48]	; (8006254 <pxPortInitialiseStack+0x64>)
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	3b14      	subs	r3, #20
 800622a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800622c:	687a      	ldr	r2, [r7, #4]
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	3b04      	subs	r3, #4
 8006236:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	f06f 0202 	mvn.w	r2, #2
 800623e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	3b20      	subs	r3, #32
 8006244:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006246:	68fb      	ldr	r3, [r7, #12]
}
 8006248:	4618      	mov	r0, r3
 800624a:	3714      	adds	r7, #20
 800624c:	46bd      	mov	sp, r7
 800624e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006252:	4770      	bx	lr
 8006254:	08006259 	.word	0x08006259

08006258 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006258:	b480      	push	{r7}
 800625a:	b085      	sub	sp, #20
 800625c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800625e:	2300      	movs	r3, #0
 8006260:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006262:	4b12      	ldr	r3, [pc, #72]	; (80062ac <prvTaskExitError+0x54>)
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	f1b3 3fff 	cmp.w	r3, #4294967295
 800626a:	d00a      	beq.n	8006282 <prvTaskExitError+0x2a>
	__asm volatile
 800626c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006270:	f383 8811 	msr	BASEPRI, r3
 8006274:	f3bf 8f6f 	isb	sy
 8006278:	f3bf 8f4f 	dsb	sy
 800627c:	60fb      	str	r3, [r7, #12]
}
 800627e:	bf00      	nop
 8006280:	e7fe      	b.n	8006280 <prvTaskExitError+0x28>
	__asm volatile
 8006282:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006286:	f383 8811 	msr	BASEPRI, r3
 800628a:	f3bf 8f6f 	isb	sy
 800628e:	f3bf 8f4f 	dsb	sy
 8006292:	60bb      	str	r3, [r7, #8]
}
 8006294:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006296:	bf00      	nop
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2b00      	cmp	r3, #0
 800629c:	d0fc      	beq.n	8006298 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800629e:	bf00      	nop
 80062a0:	bf00      	nop
 80062a2:	3714      	adds	r7, #20
 80062a4:	46bd      	mov	sp, r7
 80062a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062aa:	4770      	bx	lr
 80062ac:	2000000c 	.word	0x2000000c

080062b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80062b0:	4b07      	ldr	r3, [pc, #28]	; (80062d0 <pxCurrentTCBConst2>)
 80062b2:	6819      	ldr	r1, [r3, #0]
 80062b4:	6808      	ldr	r0, [r1, #0]
 80062b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062ba:	f380 8809 	msr	PSP, r0
 80062be:	f3bf 8f6f 	isb	sy
 80062c2:	f04f 0000 	mov.w	r0, #0
 80062c6:	f380 8811 	msr	BASEPRI, r0
 80062ca:	4770      	bx	lr
 80062cc:	f3af 8000 	nop.w

080062d0 <pxCurrentTCBConst2>:
 80062d0:	200006e8 	.word	0x200006e8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80062d4:	bf00      	nop
 80062d6:	bf00      	nop

080062d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80062d8:	4808      	ldr	r0, [pc, #32]	; (80062fc <prvPortStartFirstTask+0x24>)
 80062da:	6800      	ldr	r0, [r0, #0]
 80062dc:	6800      	ldr	r0, [r0, #0]
 80062de:	f380 8808 	msr	MSP, r0
 80062e2:	f04f 0000 	mov.w	r0, #0
 80062e6:	f380 8814 	msr	CONTROL, r0
 80062ea:	b662      	cpsie	i
 80062ec:	b661      	cpsie	f
 80062ee:	f3bf 8f4f 	dsb	sy
 80062f2:	f3bf 8f6f 	isb	sy
 80062f6:	df00      	svc	0
 80062f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80062fa:	bf00      	nop
 80062fc:	e000ed08 	.word	0xe000ed08

08006300 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006300:	b580      	push	{r7, lr}
 8006302:	b086      	sub	sp, #24
 8006304:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006306:	4b46      	ldr	r3, [pc, #280]	; (8006420 <xPortStartScheduler+0x120>)
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	4a46      	ldr	r2, [pc, #280]	; (8006424 <xPortStartScheduler+0x124>)
 800630c:	4293      	cmp	r3, r2
 800630e:	d10a      	bne.n	8006326 <xPortStartScheduler+0x26>
	__asm volatile
 8006310:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006314:	f383 8811 	msr	BASEPRI, r3
 8006318:	f3bf 8f6f 	isb	sy
 800631c:	f3bf 8f4f 	dsb	sy
 8006320:	613b      	str	r3, [r7, #16]
}
 8006322:	bf00      	nop
 8006324:	e7fe      	b.n	8006324 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006326:	4b3e      	ldr	r3, [pc, #248]	; (8006420 <xPortStartScheduler+0x120>)
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	4a3f      	ldr	r2, [pc, #252]	; (8006428 <xPortStartScheduler+0x128>)
 800632c:	4293      	cmp	r3, r2
 800632e:	d10a      	bne.n	8006346 <xPortStartScheduler+0x46>
	__asm volatile
 8006330:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006334:	f383 8811 	msr	BASEPRI, r3
 8006338:	f3bf 8f6f 	isb	sy
 800633c:	f3bf 8f4f 	dsb	sy
 8006340:	60fb      	str	r3, [r7, #12]
}
 8006342:	bf00      	nop
 8006344:	e7fe      	b.n	8006344 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006346:	4b39      	ldr	r3, [pc, #228]	; (800642c <xPortStartScheduler+0x12c>)
 8006348:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800634a:	697b      	ldr	r3, [r7, #20]
 800634c:	781b      	ldrb	r3, [r3, #0]
 800634e:	b2db      	uxtb	r3, r3
 8006350:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006352:	697b      	ldr	r3, [r7, #20]
 8006354:	22ff      	movs	r2, #255	; 0xff
 8006356:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006358:	697b      	ldr	r3, [r7, #20]
 800635a:	781b      	ldrb	r3, [r3, #0]
 800635c:	b2db      	uxtb	r3, r3
 800635e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006360:	78fb      	ldrb	r3, [r7, #3]
 8006362:	b2db      	uxtb	r3, r3
 8006364:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006368:	b2da      	uxtb	r2, r3
 800636a:	4b31      	ldr	r3, [pc, #196]	; (8006430 <xPortStartScheduler+0x130>)
 800636c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800636e:	4b31      	ldr	r3, [pc, #196]	; (8006434 <xPortStartScheduler+0x134>)
 8006370:	2207      	movs	r2, #7
 8006372:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006374:	e009      	b.n	800638a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8006376:	4b2f      	ldr	r3, [pc, #188]	; (8006434 <xPortStartScheduler+0x134>)
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	3b01      	subs	r3, #1
 800637c:	4a2d      	ldr	r2, [pc, #180]	; (8006434 <xPortStartScheduler+0x134>)
 800637e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006380:	78fb      	ldrb	r3, [r7, #3]
 8006382:	b2db      	uxtb	r3, r3
 8006384:	005b      	lsls	r3, r3, #1
 8006386:	b2db      	uxtb	r3, r3
 8006388:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800638a:	78fb      	ldrb	r3, [r7, #3]
 800638c:	b2db      	uxtb	r3, r3
 800638e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006392:	2b80      	cmp	r3, #128	; 0x80
 8006394:	d0ef      	beq.n	8006376 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006396:	4b27      	ldr	r3, [pc, #156]	; (8006434 <xPortStartScheduler+0x134>)
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	f1c3 0307 	rsb	r3, r3, #7
 800639e:	2b04      	cmp	r3, #4
 80063a0:	d00a      	beq.n	80063b8 <xPortStartScheduler+0xb8>
	__asm volatile
 80063a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063a6:	f383 8811 	msr	BASEPRI, r3
 80063aa:	f3bf 8f6f 	isb	sy
 80063ae:	f3bf 8f4f 	dsb	sy
 80063b2:	60bb      	str	r3, [r7, #8]
}
 80063b4:	bf00      	nop
 80063b6:	e7fe      	b.n	80063b6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80063b8:	4b1e      	ldr	r3, [pc, #120]	; (8006434 <xPortStartScheduler+0x134>)
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	021b      	lsls	r3, r3, #8
 80063be:	4a1d      	ldr	r2, [pc, #116]	; (8006434 <xPortStartScheduler+0x134>)
 80063c0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80063c2:	4b1c      	ldr	r3, [pc, #112]	; (8006434 <xPortStartScheduler+0x134>)
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80063ca:	4a1a      	ldr	r2, [pc, #104]	; (8006434 <xPortStartScheduler+0x134>)
 80063cc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	b2da      	uxtb	r2, r3
 80063d2:	697b      	ldr	r3, [r7, #20]
 80063d4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80063d6:	4b18      	ldr	r3, [pc, #96]	; (8006438 <xPortStartScheduler+0x138>)
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	4a17      	ldr	r2, [pc, #92]	; (8006438 <xPortStartScheduler+0x138>)
 80063dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80063e0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80063e2:	4b15      	ldr	r3, [pc, #84]	; (8006438 <xPortStartScheduler+0x138>)
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	4a14      	ldr	r2, [pc, #80]	; (8006438 <xPortStartScheduler+0x138>)
 80063e8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80063ec:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80063ee:	f000 f8dd 	bl	80065ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80063f2:	4b12      	ldr	r3, [pc, #72]	; (800643c <xPortStartScheduler+0x13c>)
 80063f4:	2200      	movs	r2, #0
 80063f6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80063f8:	f000 f8fc 	bl	80065f4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80063fc:	4b10      	ldr	r3, [pc, #64]	; (8006440 <xPortStartScheduler+0x140>)
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	4a0f      	ldr	r2, [pc, #60]	; (8006440 <xPortStartScheduler+0x140>)
 8006402:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006406:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006408:	f7ff ff66 	bl	80062d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800640c:	f7ff f856 	bl	80054bc <vTaskSwitchContext>
	prvTaskExitError();
 8006410:	f7ff ff22 	bl	8006258 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006414:	2300      	movs	r3, #0
}
 8006416:	4618      	mov	r0, r3
 8006418:	3718      	adds	r7, #24
 800641a:	46bd      	mov	sp, r7
 800641c:	bd80      	pop	{r7, pc}
 800641e:	bf00      	nop
 8006420:	e000ed00 	.word	0xe000ed00
 8006424:	410fc271 	.word	0x410fc271
 8006428:	410fc270 	.word	0x410fc270
 800642c:	e000e400 	.word	0xe000e400
 8006430:	20000d14 	.word	0x20000d14
 8006434:	20000d18 	.word	0x20000d18
 8006438:	e000ed20 	.word	0xe000ed20
 800643c:	2000000c 	.word	0x2000000c
 8006440:	e000ef34 	.word	0xe000ef34

08006444 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006444:	b480      	push	{r7}
 8006446:	b083      	sub	sp, #12
 8006448:	af00      	add	r7, sp, #0
	__asm volatile
 800644a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800644e:	f383 8811 	msr	BASEPRI, r3
 8006452:	f3bf 8f6f 	isb	sy
 8006456:	f3bf 8f4f 	dsb	sy
 800645a:	607b      	str	r3, [r7, #4]
}
 800645c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800645e:	4b0f      	ldr	r3, [pc, #60]	; (800649c <vPortEnterCritical+0x58>)
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	3301      	adds	r3, #1
 8006464:	4a0d      	ldr	r2, [pc, #52]	; (800649c <vPortEnterCritical+0x58>)
 8006466:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006468:	4b0c      	ldr	r3, [pc, #48]	; (800649c <vPortEnterCritical+0x58>)
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	2b01      	cmp	r3, #1
 800646e:	d10f      	bne.n	8006490 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006470:	4b0b      	ldr	r3, [pc, #44]	; (80064a0 <vPortEnterCritical+0x5c>)
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	b2db      	uxtb	r3, r3
 8006476:	2b00      	cmp	r3, #0
 8006478:	d00a      	beq.n	8006490 <vPortEnterCritical+0x4c>
	__asm volatile
 800647a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800647e:	f383 8811 	msr	BASEPRI, r3
 8006482:	f3bf 8f6f 	isb	sy
 8006486:	f3bf 8f4f 	dsb	sy
 800648a:	603b      	str	r3, [r7, #0]
}
 800648c:	bf00      	nop
 800648e:	e7fe      	b.n	800648e <vPortEnterCritical+0x4a>
	}
}
 8006490:	bf00      	nop
 8006492:	370c      	adds	r7, #12
 8006494:	46bd      	mov	sp, r7
 8006496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649a:	4770      	bx	lr
 800649c:	2000000c 	.word	0x2000000c
 80064a0:	e000ed04 	.word	0xe000ed04

080064a4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80064a4:	b480      	push	{r7}
 80064a6:	b083      	sub	sp, #12
 80064a8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80064aa:	4b12      	ldr	r3, [pc, #72]	; (80064f4 <vPortExitCritical+0x50>)
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d10a      	bne.n	80064c8 <vPortExitCritical+0x24>
	__asm volatile
 80064b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064b6:	f383 8811 	msr	BASEPRI, r3
 80064ba:	f3bf 8f6f 	isb	sy
 80064be:	f3bf 8f4f 	dsb	sy
 80064c2:	607b      	str	r3, [r7, #4]
}
 80064c4:	bf00      	nop
 80064c6:	e7fe      	b.n	80064c6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80064c8:	4b0a      	ldr	r3, [pc, #40]	; (80064f4 <vPortExitCritical+0x50>)
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	3b01      	subs	r3, #1
 80064ce:	4a09      	ldr	r2, [pc, #36]	; (80064f4 <vPortExitCritical+0x50>)
 80064d0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80064d2:	4b08      	ldr	r3, [pc, #32]	; (80064f4 <vPortExitCritical+0x50>)
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d105      	bne.n	80064e6 <vPortExitCritical+0x42>
 80064da:	2300      	movs	r3, #0
 80064dc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80064de:	683b      	ldr	r3, [r7, #0]
 80064e0:	f383 8811 	msr	BASEPRI, r3
}
 80064e4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80064e6:	bf00      	nop
 80064e8:	370c      	adds	r7, #12
 80064ea:	46bd      	mov	sp, r7
 80064ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f0:	4770      	bx	lr
 80064f2:	bf00      	nop
 80064f4:	2000000c 	.word	0x2000000c
	...

08006500 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006500:	f3ef 8009 	mrs	r0, PSP
 8006504:	f3bf 8f6f 	isb	sy
 8006508:	4b15      	ldr	r3, [pc, #84]	; (8006560 <pxCurrentTCBConst>)
 800650a:	681a      	ldr	r2, [r3, #0]
 800650c:	f01e 0f10 	tst.w	lr, #16
 8006510:	bf08      	it	eq
 8006512:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006516:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800651a:	6010      	str	r0, [r2, #0]
 800651c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006520:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006524:	f380 8811 	msr	BASEPRI, r0
 8006528:	f3bf 8f4f 	dsb	sy
 800652c:	f3bf 8f6f 	isb	sy
 8006530:	f7fe ffc4 	bl	80054bc <vTaskSwitchContext>
 8006534:	f04f 0000 	mov.w	r0, #0
 8006538:	f380 8811 	msr	BASEPRI, r0
 800653c:	bc09      	pop	{r0, r3}
 800653e:	6819      	ldr	r1, [r3, #0]
 8006540:	6808      	ldr	r0, [r1, #0]
 8006542:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006546:	f01e 0f10 	tst.w	lr, #16
 800654a:	bf08      	it	eq
 800654c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006550:	f380 8809 	msr	PSP, r0
 8006554:	f3bf 8f6f 	isb	sy
 8006558:	4770      	bx	lr
 800655a:	bf00      	nop
 800655c:	f3af 8000 	nop.w

08006560 <pxCurrentTCBConst>:
 8006560:	200006e8 	.word	0x200006e8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006564:	bf00      	nop
 8006566:	bf00      	nop

08006568 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006568:	b580      	push	{r7, lr}
 800656a:	b082      	sub	sp, #8
 800656c:	af00      	add	r7, sp, #0
	__asm volatile
 800656e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006572:	f383 8811 	msr	BASEPRI, r3
 8006576:	f3bf 8f6f 	isb	sy
 800657a:	f3bf 8f4f 	dsb	sy
 800657e:	607b      	str	r3, [r7, #4]
}
 8006580:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006582:	f7fe fee1 	bl	8005348 <xTaskIncrementTick>
 8006586:	4603      	mov	r3, r0
 8006588:	2b00      	cmp	r3, #0
 800658a:	d003      	beq.n	8006594 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800658c:	4b06      	ldr	r3, [pc, #24]	; (80065a8 <xPortSysTickHandler+0x40>)
 800658e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006592:	601a      	str	r2, [r3, #0]
 8006594:	2300      	movs	r3, #0
 8006596:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006598:	683b      	ldr	r3, [r7, #0]
 800659a:	f383 8811 	msr	BASEPRI, r3
}
 800659e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80065a0:	bf00      	nop
 80065a2:	3708      	adds	r7, #8
 80065a4:	46bd      	mov	sp, r7
 80065a6:	bd80      	pop	{r7, pc}
 80065a8:	e000ed04 	.word	0xe000ed04

080065ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80065ac:	b480      	push	{r7}
 80065ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80065b0:	4b0b      	ldr	r3, [pc, #44]	; (80065e0 <vPortSetupTimerInterrupt+0x34>)
 80065b2:	2200      	movs	r2, #0
 80065b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80065b6:	4b0b      	ldr	r3, [pc, #44]	; (80065e4 <vPortSetupTimerInterrupt+0x38>)
 80065b8:	2200      	movs	r2, #0
 80065ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80065bc:	4b0a      	ldr	r3, [pc, #40]	; (80065e8 <vPortSetupTimerInterrupt+0x3c>)
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	4a0a      	ldr	r2, [pc, #40]	; (80065ec <vPortSetupTimerInterrupt+0x40>)
 80065c2:	fba2 2303 	umull	r2, r3, r2, r3
 80065c6:	099b      	lsrs	r3, r3, #6
 80065c8:	4a09      	ldr	r2, [pc, #36]	; (80065f0 <vPortSetupTimerInterrupt+0x44>)
 80065ca:	3b01      	subs	r3, #1
 80065cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80065ce:	4b04      	ldr	r3, [pc, #16]	; (80065e0 <vPortSetupTimerInterrupt+0x34>)
 80065d0:	2207      	movs	r2, #7
 80065d2:	601a      	str	r2, [r3, #0]
}
 80065d4:	bf00      	nop
 80065d6:	46bd      	mov	sp, r7
 80065d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065dc:	4770      	bx	lr
 80065de:	bf00      	nop
 80065e0:	e000e010 	.word	0xe000e010
 80065e4:	e000e018 	.word	0xe000e018
 80065e8:	20000000 	.word	0x20000000
 80065ec:	10624dd3 	.word	0x10624dd3
 80065f0:	e000e014 	.word	0xe000e014

080065f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80065f4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006604 <vPortEnableVFP+0x10>
 80065f8:	6801      	ldr	r1, [r0, #0]
 80065fa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80065fe:	6001      	str	r1, [r0, #0]
 8006600:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006602:	bf00      	nop
 8006604:	e000ed88 	.word	0xe000ed88

08006608 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006608:	b480      	push	{r7}
 800660a:	b085      	sub	sp, #20
 800660c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800660e:	f3ef 8305 	mrs	r3, IPSR
 8006612:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	2b0f      	cmp	r3, #15
 8006618:	d914      	bls.n	8006644 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800661a:	4a17      	ldr	r2, [pc, #92]	; (8006678 <vPortValidateInterruptPriority+0x70>)
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	4413      	add	r3, r2
 8006620:	781b      	ldrb	r3, [r3, #0]
 8006622:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006624:	4b15      	ldr	r3, [pc, #84]	; (800667c <vPortValidateInterruptPriority+0x74>)
 8006626:	781b      	ldrb	r3, [r3, #0]
 8006628:	7afa      	ldrb	r2, [r7, #11]
 800662a:	429a      	cmp	r2, r3
 800662c:	d20a      	bcs.n	8006644 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800662e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006632:	f383 8811 	msr	BASEPRI, r3
 8006636:	f3bf 8f6f 	isb	sy
 800663a:	f3bf 8f4f 	dsb	sy
 800663e:	607b      	str	r3, [r7, #4]
}
 8006640:	bf00      	nop
 8006642:	e7fe      	b.n	8006642 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006644:	4b0e      	ldr	r3, [pc, #56]	; (8006680 <vPortValidateInterruptPriority+0x78>)
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800664c:	4b0d      	ldr	r3, [pc, #52]	; (8006684 <vPortValidateInterruptPriority+0x7c>)
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	429a      	cmp	r2, r3
 8006652:	d90a      	bls.n	800666a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8006654:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006658:	f383 8811 	msr	BASEPRI, r3
 800665c:	f3bf 8f6f 	isb	sy
 8006660:	f3bf 8f4f 	dsb	sy
 8006664:	603b      	str	r3, [r7, #0]
}
 8006666:	bf00      	nop
 8006668:	e7fe      	b.n	8006668 <vPortValidateInterruptPriority+0x60>
	}
 800666a:	bf00      	nop
 800666c:	3714      	adds	r7, #20
 800666e:	46bd      	mov	sp, r7
 8006670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006674:	4770      	bx	lr
 8006676:	bf00      	nop
 8006678:	e000e3f0 	.word	0xe000e3f0
 800667c:	20000d14 	.word	0x20000d14
 8006680:	e000ed0c 	.word	0xe000ed0c
 8006684:	20000d18 	.word	0x20000d18

08006688 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006688:	b580      	push	{r7, lr}
 800668a:	b08a      	sub	sp, #40	; 0x28
 800668c:	af00      	add	r7, sp, #0
 800668e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006690:	2300      	movs	r3, #0
 8006692:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006694:	f7fe fd9c 	bl	80051d0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006698:	4b5b      	ldr	r3, [pc, #364]	; (8006808 <pvPortMalloc+0x180>)
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	2b00      	cmp	r3, #0
 800669e:	d101      	bne.n	80066a4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80066a0:	f000 f920 	bl	80068e4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80066a4:	4b59      	ldr	r3, [pc, #356]	; (800680c <pvPortMalloc+0x184>)
 80066a6:	681a      	ldr	r2, [r3, #0]
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	4013      	ands	r3, r2
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	f040 8093 	bne.w	80067d8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d01d      	beq.n	80066f4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80066b8:	2208      	movs	r2, #8
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	4413      	add	r3, r2
 80066be:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	f003 0307 	and.w	r3, r3, #7
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d014      	beq.n	80066f4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	f023 0307 	bic.w	r3, r3, #7
 80066d0:	3308      	adds	r3, #8
 80066d2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	f003 0307 	and.w	r3, r3, #7
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d00a      	beq.n	80066f4 <pvPortMalloc+0x6c>
	__asm volatile
 80066de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066e2:	f383 8811 	msr	BASEPRI, r3
 80066e6:	f3bf 8f6f 	isb	sy
 80066ea:	f3bf 8f4f 	dsb	sy
 80066ee:	617b      	str	r3, [r7, #20]
}
 80066f0:	bf00      	nop
 80066f2:	e7fe      	b.n	80066f2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d06e      	beq.n	80067d8 <pvPortMalloc+0x150>
 80066fa:	4b45      	ldr	r3, [pc, #276]	; (8006810 <pvPortMalloc+0x188>)
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	687a      	ldr	r2, [r7, #4]
 8006700:	429a      	cmp	r2, r3
 8006702:	d869      	bhi.n	80067d8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006704:	4b43      	ldr	r3, [pc, #268]	; (8006814 <pvPortMalloc+0x18c>)
 8006706:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006708:	4b42      	ldr	r3, [pc, #264]	; (8006814 <pvPortMalloc+0x18c>)
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800670e:	e004      	b.n	800671a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006712:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800671a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800671c:	685b      	ldr	r3, [r3, #4]
 800671e:	687a      	ldr	r2, [r7, #4]
 8006720:	429a      	cmp	r2, r3
 8006722:	d903      	bls.n	800672c <pvPortMalloc+0xa4>
 8006724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	2b00      	cmp	r3, #0
 800672a:	d1f1      	bne.n	8006710 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800672c:	4b36      	ldr	r3, [pc, #216]	; (8006808 <pvPortMalloc+0x180>)
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006732:	429a      	cmp	r2, r3
 8006734:	d050      	beq.n	80067d8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006736:	6a3b      	ldr	r3, [r7, #32]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	2208      	movs	r2, #8
 800673c:	4413      	add	r3, r2
 800673e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006742:	681a      	ldr	r2, [r3, #0]
 8006744:	6a3b      	ldr	r3, [r7, #32]
 8006746:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800674a:	685a      	ldr	r2, [r3, #4]
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	1ad2      	subs	r2, r2, r3
 8006750:	2308      	movs	r3, #8
 8006752:	005b      	lsls	r3, r3, #1
 8006754:	429a      	cmp	r2, r3
 8006756:	d91f      	bls.n	8006798 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006758:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	4413      	add	r3, r2
 800675e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006760:	69bb      	ldr	r3, [r7, #24]
 8006762:	f003 0307 	and.w	r3, r3, #7
 8006766:	2b00      	cmp	r3, #0
 8006768:	d00a      	beq.n	8006780 <pvPortMalloc+0xf8>
	__asm volatile
 800676a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800676e:	f383 8811 	msr	BASEPRI, r3
 8006772:	f3bf 8f6f 	isb	sy
 8006776:	f3bf 8f4f 	dsb	sy
 800677a:	613b      	str	r3, [r7, #16]
}
 800677c:	bf00      	nop
 800677e:	e7fe      	b.n	800677e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006782:	685a      	ldr	r2, [r3, #4]
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	1ad2      	subs	r2, r2, r3
 8006788:	69bb      	ldr	r3, [r7, #24]
 800678a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800678c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800678e:	687a      	ldr	r2, [r7, #4]
 8006790:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006792:	69b8      	ldr	r0, [r7, #24]
 8006794:	f000 f908 	bl	80069a8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006798:	4b1d      	ldr	r3, [pc, #116]	; (8006810 <pvPortMalloc+0x188>)
 800679a:	681a      	ldr	r2, [r3, #0]
 800679c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800679e:	685b      	ldr	r3, [r3, #4]
 80067a0:	1ad3      	subs	r3, r2, r3
 80067a2:	4a1b      	ldr	r2, [pc, #108]	; (8006810 <pvPortMalloc+0x188>)
 80067a4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80067a6:	4b1a      	ldr	r3, [pc, #104]	; (8006810 <pvPortMalloc+0x188>)
 80067a8:	681a      	ldr	r2, [r3, #0]
 80067aa:	4b1b      	ldr	r3, [pc, #108]	; (8006818 <pvPortMalloc+0x190>)
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	429a      	cmp	r2, r3
 80067b0:	d203      	bcs.n	80067ba <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80067b2:	4b17      	ldr	r3, [pc, #92]	; (8006810 <pvPortMalloc+0x188>)
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	4a18      	ldr	r2, [pc, #96]	; (8006818 <pvPortMalloc+0x190>)
 80067b8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80067ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067bc:	685a      	ldr	r2, [r3, #4]
 80067be:	4b13      	ldr	r3, [pc, #76]	; (800680c <pvPortMalloc+0x184>)
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	431a      	orrs	r2, r3
 80067c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067c6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80067c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067ca:	2200      	movs	r2, #0
 80067cc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80067ce:	4b13      	ldr	r3, [pc, #76]	; (800681c <pvPortMalloc+0x194>)
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	3301      	adds	r3, #1
 80067d4:	4a11      	ldr	r2, [pc, #68]	; (800681c <pvPortMalloc+0x194>)
 80067d6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80067d8:	f7fe fd08 	bl	80051ec <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80067dc:	69fb      	ldr	r3, [r7, #28]
 80067de:	f003 0307 	and.w	r3, r3, #7
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d00a      	beq.n	80067fc <pvPortMalloc+0x174>
	__asm volatile
 80067e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067ea:	f383 8811 	msr	BASEPRI, r3
 80067ee:	f3bf 8f6f 	isb	sy
 80067f2:	f3bf 8f4f 	dsb	sy
 80067f6:	60fb      	str	r3, [r7, #12]
}
 80067f8:	bf00      	nop
 80067fa:	e7fe      	b.n	80067fa <pvPortMalloc+0x172>
	return pvReturn;
 80067fc:	69fb      	ldr	r3, [r7, #28]
}
 80067fe:	4618      	mov	r0, r3
 8006800:	3728      	adds	r7, #40	; 0x28
 8006802:	46bd      	mov	sp, r7
 8006804:	bd80      	pop	{r7, pc}
 8006806:	bf00      	nop
 8006808:	20004924 	.word	0x20004924
 800680c:	20004938 	.word	0x20004938
 8006810:	20004928 	.word	0x20004928
 8006814:	2000491c 	.word	0x2000491c
 8006818:	2000492c 	.word	0x2000492c
 800681c:	20004930 	.word	0x20004930

08006820 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006820:	b580      	push	{r7, lr}
 8006822:	b086      	sub	sp, #24
 8006824:	af00      	add	r7, sp, #0
 8006826:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	2b00      	cmp	r3, #0
 8006830:	d04d      	beq.n	80068ce <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006832:	2308      	movs	r3, #8
 8006834:	425b      	negs	r3, r3
 8006836:	697a      	ldr	r2, [r7, #20]
 8006838:	4413      	add	r3, r2
 800683a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800683c:	697b      	ldr	r3, [r7, #20]
 800683e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006840:	693b      	ldr	r3, [r7, #16]
 8006842:	685a      	ldr	r2, [r3, #4]
 8006844:	4b24      	ldr	r3, [pc, #144]	; (80068d8 <vPortFree+0xb8>)
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	4013      	ands	r3, r2
 800684a:	2b00      	cmp	r3, #0
 800684c:	d10a      	bne.n	8006864 <vPortFree+0x44>
	__asm volatile
 800684e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006852:	f383 8811 	msr	BASEPRI, r3
 8006856:	f3bf 8f6f 	isb	sy
 800685a:	f3bf 8f4f 	dsb	sy
 800685e:	60fb      	str	r3, [r7, #12]
}
 8006860:	bf00      	nop
 8006862:	e7fe      	b.n	8006862 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006864:	693b      	ldr	r3, [r7, #16]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	2b00      	cmp	r3, #0
 800686a:	d00a      	beq.n	8006882 <vPortFree+0x62>
	__asm volatile
 800686c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006870:	f383 8811 	msr	BASEPRI, r3
 8006874:	f3bf 8f6f 	isb	sy
 8006878:	f3bf 8f4f 	dsb	sy
 800687c:	60bb      	str	r3, [r7, #8]
}
 800687e:	bf00      	nop
 8006880:	e7fe      	b.n	8006880 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006882:	693b      	ldr	r3, [r7, #16]
 8006884:	685a      	ldr	r2, [r3, #4]
 8006886:	4b14      	ldr	r3, [pc, #80]	; (80068d8 <vPortFree+0xb8>)
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	4013      	ands	r3, r2
 800688c:	2b00      	cmp	r3, #0
 800688e:	d01e      	beq.n	80068ce <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006890:	693b      	ldr	r3, [r7, #16]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	2b00      	cmp	r3, #0
 8006896:	d11a      	bne.n	80068ce <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006898:	693b      	ldr	r3, [r7, #16]
 800689a:	685a      	ldr	r2, [r3, #4]
 800689c:	4b0e      	ldr	r3, [pc, #56]	; (80068d8 <vPortFree+0xb8>)
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	43db      	mvns	r3, r3
 80068a2:	401a      	ands	r2, r3
 80068a4:	693b      	ldr	r3, [r7, #16]
 80068a6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80068a8:	f7fe fc92 	bl	80051d0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80068ac:	693b      	ldr	r3, [r7, #16]
 80068ae:	685a      	ldr	r2, [r3, #4]
 80068b0:	4b0a      	ldr	r3, [pc, #40]	; (80068dc <vPortFree+0xbc>)
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	4413      	add	r3, r2
 80068b6:	4a09      	ldr	r2, [pc, #36]	; (80068dc <vPortFree+0xbc>)
 80068b8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80068ba:	6938      	ldr	r0, [r7, #16]
 80068bc:	f000 f874 	bl	80069a8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80068c0:	4b07      	ldr	r3, [pc, #28]	; (80068e0 <vPortFree+0xc0>)
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	3301      	adds	r3, #1
 80068c6:	4a06      	ldr	r2, [pc, #24]	; (80068e0 <vPortFree+0xc0>)
 80068c8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80068ca:	f7fe fc8f 	bl	80051ec <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80068ce:	bf00      	nop
 80068d0:	3718      	adds	r7, #24
 80068d2:	46bd      	mov	sp, r7
 80068d4:	bd80      	pop	{r7, pc}
 80068d6:	bf00      	nop
 80068d8:	20004938 	.word	0x20004938
 80068dc:	20004928 	.word	0x20004928
 80068e0:	20004934 	.word	0x20004934

080068e4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80068e4:	b480      	push	{r7}
 80068e6:	b085      	sub	sp, #20
 80068e8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80068ea:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80068ee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80068f0:	4b27      	ldr	r3, [pc, #156]	; (8006990 <prvHeapInit+0xac>)
 80068f2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	f003 0307 	and.w	r3, r3, #7
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d00c      	beq.n	8006918 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	3307      	adds	r3, #7
 8006902:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	f023 0307 	bic.w	r3, r3, #7
 800690a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800690c:	68ba      	ldr	r2, [r7, #8]
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	1ad3      	subs	r3, r2, r3
 8006912:	4a1f      	ldr	r2, [pc, #124]	; (8006990 <prvHeapInit+0xac>)
 8006914:	4413      	add	r3, r2
 8006916:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800691c:	4a1d      	ldr	r2, [pc, #116]	; (8006994 <prvHeapInit+0xb0>)
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006922:	4b1c      	ldr	r3, [pc, #112]	; (8006994 <prvHeapInit+0xb0>)
 8006924:	2200      	movs	r2, #0
 8006926:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	68ba      	ldr	r2, [r7, #8]
 800692c:	4413      	add	r3, r2
 800692e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006930:	2208      	movs	r2, #8
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	1a9b      	subs	r3, r3, r2
 8006936:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	f023 0307 	bic.w	r3, r3, #7
 800693e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	4a15      	ldr	r2, [pc, #84]	; (8006998 <prvHeapInit+0xb4>)
 8006944:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006946:	4b14      	ldr	r3, [pc, #80]	; (8006998 <prvHeapInit+0xb4>)
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	2200      	movs	r2, #0
 800694c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800694e:	4b12      	ldr	r3, [pc, #72]	; (8006998 <prvHeapInit+0xb4>)
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	2200      	movs	r2, #0
 8006954:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800695a:	683b      	ldr	r3, [r7, #0]
 800695c:	68fa      	ldr	r2, [r7, #12]
 800695e:	1ad2      	subs	r2, r2, r3
 8006960:	683b      	ldr	r3, [r7, #0]
 8006962:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006964:	4b0c      	ldr	r3, [pc, #48]	; (8006998 <prvHeapInit+0xb4>)
 8006966:	681a      	ldr	r2, [r3, #0]
 8006968:	683b      	ldr	r3, [r7, #0]
 800696a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800696c:	683b      	ldr	r3, [r7, #0]
 800696e:	685b      	ldr	r3, [r3, #4]
 8006970:	4a0a      	ldr	r2, [pc, #40]	; (800699c <prvHeapInit+0xb8>)
 8006972:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006974:	683b      	ldr	r3, [r7, #0]
 8006976:	685b      	ldr	r3, [r3, #4]
 8006978:	4a09      	ldr	r2, [pc, #36]	; (80069a0 <prvHeapInit+0xbc>)
 800697a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800697c:	4b09      	ldr	r3, [pc, #36]	; (80069a4 <prvHeapInit+0xc0>)
 800697e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006982:	601a      	str	r2, [r3, #0]
}
 8006984:	bf00      	nop
 8006986:	3714      	adds	r7, #20
 8006988:	46bd      	mov	sp, r7
 800698a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800698e:	4770      	bx	lr
 8006990:	20000d1c 	.word	0x20000d1c
 8006994:	2000491c 	.word	0x2000491c
 8006998:	20004924 	.word	0x20004924
 800699c:	2000492c 	.word	0x2000492c
 80069a0:	20004928 	.word	0x20004928
 80069a4:	20004938 	.word	0x20004938

080069a8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80069a8:	b480      	push	{r7}
 80069aa:	b085      	sub	sp, #20
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80069b0:	4b28      	ldr	r3, [pc, #160]	; (8006a54 <prvInsertBlockIntoFreeList+0xac>)
 80069b2:	60fb      	str	r3, [r7, #12]
 80069b4:	e002      	b.n	80069bc <prvInsertBlockIntoFreeList+0x14>
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	60fb      	str	r3, [r7, #12]
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	687a      	ldr	r2, [r7, #4]
 80069c2:	429a      	cmp	r2, r3
 80069c4:	d8f7      	bhi.n	80069b6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	685b      	ldr	r3, [r3, #4]
 80069ce:	68ba      	ldr	r2, [r7, #8]
 80069d0:	4413      	add	r3, r2
 80069d2:	687a      	ldr	r2, [r7, #4]
 80069d4:	429a      	cmp	r2, r3
 80069d6:	d108      	bne.n	80069ea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	685a      	ldr	r2, [r3, #4]
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	685b      	ldr	r3, [r3, #4]
 80069e0:	441a      	add	r2, r3
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	685b      	ldr	r3, [r3, #4]
 80069f2:	68ba      	ldr	r2, [r7, #8]
 80069f4:	441a      	add	r2, r3
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	429a      	cmp	r2, r3
 80069fc:	d118      	bne.n	8006a30 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	681a      	ldr	r2, [r3, #0]
 8006a02:	4b15      	ldr	r3, [pc, #84]	; (8006a58 <prvInsertBlockIntoFreeList+0xb0>)
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	429a      	cmp	r2, r3
 8006a08:	d00d      	beq.n	8006a26 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	685a      	ldr	r2, [r3, #4]
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	685b      	ldr	r3, [r3, #4]
 8006a14:	441a      	add	r2, r3
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	681a      	ldr	r2, [r3, #0]
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	601a      	str	r2, [r3, #0]
 8006a24:	e008      	b.n	8006a38 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006a26:	4b0c      	ldr	r3, [pc, #48]	; (8006a58 <prvInsertBlockIntoFreeList+0xb0>)
 8006a28:	681a      	ldr	r2, [r3, #0]
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	601a      	str	r2, [r3, #0]
 8006a2e:	e003      	b.n	8006a38 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	681a      	ldr	r2, [r3, #0]
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006a38:	68fa      	ldr	r2, [r7, #12]
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	429a      	cmp	r2, r3
 8006a3e:	d002      	beq.n	8006a46 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	687a      	ldr	r2, [r7, #4]
 8006a44:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006a46:	bf00      	nop
 8006a48:	3714      	adds	r7, #20
 8006a4a:	46bd      	mov	sp, r7
 8006a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a50:	4770      	bx	lr
 8006a52:	bf00      	nop
 8006a54:	2000491c 	.word	0x2000491c
 8006a58:	20004924 	.word	0x20004924

08006a5c <__libc_init_array>:
 8006a5c:	b570      	push	{r4, r5, r6, lr}
 8006a5e:	4d0d      	ldr	r5, [pc, #52]	; (8006a94 <__libc_init_array+0x38>)
 8006a60:	4c0d      	ldr	r4, [pc, #52]	; (8006a98 <__libc_init_array+0x3c>)
 8006a62:	1b64      	subs	r4, r4, r5
 8006a64:	10a4      	asrs	r4, r4, #2
 8006a66:	2600      	movs	r6, #0
 8006a68:	42a6      	cmp	r6, r4
 8006a6a:	d109      	bne.n	8006a80 <__libc_init_array+0x24>
 8006a6c:	4d0b      	ldr	r5, [pc, #44]	; (8006a9c <__libc_init_array+0x40>)
 8006a6e:	4c0c      	ldr	r4, [pc, #48]	; (8006aa0 <__libc_init_array+0x44>)
 8006a70:	f000 f88a 	bl	8006b88 <_init>
 8006a74:	1b64      	subs	r4, r4, r5
 8006a76:	10a4      	asrs	r4, r4, #2
 8006a78:	2600      	movs	r6, #0
 8006a7a:	42a6      	cmp	r6, r4
 8006a7c:	d105      	bne.n	8006a8a <__libc_init_array+0x2e>
 8006a7e:	bd70      	pop	{r4, r5, r6, pc}
 8006a80:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a84:	4798      	blx	r3
 8006a86:	3601      	adds	r6, #1
 8006a88:	e7ee      	b.n	8006a68 <__libc_init_array+0xc>
 8006a8a:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a8e:	4798      	blx	r3
 8006a90:	3601      	adds	r6, #1
 8006a92:	e7f2      	b.n	8006a7a <__libc_init_array+0x1e>
 8006a94:	08006c64 	.word	0x08006c64
 8006a98:	08006c64 	.word	0x08006c64
 8006a9c:	08006c64 	.word	0x08006c64
 8006aa0:	08006c68 	.word	0x08006c68

08006aa4 <__itoa>:
 8006aa4:	1e93      	subs	r3, r2, #2
 8006aa6:	2b22      	cmp	r3, #34	; 0x22
 8006aa8:	b510      	push	{r4, lr}
 8006aaa:	460c      	mov	r4, r1
 8006aac:	d904      	bls.n	8006ab8 <__itoa+0x14>
 8006aae:	2300      	movs	r3, #0
 8006ab0:	700b      	strb	r3, [r1, #0]
 8006ab2:	461c      	mov	r4, r3
 8006ab4:	4620      	mov	r0, r4
 8006ab6:	bd10      	pop	{r4, pc}
 8006ab8:	2a0a      	cmp	r2, #10
 8006aba:	d109      	bne.n	8006ad0 <__itoa+0x2c>
 8006abc:	2800      	cmp	r0, #0
 8006abe:	da07      	bge.n	8006ad0 <__itoa+0x2c>
 8006ac0:	232d      	movs	r3, #45	; 0x2d
 8006ac2:	700b      	strb	r3, [r1, #0]
 8006ac4:	4240      	negs	r0, r0
 8006ac6:	2101      	movs	r1, #1
 8006ac8:	4421      	add	r1, r4
 8006aca:	f000 f81b 	bl	8006b04 <__utoa>
 8006ace:	e7f1      	b.n	8006ab4 <__itoa+0x10>
 8006ad0:	2100      	movs	r1, #0
 8006ad2:	e7f9      	b.n	8006ac8 <__itoa+0x24>

08006ad4 <itoa>:
 8006ad4:	f7ff bfe6 	b.w	8006aa4 <__itoa>

08006ad8 <memcpy>:
 8006ad8:	440a      	add	r2, r1
 8006ada:	4291      	cmp	r1, r2
 8006adc:	f100 33ff 	add.w	r3, r0, #4294967295
 8006ae0:	d100      	bne.n	8006ae4 <memcpy+0xc>
 8006ae2:	4770      	bx	lr
 8006ae4:	b510      	push	{r4, lr}
 8006ae6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006aea:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006aee:	4291      	cmp	r1, r2
 8006af0:	d1f9      	bne.n	8006ae6 <memcpy+0xe>
 8006af2:	bd10      	pop	{r4, pc}

08006af4 <memset>:
 8006af4:	4402      	add	r2, r0
 8006af6:	4603      	mov	r3, r0
 8006af8:	4293      	cmp	r3, r2
 8006afa:	d100      	bne.n	8006afe <memset+0xa>
 8006afc:	4770      	bx	lr
 8006afe:	f803 1b01 	strb.w	r1, [r3], #1
 8006b02:	e7f9      	b.n	8006af8 <memset+0x4>

08006b04 <__utoa>:
 8006b04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006b06:	4c1f      	ldr	r4, [pc, #124]	; (8006b84 <__utoa+0x80>)
 8006b08:	b08b      	sub	sp, #44	; 0x2c
 8006b0a:	4605      	mov	r5, r0
 8006b0c:	460b      	mov	r3, r1
 8006b0e:	466e      	mov	r6, sp
 8006b10:	f104 0c20 	add.w	ip, r4, #32
 8006b14:	6820      	ldr	r0, [r4, #0]
 8006b16:	6861      	ldr	r1, [r4, #4]
 8006b18:	4637      	mov	r7, r6
 8006b1a:	c703      	stmia	r7!, {r0, r1}
 8006b1c:	3408      	adds	r4, #8
 8006b1e:	4564      	cmp	r4, ip
 8006b20:	463e      	mov	r6, r7
 8006b22:	d1f7      	bne.n	8006b14 <__utoa+0x10>
 8006b24:	7921      	ldrb	r1, [r4, #4]
 8006b26:	7139      	strb	r1, [r7, #4]
 8006b28:	1e91      	subs	r1, r2, #2
 8006b2a:	6820      	ldr	r0, [r4, #0]
 8006b2c:	6038      	str	r0, [r7, #0]
 8006b2e:	2922      	cmp	r1, #34	; 0x22
 8006b30:	f04f 0100 	mov.w	r1, #0
 8006b34:	d904      	bls.n	8006b40 <__utoa+0x3c>
 8006b36:	7019      	strb	r1, [r3, #0]
 8006b38:	460b      	mov	r3, r1
 8006b3a:	4618      	mov	r0, r3
 8006b3c:	b00b      	add	sp, #44	; 0x2c
 8006b3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006b40:	1e58      	subs	r0, r3, #1
 8006b42:	4684      	mov	ip, r0
 8006b44:	fbb5 f7f2 	udiv	r7, r5, r2
 8006b48:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 8006b4c:	fb02 5617 	mls	r6, r2, r7, r5
 8006b50:	4476      	add	r6, lr
 8006b52:	460c      	mov	r4, r1
 8006b54:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8006b58:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8006b5c:	462e      	mov	r6, r5
 8006b5e:	42b2      	cmp	r2, r6
 8006b60:	f101 0101 	add.w	r1, r1, #1
 8006b64:	463d      	mov	r5, r7
 8006b66:	d9ed      	bls.n	8006b44 <__utoa+0x40>
 8006b68:	2200      	movs	r2, #0
 8006b6a:	545a      	strb	r2, [r3, r1]
 8006b6c:	1919      	adds	r1, r3, r4
 8006b6e:	1aa5      	subs	r5, r4, r2
 8006b70:	42aa      	cmp	r2, r5
 8006b72:	dae2      	bge.n	8006b3a <__utoa+0x36>
 8006b74:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8006b78:	780e      	ldrb	r6, [r1, #0]
 8006b7a:	7006      	strb	r6, [r0, #0]
 8006b7c:	3201      	adds	r2, #1
 8006b7e:	f801 5901 	strb.w	r5, [r1], #-1
 8006b82:	e7f4      	b.n	8006b6e <__utoa+0x6a>
 8006b84:	08006c34 	.word	0x08006c34

08006b88 <_init>:
 8006b88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b8a:	bf00      	nop
 8006b8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b8e:	bc08      	pop	{r3}
 8006b90:	469e      	mov	lr, r3
 8006b92:	4770      	bx	lr

08006b94 <_fini>:
 8006b94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b96:	bf00      	nop
 8006b98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b9a:	bc08      	pop	{r3}
 8006b9c:	469e      	mov	lr, r3
 8006b9e:	4770      	bx	lr
